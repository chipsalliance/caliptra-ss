// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

package mcu_mbox_csr_pkg;

    localparam MCU_MBOX_CSR_DATA_WIDTH = 32;
    localparam MCU_MBOX_CSR_MIN_ADDR_WIDTH = 22;

    typedef struct packed{
        logic rd_ack;
        logic [31:0] rd_data;
        logic wr_ack;
    } mcu_mbox_csr__MBOX_SRAM__external__in_t;

    typedef struct packed{
        logic hwclr;
        logic hwset;
    } mcu_mbox_csr__mbox_lock__lock__in_t;

    typedef struct packed{
        mcu_mbox_csr__mbox_lock__lock__in_t lock;
    } mcu_mbox_csr__mbox_lock__in_t;

    typedef struct packed{
        logic [31:0] next;
    } mcu_mbox_csr__mbox_user_user_70a5ffab__user_we_466f6a8b__in_t;

    typedef struct packed{
        mcu_mbox_csr__mbox_user_user_70a5ffab__user_we_466f6a8b__in_t user;
    } mcu_mbox_csr__mbox_user_user_70a5ffab__in_t;

    typedef struct packed{
        logic hwclr;
    } mcu_mbox_csr__mbox_target_user__user__in_t;

    typedef struct packed{
        mcu_mbox_csr__mbox_target_user__user__in_t user;
    } mcu_mbox_csr__mbox_target_user__in_t;

    typedef struct packed{
        logic hwclr;
    } mcu_mbox_csr__mbox_target_user_valid__valid__in_t;

    typedef struct packed{
        mcu_mbox_csr__mbox_target_user_valid__valid__in_t valid;
    } mcu_mbox_csr__mbox_target_user_valid__in_t;

    typedef struct packed{
        logic hwclr;
    } mcu_mbox_csr__mbox_cmd__command__in_t;

    typedef struct packed{
        mcu_mbox_csr__mbox_cmd__command__in_t command;
    } mcu_mbox_csr__mbox_cmd__in_t;

    typedef struct packed{
        logic hwclr;
    } mcu_mbox_csr__mbox_dlen__length__in_t;

    typedef struct packed{
        mcu_mbox_csr__mbox_dlen__length__in_t length;
    } mcu_mbox_csr__mbox_dlen__in_t;

    typedef struct packed{
        logic hwclr;
    } mcu_mbox_csr__mbox_target_status__status__in_t;

    typedef struct packed{
        logic hwclr;
    } mcu_mbox_csr__mbox_target_status__done__in_t;

    typedef struct packed{
        mcu_mbox_csr__mbox_target_status__status__in_t status;
        mcu_mbox_csr__mbox_target_status__done__in_t done;
    } mcu_mbox_csr__mbox_target_status__in_t;

    typedef struct packed{
        logic hwclr;
    } mcu_mbox_csr__mbox_cmd_status__status__in_t;

    typedef struct packed{
        mcu_mbox_csr__mbox_cmd_status__status__in_t status;
    } mcu_mbox_csr__mbox_cmd_status__in_t;

    typedef struct packed{
        logic hwset;
    } mcu_mbox_csr__mbox_hw_status_ecc_double_error_38cec4b0_ecc_single_error_9c62b760__ecc_single_error_next_e066e214_wel_e066e214__in_t;

    typedef struct packed{
        logic hwset;
    } mcu_mbox_csr__mbox_hw_status_ecc_double_error_38cec4b0_ecc_single_error_9c62b760__ecc_double_error_next_e066e214_wel_e066e214__in_t;

    typedef struct packed{
        mcu_mbox_csr__mbox_hw_status_ecc_double_error_38cec4b0_ecc_single_error_9c62b760__ecc_single_error_next_e066e214_wel_e066e214__in_t ecc_single_error;
        mcu_mbox_csr__mbox_hw_status_ecc_double_error_38cec4b0_ecc_single_error_9c62b760__ecc_double_error_next_e066e214_wel_e066e214__in_t ecc_double_error;
    } mcu_mbox_csr__mbox_hw_status_ecc_double_error_38cec4b0_ecc_single_error_9c62b760__in_t;

    typedef struct packed{
        logic rst_b;
        logic valid_requester_target_req;
        logic valid_target_req;
        logic valid_requester_req;
        logic valid_root_req;
        mcu_mbox_csr__MBOX_SRAM__external__in_t MBOX_SRAM;
        mcu_mbox_csr__mbox_lock__in_t mbox_lock;
        mcu_mbox_csr__mbox_user_user_70a5ffab__in_t mbox_user;
        mcu_mbox_csr__mbox_target_user__in_t mbox_target_user;
        mcu_mbox_csr__mbox_target_user_valid__in_t mbox_target_user_valid;
        mcu_mbox_csr__mbox_cmd__in_t mbox_cmd;
        mcu_mbox_csr__mbox_dlen__in_t mbox_dlen;
        mcu_mbox_csr__mbox_target_status__in_t mbox_target_status;
        mcu_mbox_csr__mbox_cmd_status__in_t mbox_cmd_status;
        mcu_mbox_csr__mbox_hw_status_ecc_double_error_38cec4b0_ecc_single_error_9c62b760__in_t mbox_hw_status;
    } mcu_mbox_csr__in_t;

    typedef struct packed{
        logic req;
        logic [20:0] addr;
        logic req_is_wr;
        logic [31:0] wr_data;
        logic [31:0] wr_biten;
    } mcu_mbox_csr__MBOX_SRAM__external__out_t;

    typedef struct packed{
        logic value;
        logic swmod;
    } mcu_mbox_csr__mbox_lock__lock__out_t;

    typedef struct packed{
        mcu_mbox_csr__mbox_lock__lock__out_t lock;
    } mcu_mbox_csr__mbox_lock__out_t;

    typedef struct packed{
        logic [31:0] value;
    } mcu_mbox_csr__mbox_user_user_70a5ffab__user_we_466f6a8b__out_t;

    typedef struct packed{
        mcu_mbox_csr__mbox_user_user_70a5ffab__user_we_466f6a8b__out_t user;
    } mcu_mbox_csr__mbox_user_user_70a5ffab__out_t;

    typedef struct packed{
        logic [31:0] value;
    } mcu_mbox_csr__mbox_target_user__user__out_t;

    typedef struct packed{
        mcu_mbox_csr__mbox_target_user__user__out_t user;
    } mcu_mbox_csr__mbox_target_user__out_t;

    typedef struct packed{
        logic value;
    } mcu_mbox_csr__mbox_target_user_valid__valid__out_t;

    typedef struct packed{
        mcu_mbox_csr__mbox_target_user_valid__valid__out_t valid;
    } mcu_mbox_csr__mbox_target_user_valid__out_t;

    typedef struct packed{
        logic value;
    } mcu_mbox_csr__mbox_execute__execute__out_t;

    typedef struct packed{
        mcu_mbox_csr__mbox_execute__execute__out_t execute;
    } mcu_mbox_csr__mbox_execute__out_t;

    typedef struct packed{
        logic [3:0] value;
    } mcu_mbox_csr__mbox_target_status__status__out_t;

    typedef struct packed{
        logic value;
    } mcu_mbox_csr__mbox_target_status__done__out_t;

    typedef struct packed{
        mcu_mbox_csr__mbox_target_status__status__out_t status;
        mcu_mbox_csr__mbox_target_status__done__out_t done;
    } mcu_mbox_csr__mbox_target_status__out_t;

    typedef struct packed{
        logic [3:0] value;
    } mcu_mbox_csr__mbox_cmd_status__status__out_t;

    typedef struct packed{
        mcu_mbox_csr__mbox_cmd_status__status__out_t status;
    } mcu_mbox_csr__mbox_cmd_status__out_t;

    typedef struct packed{
        logic value;
    } mcu_mbox_csr__mbox_hw_status_ecc_double_error_38cec4b0_ecc_single_error_9c62b760__ecc_single_error_next_e066e214_wel_e066e214__out_t;

    typedef struct packed{
        logic value;
    } mcu_mbox_csr__mbox_hw_status_ecc_double_error_38cec4b0_ecc_single_error_9c62b760__ecc_double_error_next_e066e214_wel_e066e214__out_t;

    typedef struct packed{
        mcu_mbox_csr__mbox_hw_status_ecc_double_error_38cec4b0_ecc_single_error_9c62b760__ecc_single_error_next_e066e214_wel_e066e214__out_t ecc_single_error;
        mcu_mbox_csr__mbox_hw_status_ecc_double_error_38cec4b0_ecc_single_error_9c62b760__ecc_double_error_next_e066e214_wel_e066e214__out_t ecc_double_error;
    } mcu_mbox_csr__mbox_hw_status_ecc_double_error_38cec4b0_ecc_single_error_9c62b760__out_t;

    typedef struct packed{
        mcu_mbox_csr__MBOX_SRAM__external__out_t MBOX_SRAM;
        mcu_mbox_csr__mbox_lock__out_t mbox_lock;
        mcu_mbox_csr__mbox_user_user_70a5ffab__out_t mbox_user;
        mcu_mbox_csr__mbox_target_user__out_t mbox_target_user;
        mcu_mbox_csr__mbox_target_user_valid__out_t mbox_target_user_valid;
        mcu_mbox_csr__mbox_execute__out_t mbox_execute;
        mcu_mbox_csr__mbox_target_status__out_t mbox_target_status;
        mcu_mbox_csr__mbox_cmd_status__out_t mbox_cmd_status;
        mcu_mbox_csr__mbox_hw_status_ecc_double_error_38cec4b0_ecc_single_error_9c62b760__out_t mbox_hw_status;
    } mcu_mbox_csr__out_t;

    typedef enum logic [31:0] {
        mcu_mbox_csr__mbox_target_status__status__mbox_status_e__CMD_BUSY = 'h0,
        mcu_mbox_csr__mbox_target_status__status__mbox_status_e__DATA_READY = 'h1,
        mcu_mbox_csr__mbox_target_status__status__mbox_status_e__CMD_COMPLETE = 'h2,
        mcu_mbox_csr__mbox_target_status__status__mbox_status_e__CMD_FAILURE = 'h3
    } mcu_mbox_csr__mbox_target_status__status__mbox_status_e_e;

    typedef enum logic [31:0] {
        mcu_mbox_csr__mbox_cmd_status__status__mbox_status_e__CMD_BUSY = 'h0,
        mcu_mbox_csr__mbox_cmd_status__status__mbox_status_e__DATA_READY = 'h1,
        mcu_mbox_csr__mbox_cmd_status__status__mbox_status_e__CMD_COMPLETE = 'h2,
        mcu_mbox_csr__mbox_cmd_status__status__mbox_status_e__CMD_FAILURE = 'h3
    } mcu_mbox_csr__mbox_cmd_status__status__mbox_status_e_e;

    localparam MCU_MBOX_CSR_ADDR_WIDTH = 32'd22;

endpackage