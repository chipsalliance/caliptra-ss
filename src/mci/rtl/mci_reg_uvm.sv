
// This file was autogenerated by PeakRDL-uvm
package mci_reg_uvm;
    `include "uvm_macros.svh"
    import uvm_pkg::*;
    `include "mci_reg_covergroups.svh"
    // Reg - mci_reg::CAPABILITIES
    class mci_reg__CAPABILITIES extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__CAPABILITIES_bit_cg NUM_MBOX_bit_cg[4];
        mci_reg__CAPABILITIES_fld_cg fld_cg;
        rand uvm_reg_field NUM_MBOX;

        function new(string name = "mci_reg__CAPABILITIES");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.NUM_MBOX = new("NUM_MBOX");
            this.NUM_MBOX.configure(this, 4, 0, "RO", 1, 'h0, 0, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(NUM_MBOX_bit_cg[bt]) NUM_MBOX_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__CAPABILITIES

    // Reg - mci_reg::HW_REV_ID
    class mci_reg__HW_REV_ID extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__HW_REV_ID_bit_cg MC_GENERATION_bit_cg[16];
        mci_reg__HW_REV_ID_bit_cg SOC_STEPPING_ID_bit_cg[16];
        mci_reg__HW_REV_ID_fld_cg fld_cg;
        rand uvm_reg_field MC_GENERATION;
        rand uvm_reg_field SOC_STEPPING_ID;

        function new(string name = "mci_reg__HW_REV_ID");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.MC_GENERATION = new("MC_GENERATION");
            this.MC_GENERATION.configure(this, 16, 0, "RO", 0, 'h1000, 1, 1, 0);
            this.SOC_STEPPING_ID = new("SOC_STEPPING_ID");
            this.SOC_STEPPING_ID.configure(this, 16, 16, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(MC_GENERATION_bit_cg[bt]) MC_GENERATION_bit_cg[bt] = new();
                foreach(SOC_STEPPING_ID_bit_cg[bt]) SOC_STEPPING_ID_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__HW_REV_ID

    // Reg - mci_reg::FW_REV_ID
    class mci_reg__FW_REV_ID extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__FW_REV_ID_bit_cg REV_ID_bit_cg[32];
        mci_reg__FW_REV_ID_fld_cg fld_cg;
        rand uvm_reg_field REV_ID;

        function new(string name = "mci_reg__FW_REV_ID");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.REV_ID = new("REV_ID");
            this.REV_ID.configure(this, 32, 0, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(REV_ID_bit_cg[bt]) REV_ID_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__FW_REV_ID

    // Reg - mci_reg::HW_CONFIG
    class mci_reg__HW_CONFIG extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__HW_CONFIG_bit_cg RSVD_en_bit_cg[1];
        mci_reg__HW_CONFIG_fld_cg fld_cg;
        rand uvm_reg_field RSVD_en;

        function new(string name = "mci_reg__HW_CONFIG");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.RSVD_en = new("RSVD_en");
            this.RSVD_en.configure(this, 1, 0, "RO", 1, 'h0, 0, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(RSVD_en_bit_cg[bt]) RSVD_en_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__HW_CONFIG

    // Reg - mci_reg::BOOT_STATUS
    class mci_reg__BOOT_STATUS extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__BOOT_STATUS_bit_cg status_bit_cg[32];
        mci_reg__BOOT_STATUS_fld_cg fld_cg;
        rand uvm_reg_field status;

        function new(string name = "mci_reg__BOOT_STATUS");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.status = new("status");
            this.status.configure(this, 32, 0, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(status_bit_cg[bt]) status_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__BOOT_STATUS

    // Reg - mci_reg::FLOW_STATUS
    class mci_reg__FLOW_STATUS extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__FLOW_STATUS_bit_cg status_bit_cg[24];
        mci_reg__FLOW_STATUS_bit_cg rsvd_bit_cg[3];
        mci_reg__FLOW_STATUS_bit_cg boot_fsm_ps_bit_cg[5];
        mci_reg__FLOW_STATUS_fld_cg fld_cg;
        rand uvm_reg_field status;
        rand uvm_reg_field rsvd;
        rand uvm_reg_field boot_fsm_ps;

        function new(string name = "mci_reg__FLOW_STATUS");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.status = new("status");
            this.status.configure(this, 24, 0, "RW", 0, 'h0, 1, 1, 0);
            this.rsvd = new("rsvd");
            this.rsvd.configure(this, 3, 24, "RO", 0, 'h0, 1, 1, 0);
            this.boot_fsm_ps = new("boot_fsm_ps");
            this.boot_fsm_ps.configure(this, 5, 27, "RO", 1, 'h0, 0, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(status_bit_cg[bt]) status_bit_cg[bt] = new();
                foreach(rsvd_bit_cg[bt]) rsvd_bit_cg[bt] = new();
                foreach(boot_fsm_ps_bit_cg[bt]) boot_fsm_ps_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__FLOW_STATUS

    // Reg - mci_reg::RESET_REASON
    class mci_reg__RESET_REASON extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__RESET_REASON_bit_cg FW_HITLESS_UPD_RESET_bit_cg[1];
        mci_reg__RESET_REASON_bit_cg FW_BOOT_UPD_RESET_bit_cg[1];
        mci_reg__RESET_REASON_bit_cg WARM_RESET_bit_cg[1];
        mci_reg__RESET_REASON_fld_cg fld_cg;
        rand uvm_reg_field FW_HITLESS_UPD_RESET;
        rand uvm_reg_field FW_BOOT_UPD_RESET;
        rand uvm_reg_field WARM_RESET;

        function new(string name = "mci_reg__RESET_REASON");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.FW_HITLESS_UPD_RESET = new("FW_HITLESS_UPD_RESET");
            this.FW_HITLESS_UPD_RESET.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            this.FW_BOOT_UPD_RESET = new("FW_BOOT_UPD_RESET");
            this.FW_BOOT_UPD_RESET.configure(this, 1, 1, "RO", 1, 'h0, 1, 1, 0);
            this.WARM_RESET = new("WARM_RESET");
            this.WARM_RESET.configure(this, 1, 2, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(FW_HITLESS_UPD_RESET_bit_cg[bt]) FW_HITLESS_UPD_RESET_bit_cg[bt] = new();
                foreach(FW_BOOT_UPD_RESET_bit_cg[bt]) FW_BOOT_UPD_RESET_bit_cg[bt] = new();
                foreach(WARM_RESET_bit_cg[bt]) WARM_RESET_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__RESET_REASON

    // Reg - mci_reg::RESET_STATUS
    class mci_reg__RESET_STATUS extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__RESET_STATUS_bit_cg status_bit_cg[22];
        mci_reg__RESET_STATUS_bit_cg rsvd_bit_cg[3];
        mci_reg__RESET_STATUS_fld_cg fld_cg;
        rand uvm_reg_field status;
        rand uvm_reg_field rsvd;

        function new(string name = "mci_reg__RESET_STATUS");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.status = new("status");
            this.status.configure(this, 22, 0, "RW", 0, 'h0, 1, 1, 0);
            this.rsvd = new("rsvd");
            this.rsvd.configure(this, 3, 22, "RO", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(status_bit_cg[bt]) status_bit_cg[bt] = new();
                foreach(rsvd_bit_cg[bt]) rsvd_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__RESET_STATUS

    // Reg - mci_reg::HW_ERROR_FATAL
    class mci_reg__HW_ERROR_FATAL extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__HW_ERROR_FATAL_bit_cg mcu_sram_ecc_unc_bit_cg[1];
        mci_reg__HW_ERROR_FATAL_bit_cg nmi_pin_bit_cg[1];
        mci_reg__HW_ERROR_FATAL_fld_cg fld_cg;
        rand uvm_reg_field mcu_sram_ecc_unc;
        rand uvm_reg_field nmi_pin;

        function new(string name = "mci_reg__HW_ERROR_FATAL");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.mcu_sram_ecc_unc = new("mcu_sram_ecc_unc");
            this.mcu_sram_ecc_unc.configure(this, 1, 0, "W1C", 1, 'h0, 1, 1, 0);
            this.nmi_pin = new("nmi_pin");
            this.nmi_pin.configure(this, 1, 1, "W1C", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(mcu_sram_ecc_unc_bit_cg[bt]) mcu_sram_ecc_unc_bit_cg[bt] = new();
                foreach(nmi_pin_bit_cg[bt]) nmi_pin_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__HW_ERROR_FATAL

    // Reg - mci_reg::AGG_ERROR_FATAL
    class mci_reg__AGG_ERROR_FATAL extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__AGG_ERROR_FATAL_bit_cg agg_error_fatal31_bit_cg[1];
        mci_reg__AGG_ERROR_FATAL_bit_cg agg_error_fatal30_bit_cg[1];
        mci_reg__AGG_ERROR_FATAL_bit_cg agg_error_fatal29_bit_cg[1];
        mci_reg__AGG_ERROR_FATAL_bit_cg agg_error_fatal28_bit_cg[1];
        mci_reg__AGG_ERROR_FATAL_bit_cg agg_error_fatal27_bit_cg[1];
        mci_reg__AGG_ERROR_FATAL_bit_cg agg_error_fatal26_bit_cg[1];
        mci_reg__AGG_ERROR_FATAL_bit_cg agg_error_fatal25_bit_cg[1];
        mci_reg__AGG_ERROR_FATAL_bit_cg agg_error_fatal24_bit_cg[1];
        mci_reg__AGG_ERROR_FATAL_bit_cg agg_error_fatal23_bit_cg[1];
        mci_reg__AGG_ERROR_FATAL_bit_cg agg_error_fatal22_bit_cg[1];
        mci_reg__AGG_ERROR_FATAL_bit_cg agg_error_fatal21_bit_cg[1];
        mci_reg__AGG_ERROR_FATAL_bit_cg agg_error_fatal20_bit_cg[1];
        mci_reg__AGG_ERROR_FATAL_bit_cg agg_error_fatal19_bit_cg[1];
        mci_reg__AGG_ERROR_FATAL_bit_cg agg_error_fatal18_bit_cg[1];
        mci_reg__AGG_ERROR_FATAL_bit_cg agg_error_fatal17_bit_cg[1];
        mci_reg__AGG_ERROR_FATAL_bit_cg agg_error_fatal16_bit_cg[1];
        mci_reg__AGG_ERROR_FATAL_bit_cg agg_error_fatal15_bit_cg[1];
        mci_reg__AGG_ERROR_FATAL_bit_cg agg_error_fatal14_bit_cg[1];
        mci_reg__AGG_ERROR_FATAL_bit_cg agg_error_fatal13_bit_cg[1];
        mci_reg__AGG_ERROR_FATAL_bit_cg agg_error_fatal12_bit_cg[1];
        mci_reg__AGG_ERROR_FATAL_bit_cg agg_error_fatal11_bit_cg[1];
        mci_reg__AGG_ERROR_FATAL_bit_cg agg_error_fatal10_bit_cg[1];
        mci_reg__AGG_ERROR_FATAL_bit_cg agg_error_fatal9_bit_cg[1];
        mci_reg__AGG_ERROR_FATAL_bit_cg agg_error_fatal8_bit_cg[1];
        mci_reg__AGG_ERROR_FATAL_bit_cg agg_error_fatal7_bit_cg[1];
        mci_reg__AGG_ERROR_FATAL_bit_cg agg_error_fatal6_bit_cg[1];
        mci_reg__AGG_ERROR_FATAL_bit_cg agg_error_fatal5_bit_cg[1];
        mci_reg__AGG_ERROR_FATAL_bit_cg agg_error_fatal4_bit_cg[1];
        mci_reg__AGG_ERROR_FATAL_bit_cg agg_error_fatal3_bit_cg[1];
        mci_reg__AGG_ERROR_FATAL_bit_cg agg_error_fatal2_bit_cg[1];
        mci_reg__AGG_ERROR_FATAL_bit_cg agg_error_fatal1_bit_cg[1];
        mci_reg__AGG_ERROR_FATAL_bit_cg agg_error_fatal0_bit_cg[1];
        mci_reg__AGG_ERROR_FATAL_fld_cg fld_cg;
        rand uvm_reg_field agg_error_fatal31;
        rand uvm_reg_field agg_error_fatal30;
        rand uvm_reg_field agg_error_fatal29;
        rand uvm_reg_field agg_error_fatal28;
        rand uvm_reg_field agg_error_fatal27;
        rand uvm_reg_field agg_error_fatal26;
        rand uvm_reg_field agg_error_fatal25;
        rand uvm_reg_field agg_error_fatal24;
        rand uvm_reg_field agg_error_fatal23;
        rand uvm_reg_field agg_error_fatal22;
        rand uvm_reg_field agg_error_fatal21;
        rand uvm_reg_field agg_error_fatal20;
        rand uvm_reg_field agg_error_fatal19;
        rand uvm_reg_field agg_error_fatal18;
        rand uvm_reg_field agg_error_fatal17;
        rand uvm_reg_field agg_error_fatal16;
        rand uvm_reg_field agg_error_fatal15;
        rand uvm_reg_field agg_error_fatal14;
        rand uvm_reg_field agg_error_fatal13;
        rand uvm_reg_field agg_error_fatal12;
        rand uvm_reg_field agg_error_fatal11;
        rand uvm_reg_field agg_error_fatal10;
        rand uvm_reg_field agg_error_fatal9;
        rand uvm_reg_field agg_error_fatal8;
        rand uvm_reg_field agg_error_fatal7;
        rand uvm_reg_field agg_error_fatal6;
        rand uvm_reg_field agg_error_fatal5;
        rand uvm_reg_field agg_error_fatal4;
        rand uvm_reg_field agg_error_fatal3;
        rand uvm_reg_field agg_error_fatal2;
        rand uvm_reg_field agg_error_fatal1;
        rand uvm_reg_field agg_error_fatal0;

        function new(string name = "mci_reg__AGG_ERROR_FATAL");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.agg_error_fatal31 = new("agg_error_fatal31");
            this.agg_error_fatal31.configure(this, 1, 0, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_fatal30 = new("agg_error_fatal30");
            this.agg_error_fatal30.configure(this, 1, 1, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_fatal29 = new("agg_error_fatal29");
            this.agg_error_fatal29.configure(this, 1, 2, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_fatal28 = new("agg_error_fatal28");
            this.agg_error_fatal28.configure(this, 1, 3, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_fatal27 = new("agg_error_fatal27");
            this.agg_error_fatal27.configure(this, 1, 4, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_fatal26 = new("agg_error_fatal26");
            this.agg_error_fatal26.configure(this, 1, 5, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_fatal25 = new("agg_error_fatal25");
            this.agg_error_fatal25.configure(this, 1, 6, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_fatal24 = new("agg_error_fatal24");
            this.agg_error_fatal24.configure(this, 1, 7, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_fatal23 = new("agg_error_fatal23");
            this.agg_error_fatal23.configure(this, 1, 8, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_fatal22 = new("agg_error_fatal22");
            this.agg_error_fatal22.configure(this, 1, 9, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_fatal21 = new("agg_error_fatal21");
            this.agg_error_fatal21.configure(this, 1, 10, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_fatal20 = new("agg_error_fatal20");
            this.agg_error_fatal20.configure(this, 1, 11, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_fatal19 = new("agg_error_fatal19");
            this.agg_error_fatal19.configure(this, 1, 12, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_fatal18 = new("agg_error_fatal18");
            this.agg_error_fatal18.configure(this, 1, 13, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_fatal17 = new("agg_error_fatal17");
            this.agg_error_fatal17.configure(this, 1, 14, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_fatal16 = new("agg_error_fatal16");
            this.agg_error_fatal16.configure(this, 1, 15, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_fatal15 = new("agg_error_fatal15");
            this.agg_error_fatal15.configure(this, 1, 16, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_fatal14 = new("agg_error_fatal14");
            this.agg_error_fatal14.configure(this, 1, 17, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_fatal13 = new("agg_error_fatal13");
            this.agg_error_fatal13.configure(this, 1, 18, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_fatal12 = new("agg_error_fatal12");
            this.agg_error_fatal12.configure(this, 1, 19, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_fatal11 = new("agg_error_fatal11");
            this.agg_error_fatal11.configure(this, 1, 20, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_fatal10 = new("agg_error_fatal10");
            this.agg_error_fatal10.configure(this, 1, 21, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_fatal9 = new("agg_error_fatal9");
            this.agg_error_fatal9.configure(this, 1, 22, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_fatal8 = new("agg_error_fatal8");
            this.agg_error_fatal8.configure(this, 1, 23, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_fatal7 = new("agg_error_fatal7");
            this.agg_error_fatal7.configure(this, 1, 24, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_fatal6 = new("agg_error_fatal6");
            this.agg_error_fatal6.configure(this, 1, 25, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_fatal5 = new("agg_error_fatal5");
            this.agg_error_fatal5.configure(this, 1, 26, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_fatal4 = new("agg_error_fatal4");
            this.agg_error_fatal4.configure(this, 1, 27, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_fatal3 = new("agg_error_fatal3");
            this.agg_error_fatal3.configure(this, 1, 28, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_fatal2 = new("agg_error_fatal2");
            this.agg_error_fatal2.configure(this, 1, 29, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_fatal1 = new("agg_error_fatal1");
            this.agg_error_fatal1.configure(this, 1, 30, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_fatal0 = new("agg_error_fatal0");
            this.agg_error_fatal0.configure(this, 1, 31, "W1C", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(agg_error_fatal31_bit_cg[bt]) agg_error_fatal31_bit_cg[bt] = new();
                foreach(agg_error_fatal30_bit_cg[bt]) agg_error_fatal30_bit_cg[bt] = new();
                foreach(agg_error_fatal29_bit_cg[bt]) agg_error_fatal29_bit_cg[bt] = new();
                foreach(agg_error_fatal28_bit_cg[bt]) agg_error_fatal28_bit_cg[bt] = new();
                foreach(agg_error_fatal27_bit_cg[bt]) agg_error_fatal27_bit_cg[bt] = new();
                foreach(agg_error_fatal26_bit_cg[bt]) agg_error_fatal26_bit_cg[bt] = new();
                foreach(agg_error_fatal25_bit_cg[bt]) agg_error_fatal25_bit_cg[bt] = new();
                foreach(agg_error_fatal24_bit_cg[bt]) agg_error_fatal24_bit_cg[bt] = new();
                foreach(agg_error_fatal23_bit_cg[bt]) agg_error_fatal23_bit_cg[bt] = new();
                foreach(agg_error_fatal22_bit_cg[bt]) agg_error_fatal22_bit_cg[bt] = new();
                foreach(agg_error_fatal21_bit_cg[bt]) agg_error_fatal21_bit_cg[bt] = new();
                foreach(agg_error_fatal20_bit_cg[bt]) agg_error_fatal20_bit_cg[bt] = new();
                foreach(agg_error_fatal19_bit_cg[bt]) agg_error_fatal19_bit_cg[bt] = new();
                foreach(agg_error_fatal18_bit_cg[bt]) agg_error_fatal18_bit_cg[bt] = new();
                foreach(agg_error_fatal17_bit_cg[bt]) agg_error_fatal17_bit_cg[bt] = new();
                foreach(agg_error_fatal16_bit_cg[bt]) agg_error_fatal16_bit_cg[bt] = new();
                foreach(agg_error_fatal15_bit_cg[bt]) agg_error_fatal15_bit_cg[bt] = new();
                foreach(agg_error_fatal14_bit_cg[bt]) agg_error_fatal14_bit_cg[bt] = new();
                foreach(agg_error_fatal13_bit_cg[bt]) agg_error_fatal13_bit_cg[bt] = new();
                foreach(agg_error_fatal12_bit_cg[bt]) agg_error_fatal12_bit_cg[bt] = new();
                foreach(agg_error_fatal11_bit_cg[bt]) agg_error_fatal11_bit_cg[bt] = new();
                foreach(agg_error_fatal10_bit_cg[bt]) agg_error_fatal10_bit_cg[bt] = new();
                foreach(agg_error_fatal9_bit_cg[bt]) agg_error_fatal9_bit_cg[bt] = new();
                foreach(agg_error_fatal8_bit_cg[bt]) agg_error_fatal8_bit_cg[bt] = new();
                foreach(agg_error_fatal7_bit_cg[bt]) agg_error_fatal7_bit_cg[bt] = new();
                foreach(agg_error_fatal6_bit_cg[bt]) agg_error_fatal6_bit_cg[bt] = new();
                foreach(agg_error_fatal5_bit_cg[bt]) agg_error_fatal5_bit_cg[bt] = new();
                foreach(agg_error_fatal4_bit_cg[bt]) agg_error_fatal4_bit_cg[bt] = new();
                foreach(agg_error_fatal3_bit_cg[bt]) agg_error_fatal3_bit_cg[bt] = new();
                foreach(agg_error_fatal2_bit_cg[bt]) agg_error_fatal2_bit_cg[bt] = new();
                foreach(agg_error_fatal1_bit_cg[bt]) agg_error_fatal1_bit_cg[bt] = new();
                foreach(agg_error_fatal0_bit_cg[bt]) agg_error_fatal0_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__AGG_ERROR_FATAL

    // Reg - mci_reg::HW_ERROR_NON_FATAL
    class mci_reg__HW_ERROR_NON_FATAL extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__HW_ERROR_NON_FATAL_bit_cg RSVD_bit_cg[1];
        mci_reg__HW_ERROR_NON_FATAL_fld_cg fld_cg;
        rand uvm_reg_field RSVD;

        function new(string name = "mci_reg__HW_ERROR_NON_FATAL");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.RSVD = new("RSVD");
            this.RSVD.configure(this, 1, 0, "W1C", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(RSVD_bit_cg[bt]) RSVD_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__HW_ERROR_NON_FATAL

    // Reg - mci_reg::AGG_ERROR_NON_FATAL
    class mci_reg__AGG_ERROR_NON_FATAL extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__AGG_ERROR_NON_FATAL_bit_cg agg_error_non_fatal31_bit_cg[1];
        mci_reg__AGG_ERROR_NON_FATAL_bit_cg agg_error_non_fatal30_bit_cg[1];
        mci_reg__AGG_ERROR_NON_FATAL_bit_cg agg_error_non_fatal29_bit_cg[1];
        mci_reg__AGG_ERROR_NON_FATAL_bit_cg agg_error_non_fatal28_bit_cg[1];
        mci_reg__AGG_ERROR_NON_FATAL_bit_cg agg_error_non_fatal27_bit_cg[1];
        mci_reg__AGG_ERROR_NON_FATAL_bit_cg agg_error_non_fatal26_bit_cg[1];
        mci_reg__AGG_ERROR_NON_FATAL_bit_cg agg_error_non_fatal25_bit_cg[1];
        mci_reg__AGG_ERROR_NON_FATAL_bit_cg agg_error_non_fatal24_bit_cg[1];
        mci_reg__AGG_ERROR_NON_FATAL_bit_cg agg_error_non_fatal23_bit_cg[1];
        mci_reg__AGG_ERROR_NON_FATAL_bit_cg agg_error_non_fatal22_bit_cg[1];
        mci_reg__AGG_ERROR_NON_FATAL_bit_cg agg_error_non_fatal21_bit_cg[1];
        mci_reg__AGG_ERROR_NON_FATAL_bit_cg agg_error_non_fatal20_bit_cg[1];
        mci_reg__AGG_ERROR_NON_FATAL_bit_cg agg_error_non_fatal19_bit_cg[1];
        mci_reg__AGG_ERROR_NON_FATAL_bit_cg agg_error_non_fatal18_bit_cg[1];
        mci_reg__AGG_ERROR_NON_FATAL_bit_cg agg_error_non_fatal17_bit_cg[1];
        mci_reg__AGG_ERROR_NON_FATAL_bit_cg agg_error_non_fatal16_bit_cg[1];
        mci_reg__AGG_ERROR_NON_FATAL_bit_cg agg_error_non_fatal15_bit_cg[1];
        mci_reg__AGG_ERROR_NON_FATAL_bit_cg agg_error_non_fatal14_bit_cg[1];
        mci_reg__AGG_ERROR_NON_FATAL_bit_cg agg_error_non_fatal13_bit_cg[1];
        mci_reg__AGG_ERROR_NON_FATAL_bit_cg agg_error_non_fatal12_bit_cg[1];
        mci_reg__AGG_ERROR_NON_FATAL_bit_cg agg_error_non_fatal11_bit_cg[1];
        mci_reg__AGG_ERROR_NON_FATAL_bit_cg agg_error_non_fatal10_bit_cg[1];
        mci_reg__AGG_ERROR_NON_FATAL_bit_cg agg_error_non_fatal9_bit_cg[1];
        mci_reg__AGG_ERROR_NON_FATAL_bit_cg agg_error_non_fatal8_bit_cg[1];
        mci_reg__AGG_ERROR_NON_FATAL_bit_cg agg_error_non_fatal7_bit_cg[1];
        mci_reg__AGG_ERROR_NON_FATAL_bit_cg agg_error_non_fatal6_bit_cg[1];
        mci_reg__AGG_ERROR_NON_FATAL_bit_cg agg_error_non_fatal5_bit_cg[1];
        mci_reg__AGG_ERROR_NON_FATAL_bit_cg agg_error_non_fatal4_bit_cg[1];
        mci_reg__AGG_ERROR_NON_FATAL_bit_cg agg_error_non_fatal3_bit_cg[1];
        mci_reg__AGG_ERROR_NON_FATAL_bit_cg agg_error_non_fatal2_bit_cg[1];
        mci_reg__AGG_ERROR_NON_FATAL_bit_cg agg_error_non_fatal1_bit_cg[1];
        mci_reg__AGG_ERROR_NON_FATAL_bit_cg agg_error_non_fatal0_bit_cg[1];
        mci_reg__AGG_ERROR_NON_FATAL_fld_cg fld_cg;
        rand uvm_reg_field agg_error_non_fatal31;
        rand uvm_reg_field agg_error_non_fatal30;
        rand uvm_reg_field agg_error_non_fatal29;
        rand uvm_reg_field agg_error_non_fatal28;
        rand uvm_reg_field agg_error_non_fatal27;
        rand uvm_reg_field agg_error_non_fatal26;
        rand uvm_reg_field agg_error_non_fatal25;
        rand uvm_reg_field agg_error_non_fatal24;
        rand uvm_reg_field agg_error_non_fatal23;
        rand uvm_reg_field agg_error_non_fatal22;
        rand uvm_reg_field agg_error_non_fatal21;
        rand uvm_reg_field agg_error_non_fatal20;
        rand uvm_reg_field agg_error_non_fatal19;
        rand uvm_reg_field agg_error_non_fatal18;
        rand uvm_reg_field agg_error_non_fatal17;
        rand uvm_reg_field agg_error_non_fatal16;
        rand uvm_reg_field agg_error_non_fatal15;
        rand uvm_reg_field agg_error_non_fatal14;
        rand uvm_reg_field agg_error_non_fatal13;
        rand uvm_reg_field agg_error_non_fatal12;
        rand uvm_reg_field agg_error_non_fatal11;
        rand uvm_reg_field agg_error_non_fatal10;
        rand uvm_reg_field agg_error_non_fatal9;
        rand uvm_reg_field agg_error_non_fatal8;
        rand uvm_reg_field agg_error_non_fatal7;
        rand uvm_reg_field agg_error_non_fatal6;
        rand uvm_reg_field agg_error_non_fatal5;
        rand uvm_reg_field agg_error_non_fatal4;
        rand uvm_reg_field agg_error_non_fatal3;
        rand uvm_reg_field agg_error_non_fatal2;
        rand uvm_reg_field agg_error_non_fatal1;
        rand uvm_reg_field agg_error_non_fatal0;

        function new(string name = "mci_reg__AGG_ERROR_NON_FATAL");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.agg_error_non_fatal31 = new("agg_error_non_fatal31");
            this.agg_error_non_fatal31.configure(this, 1, 0, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_non_fatal30 = new("agg_error_non_fatal30");
            this.agg_error_non_fatal30.configure(this, 1, 1, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_non_fatal29 = new("agg_error_non_fatal29");
            this.agg_error_non_fatal29.configure(this, 1, 2, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_non_fatal28 = new("agg_error_non_fatal28");
            this.agg_error_non_fatal28.configure(this, 1, 3, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_non_fatal27 = new("agg_error_non_fatal27");
            this.agg_error_non_fatal27.configure(this, 1, 4, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_non_fatal26 = new("agg_error_non_fatal26");
            this.agg_error_non_fatal26.configure(this, 1, 5, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_non_fatal25 = new("agg_error_non_fatal25");
            this.agg_error_non_fatal25.configure(this, 1, 6, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_non_fatal24 = new("agg_error_non_fatal24");
            this.agg_error_non_fatal24.configure(this, 1, 7, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_non_fatal23 = new("agg_error_non_fatal23");
            this.agg_error_non_fatal23.configure(this, 1, 8, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_non_fatal22 = new("agg_error_non_fatal22");
            this.agg_error_non_fatal22.configure(this, 1, 9, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_non_fatal21 = new("agg_error_non_fatal21");
            this.agg_error_non_fatal21.configure(this, 1, 10, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_non_fatal20 = new("agg_error_non_fatal20");
            this.agg_error_non_fatal20.configure(this, 1, 11, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_non_fatal19 = new("agg_error_non_fatal19");
            this.agg_error_non_fatal19.configure(this, 1, 12, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_non_fatal18 = new("agg_error_non_fatal18");
            this.agg_error_non_fatal18.configure(this, 1, 13, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_non_fatal17 = new("agg_error_non_fatal17");
            this.agg_error_non_fatal17.configure(this, 1, 14, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_non_fatal16 = new("agg_error_non_fatal16");
            this.agg_error_non_fatal16.configure(this, 1, 15, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_non_fatal15 = new("agg_error_non_fatal15");
            this.agg_error_non_fatal15.configure(this, 1, 16, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_non_fatal14 = new("agg_error_non_fatal14");
            this.agg_error_non_fatal14.configure(this, 1, 17, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_non_fatal13 = new("agg_error_non_fatal13");
            this.agg_error_non_fatal13.configure(this, 1, 18, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_non_fatal12 = new("agg_error_non_fatal12");
            this.agg_error_non_fatal12.configure(this, 1, 19, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_non_fatal11 = new("agg_error_non_fatal11");
            this.agg_error_non_fatal11.configure(this, 1, 20, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_non_fatal10 = new("agg_error_non_fatal10");
            this.agg_error_non_fatal10.configure(this, 1, 21, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_non_fatal9 = new("agg_error_non_fatal9");
            this.agg_error_non_fatal9.configure(this, 1, 22, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_non_fatal8 = new("agg_error_non_fatal8");
            this.agg_error_non_fatal8.configure(this, 1, 23, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_non_fatal7 = new("agg_error_non_fatal7");
            this.agg_error_non_fatal7.configure(this, 1, 24, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_non_fatal6 = new("agg_error_non_fatal6");
            this.agg_error_non_fatal6.configure(this, 1, 25, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_non_fatal5 = new("agg_error_non_fatal5");
            this.agg_error_non_fatal5.configure(this, 1, 26, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_non_fatal4 = new("agg_error_non_fatal4");
            this.agg_error_non_fatal4.configure(this, 1, 27, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_non_fatal3 = new("agg_error_non_fatal3");
            this.agg_error_non_fatal3.configure(this, 1, 28, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_non_fatal2 = new("agg_error_non_fatal2");
            this.agg_error_non_fatal2.configure(this, 1, 29, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_non_fatal1 = new("agg_error_non_fatal1");
            this.agg_error_non_fatal1.configure(this, 1, 30, "W1C", 1, 'h0, 1, 1, 0);
            this.agg_error_non_fatal0 = new("agg_error_non_fatal0");
            this.agg_error_non_fatal0.configure(this, 1, 31, "W1C", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(agg_error_non_fatal31_bit_cg[bt]) agg_error_non_fatal31_bit_cg[bt] = new();
                foreach(agg_error_non_fatal30_bit_cg[bt]) agg_error_non_fatal30_bit_cg[bt] = new();
                foreach(agg_error_non_fatal29_bit_cg[bt]) agg_error_non_fatal29_bit_cg[bt] = new();
                foreach(agg_error_non_fatal28_bit_cg[bt]) agg_error_non_fatal28_bit_cg[bt] = new();
                foreach(agg_error_non_fatal27_bit_cg[bt]) agg_error_non_fatal27_bit_cg[bt] = new();
                foreach(agg_error_non_fatal26_bit_cg[bt]) agg_error_non_fatal26_bit_cg[bt] = new();
                foreach(agg_error_non_fatal25_bit_cg[bt]) agg_error_non_fatal25_bit_cg[bt] = new();
                foreach(agg_error_non_fatal24_bit_cg[bt]) agg_error_non_fatal24_bit_cg[bt] = new();
                foreach(agg_error_non_fatal23_bit_cg[bt]) agg_error_non_fatal23_bit_cg[bt] = new();
                foreach(agg_error_non_fatal22_bit_cg[bt]) agg_error_non_fatal22_bit_cg[bt] = new();
                foreach(agg_error_non_fatal21_bit_cg[bt]) agg_error_non_fatal21_bit_cg[bt] = new();
                foreach(agg_error_non_fatal20_bit_cg[bt]) agg_error_non_fatal20_bit_cg[bt] = new();
                foreach(agg_error_non_fatal19_bit_cg[bt]) agg_error_non_fatal19_bit_cg[bt] = new();
                foreach(agg_error_non_fatal18_bit_cg[bt]) agg_error_non_fatal18_bit_cg[bt] = new();
                foreach(agg_error_non_fatal17_bit_cg[bt]) agg_error_non_fatal17_bit_cg[bt] = new();
                foreach(agg_error_non_fatal16_bit_cg[bt]) agg_error_non_fatal16_bit_cg[bt] = new();
                foreach(agg_error_non_fatal15_bit_cg[bt]) agg_error_non_fatal15_bit_cg[bt] = new();
                foreach(agg_error_non_fatal14_bit_cg[bt]) agg_error_non_fatal14_bit_cg[bt] = new();
                foreach(agg_error_non_fatal13_bit_cg[bt]) agg_error_non_fatal13_bit_cg[bt] = new();
                foreach(agg_error_non_fatal12_bit_cg[bt]) agg_error_non_fatal12_bit_cg[bt] = new();
                foreach(agg_error_non_fatal11_bit_cg[bt]) agg_error_non_fatal11_bit_cg[bt] = new();
                foreach(agg_error_non_fatal10_bit_cg[bt]) agg_error_non_fatal10_bit_cg[bt] = new();
                foreach(agg_error_non_fatal9_bit_cg[bt]) agg_error_non_fatal9_bit_cg[bt] = new();
                foreach(agg_error_non_fatal8_bit_cg[bt]) agg_error_non_fatal8_bit_cg[bt] = new();
                foreach(agg_error_non_fatal7_bit_cg[bt]) agg_error_non_fatal7_bit_cg[bt] = new();
                foreach(agg_error_non_fatal6_bit_cg[bt]) agg_error_non_fatal6_bit_cg[bt] = new();
                foreach(agg_error_non_fatal5_bit_cg[bt]) agg_error_non_fatal5_bit_cg[bt] = new();
                foreach(agg_error_non_fatal4_bit_cg[bt]) agg_error_non_fatal4_bit_cg[bt] = new();
                foreach(agg_error_non_fatal3_bit_cg[bt]) agg_error_non_fatal3_bit_cg[bt] = new();
                foreach(agg_error_non_fatal2_bit_cg[bt]) agg_error_non_fatal2_bit_cg[bt] = new();
                foreach(agg_error_non_fatal1_bit_cg[bt]) agg_error_non_fatal1_bit_cg[bt] = new();
                foreach(agg_error_non_fatal0_bit_cg[bt]) agg_error_non_fatal0_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__AGG_ERROR_NON_FATAL

    // Reg - mci_reg::FW_ERROR_FATAL
    class mci_reg__FW_ERROR_FATAL extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__FW_ERROR_FATAL_bit_cg error_code_bit_cg[32];
        mci_reg__FW_ERROR_FATAL_fld_cg fld_cg;
        rand uvm_reg_field error_code;

        function new(string name = "mci_reg__FW_ERROR_FATAL");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.error_code = new("error_code");
            this.error_code.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(error_code_bit_cg[bt]) error_code_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__FW_ERROR_FATAL

    // Reg - mci_reg::FW_ERROR_NON_FATAL
    class mci_reg__FW_ERROR_NON_FATAL extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__FW_ERROR_NON_FATAL_bit_cg error_code_bit_cg[32];
        mci_reg__FW_ERROR_NON_FATAL_fld_cg fld_cg;
        rand uvm_reg_field error_code;

        function new(string name = "mci_reg__FW_ERROR_NON_FATAL");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.error_code = new("error_code");
            this.error_code.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(error_code_bit_cg[bt]) error_code_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__FW_ERROR_NON_FATAL

    // Reg - mci_reg::HW_ERROR_ENC
    class mci_reg__HW_ERROR_ENC extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__HW_ERROR_ENC_bit_cg error_code_bit_cg[32];
        mci_reg__HW_ERROR_ENC_fld_cg fld_cg;
        rand uvm_reg_field error_code;

        function new(string name = "mci_reg__HW_ERROR_ENC");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.error_code = new("error_code");
            this.error_code.configure(this, 32, 0, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(error_code_bit_cg[bt]) error_code_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__HW_ERROR_ENC

    // Reg - mci_reg::FW_ERROR_ENC
    class mci_reg__FW_ERROR_ENC extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__FW_ERROR_ENC_bit_cg error_code_bit_cg[32];
        mci_reg__FW_ERROR_ENC_fld_cg fld_cg;
        rand uvm_reg_field error_code;

        function new(string name = "mci_reg__FW_ERROR_ENC");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.error_code = new("error_code");
            this.error_code.configure(this, 32, 0, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(error_code_bit_cg[bt]) error_code_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__FW_ERROR_ENC

    // Reg - mci_reg::FW_EXTENDED_ERROR_INFO
    class mci_reg__FW_EXTENDED_ERROR_INFO extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__FW_EXTENDED_ERROR_INFO_bit_cg error_info_bit_cg[32];
        mci_reg__FW_EXTENDED_ERROR_INFO_fld_cg fld_cg;
        rand uvm_reg_field error_info;

        function new(string name = "mci_reg__FW_EXTENDED_ERROR_INFO");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.error_info = new("error_info");
            this.error_info.configure(this, 32, 0, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(error_info_bit_cg[bt]) error_info_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__FW_EXTENDED_ERROR_INFO

    // Reg - mci_reg::internal_hw_error_fatal_mask
    class mci_reg__internal_hw_error_fatal_mask extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__internal_hw_error_fatal_mask_bit_cg mask_mcu_sram_ecc_unc_bit_cg[1];
        mci_reg__internal_hw_error_fatal_mask_bit_cg mask_nmi_pin_bit_cg[1];
        mci_reg__internal_hw_error_fatal_mask_fld_cg fld_cg;
        rand uvm_reg_field mask_mcu_sram_ecc_unc;
        rand uvm_reg_field mask_nmi_pin;

        function new(string name = "mci_reg__internal_hw_error_fatal_mask");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.mask_mcu_sram_ecc_unc = new("mask_mcu_sram_ecc_unc");
            this.mask_mcu_sram_ecc_unc.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
            this.mask_nmi_pin = new("mask_nmi_pin");
            this.mask_nmi_pin.configure(this, 1, 1, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(mask_mcu_sram_ecc_unc_bit_cg[bt]) mask_mcu_sram_ecc_unc_bit_cg[bt] = new();
                foreach(mask_nmi_pin_bit_cg[bt]) mask_nmi_pin_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__internal_hw_error_fatal_mask

    // Reg - mci_reg::internal_hw_error_non_fatal_mask
    class mci_reg__internal_hw_error_non_fatal_mask extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__internal_hw_error_non_fatal_mask_bit_cg FIXME_bit_cg[1];
        mci_reg__internal_hw_error_non_fatal_mask_fld_cg fld_cg;
        rand uvm_reg_field FIXME;

        function new(string name = "mci_reg__internal_hw_error_non_fatal_mask");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.FIXME = new("FIXME");
            this.FIXME.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(FIXME_bit_cg[bt]) FIXME_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__internal_hw_error_non_fatal_mask

    // Reg - mci_reg::internal_agg_error_fatal_mask
    class mci_reg__internal_agg_error_fatal_mask extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__internal_agg_error_fatal_mask_bit_cg mask_agg_error_fatal31_bit_cg[1];
        mci_reg__internal_agg_error_fatal_mask_bit_cg mask_agg_error_fatal30_bit_cg[1];
        mci_reg__internal_agg_error_fatal_mask_bit_cg mask_agg_error_fatal29_bit_cg[1];
        mci_reg__internal_agg_error_fatal_mask_bit_cg mask_agg_error_fatal28_bit_cg[1];
        mci_reg__internal_agg_error_fatal_mask_bit_cg mask_agg_error_fatal27_bit_cg[1];
        mci_reg__internal_agg_error_fatal_mask_bit_cg mask_agg_error_fatal26_bit_cg[1];
        mci_reg__internal_agg_error_fatal_mask_bit_cg mask_agg_error_fatal25_bit_cg[1];
        mci_reg__internal_agg_error_fatal_mask_bit_cg mask_agg_error_fatal24_bit_cg[1];
        mci_reg__internal_agg_error_fatal_mask_bit_cg mask_agg_error_fatal23_bit_cg[1];
        mci_reg__internal_agg_error_fatal_mask_bit_cg mask_agg_error_fatal22_bit_cg[1];
        mci_reg__internal_agg_error_fatal_mask_bit_cg mask_agg_error_fatal21_bit_cg[1];
        mci_reg__internal_agg_error_fatal_mask_bit_cg mask_agg_error_fatal20_bit_cg[1];
        mci_reg__internal_agg_error_fatal_mask_bit_cg mask_agg_error_fatal19_bit_cg[1];
        mci_reg__internal_agg_error_fatal_mask_bit_cg mask_agg_error_fatal18_bit_cg[1];
        mci_reg__internal_agg_error_fatal_mask_bit_cg mask_agg_error_fatal17_bit_cg[1];
        mci_reg__internal_agg_error_fatal_mask_bit_cg mask_agg_error_fatal16_bit_cg[1];
        mci_reg__internal_agg_error_fatal_mask_bit_cg mask_agg_error_fatal15_bit_cg[1];
        mci_reg__internal_agg_error_fatal_mask_bit_cg mask_agg_error_fatal14_bit_cg[1];
        mci_reg__internal_agg_error_fatal_mask_bit_cg mask_agg_error_fatal13_bit_cg[1];
        mci_reg__internal_agg_error_fatal_mask_bit_cg mask_agg_error_fatal12_bit_cg[1];
        mci_reg__internal_agg_error_fatal_mask_bit_cg mask_agg_error_fatal11_bit_cg[1];
        mci_reg__internal_agg_error_fatal_mask_bit_cg mask_agg_error_fatal10_bit_cg[1];
        mci_reg__internal_agg_error_fatal_mask_bit_cg mask_agg_error_fatal9_bit_cg[1];
        mci_reg__internal_agg_error_fatal_mask_bit_cg mask_agg_error_fatal8_bit_cg[1];
        mci_reg__internal_agg_error_fatal_mask_bit_cg mask_agg_error_fatal7_bit_cg[1];
        mci_reg__internal_agg_error_fatal_mask_bit_cg mask_agg_error_fatal6_bit_cg[1];
        mci_reg__internal_agg_error_fatal_mask_bit_cg mask_agg_error_fatal5_bit_cg[1];
        mci_reg__internal_agg_error_fatal_mask_bit_cg mask_agg_error_fatal4_bit_cg[1];
        mci_reg__internal_agg_error_fatal_mask_bit_cg mask_agg_error_fatal3_bit_cg[1];
        mci_reg__internal_agg_error_fatal_mask_bit_cg mask_agg_error_fatal2_bit_cg[1];
        mci_reg__internal_agg_error_fatal_mask_bit_cg mask_agg_error_fatal1_bit_cg[1];
        mci_reg__internal_agg_error_fatal_mask_bit_cg mask_agg_error_fatal0_bit_cg[1];
        mci_reg__internal_agg_error_fatal_mask_fld_cg fld_cg;
        rand uvm_reg_field mask_agg_error_fatal31;
        rand uvm_reg_field mask_agg_error_fatal30;
        rand uvm_reg_field mask_agg_error_fatal29;
        rand uvm_reg_field mask_agg_error_fatal28;
        rand uvm_reg_field mask_agg_error_fatal27;
        rand uvm_reg_field mask_agg_error_fatal26;
        rand uvm_reg_field mask_agg_error_fatal25;
        rand uvm_reg_field mask_agg_error_fatal24;
        rand uvm_reg_field mask_agg_error_fatal23;
        rand uvm_reg_field mask_agg_error_fatal22;
        rand uvm_reg_field mask_agg_error_fatal21;
        rand uvm_reg_field mask_agg_error_fatal20;
        rand uvm_reg_field mask_agg_error_fatal19;
        rand uvm_reg_field mask_agg_error_fatal18;
        rand uvm_reg_field mask_agg_error_fatal17;
        rand uvm_reg_field mask_agg_error_fatal16;
        rand uvm_reg_field mask_agg_error_fatal15;
        rand uvm_reg_field mask_agg_error_fatal14;
        rand uvm_reg_field mask_agg_error_fatal13;
        rand uvm_reg_field mask_agg_error_fatal12;
        rand uvm_reg_field mask_agg_error_fatal11;
        rand uvm_reg_field mask_agg_error_fatal10;
        rand uvm_reg_field mask_agg_error_fatal9;
        rand uvm_reg_field mask_agg_error_fatal8;
        rand uvm_reg_field mask_agg_error_fatal7;
        rand uvm_reg_field mask_agg_error_fatal6;
        rand uvm_reg_field mask_agg_error_fatal5;
        rand uvm_reg_field mask_agg_error_fatal4;
        rand uvm_reg_field mask_agg_error_fatal3;
        rand uvm_reg_field mask_agg_error_fatal2;
        rand uvm_reg_field mask_agg_error_fatal1;
        rand uvm_reg_field mask_agg_error_fatal0;

        function new(string name = "mci_reg__internal_agg_error_fatal_mask");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.mask_agg_error_fatal31 = new("mask_agg_error_fatal31");
            this.mask_agg_error_fatal31.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_fatal30 = new("mask_agg_error_fatal30");
            this.mask_agg_error_fatal30.configure(this, 1, 1, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_fatal29 = new("mask_agg_error_fatal29");
            this.mask_agg_error_fatal29.configure(this, 1, 2, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_fatal28 = new("mask_agg_error_fatal28");
            this.mask_agg_error_fatal28.configure(this, 1, 3, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_fatal27 = new("mask_agg_error_fatal27");
            this.mask_agg_error_fatal27.configure(this, 1, 4, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_fatal26 = new("mask_agg_error_fatal26");
            this.mask_agg_error_fatal26.configure(this, 1, 5, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_fatal25 = new("mask_agg_error_fatal25");
            this.mask_agg_error_fatal25.configure(this, 1, 6, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_fatal24 = new("mask_agg_error_fatal24");
            this.mask_agg_error_fatal24.configure(this, 1, 7, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_fatal23 = new("mask_agg_error_fatal23");
            this.mask_agg_error_fatal23.configure(this, 1, 8, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_fatal22 = new("mask_agg_error_fatal22");
            this.mask_agg_error_fatal22.configure(this, 1, 9, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_fatal21 = new("mask_agg_error_fatal21");
            this.mask_agg_error_fatal21.configure(this, 1, 10, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_fatal20 = new("mask_agg_error_fatal20");
            this.mask_agg_error_fatal20.configure(this, 1, 11, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_fatal19 = new("mask_agg_error_fatal19");
            this.mask_agg_error_fatal19.configure(this, 1, 12, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_fatal18 = new("mask_agg_error_fatal18");
            this.mask_agg_error_fatal18.configure(this, 1, 13, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_fatal17 = new("mask_agg_error_fatal17");
            this.mask_agg_error_fatal17.configure(this, 1, 14, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_fatal16 = new("mask_agg_error_fatal16");
            this.mask_agg_error_fatal16.configure(this, 1, 15, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_fatal15 = new("mask_agg_error_fatal15");
            this.mask_agg_error_fatal15.configure(this, 1, 16, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_fatal14 = new("mask_agg_error_fatal14");
            this.mask_agg_error_fatal14.configure(this, 1, 17, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_fatal13 = new("mask_agg_error_fatal13");
            this.mask_agg_error_fatal13.configure(this, 1, 18, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_fatal12 = new("mask_agg_error_fatal12");
            this.mask_agg_error_fatal12.configure(this, 1, 19, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_fatal11 = new("mask_agg_error_fatal11");
            this.mask_agg_error_fatal11.configure(this, 1, 20, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_fatal10 = new("mask_agg_error_fatal10");
            this.mask_agg_error_fatal10.configure(this, 1, 21, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_fatal9 = new("mask_agg_error_fatal9");
            this.mask_agg_error_fatal9.configure(this, 1, 22, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_fatal8 = new("mask_agg_error_fatal8");
            this.mask_agg_error_fatal8.configure(this, 1, 23, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_fatal7 = new("mask_agg_error_fatal7");
            this.mask_agg_error_fatal7.configure(this, 1, 24, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_fatal6 = new("mask_agg_error_fatal6");
            this.mask_agg_error_fatal6.configure(this, 1, 25, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_fatal5 = new("mask_agg_error_fatal5");
            this.mask_agg_error_fatal5.configure(this, 1, 26, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_fatal4 = new("mask_agg_error_fatal4");
            this.mask_agg_error_fatal4.configure(this, 1, 27, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_fatal3 = new("mask_agg_error_fatal3");
            this.mask_agg_error_fatal3.configure(this, 1, 28, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_fatal2 = new("mask_agg_error_fatal2");
            this.mask_agg_error_fatal2.configure(this, 1, 29, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_fatal1 = new("mask_agg_error_fatal1");
            this.mask_agg_error_fatal1.configure(this, 1, 30, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_fatal0 = new("mask_agg_error_fatal0");
            this.mask_agg_error_fatal0.configure(this, 1, 31, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(mask_agg_error_fatal31_bit_cg[bt]) mask_agg_error_fatal31_bit_cg[bt] = new();
                foreach(mask_agg_error_fatal30_bit_cg[bt]) mask_agg_error_fatal30_bit_cg[bt] = new();
                foreach(mask_agg_error_fatal29_bit_cg[bt]) mask_agg_error_fatal29_bit_cg[bt] = new();
                foreach(mask_agg_error_fatal28_bit_cg[bt]) mask_agg_error_fatal28_bit_cg[bt] = new();
                foreach(mask_agg_error_fatal27_bit_cg[bt]) mask_agg_error_fatal27_bit_cg[bt] = new();
                foreach(mask_agg_error_fatal26_bit_cg[bt]) mask_agg_error_fatal26_bit_cg[bt] = new();
                foreach(mask_agg_error_fatal25_bit_cg[bt]) mask_agg_error_fatal25_bit_cg[bt] = new();
                foreach(mask_agg_error_fatal24_bit_cg[bt]) mask_agg_error_fatal24_bit_cg[bt] = new();
                foreach(mask_agg_error_fatal23_bit_cg[bt]) mask_agg_error_fatal23_bit_cg[bt] = new();
                foreach(mask_agg_error_fatal22_bit_cg[bt]) mask_agg_error_fatal22_bit_cg[bt] = new();
                foreach(mask_agg_error_fatal21_bit_cg[bt]) mask_agg_error_fatal21_bit_cg[bt] = new();
                foreach(mask_agg_error_fatal20_bit_cg[bt]) mask_agg_error_fatal20_bit_cg[bt] = new();
                foreach(mask_agg_error_fatal19_bit_cg[bt]) mask_agg_error_fatal19_bit_cg[bt] = new();
                foreach(mask_agg_error_fatal18_bit_cg[bt]) mask_agg_error_fatal18_bit_cg[bt] = new();
                foreach(mask_agg_error_fatal17_bit_cg[bt]) mask_agg_error_fatal17_bit_cg[bt] = new();
                foreach(mask_agg_error_fatal16_bit_cg[bt]) mask_agg_error_fatal16_bit_cg[bt] = new();
                foreach(mask_agg_error_fatal15_bit_cg[bt]) mask_agg_error_fatal15_bit_cg[bt] = new();
                foreach(mask_agg_error_fatal14_bit_cg[bt]) mask_agg_error_fatal14_bit_cg[bt] = new();
                foreach(mask_agg_error_fatal13_bit_cg[bt]) mask_agg_error_fatal13_bit_cg[bt] = new();
                foreach(mask_agg_error_fatal12_bit_cg[bt]) mask_agg_error_fatal12_bit_cg[bt] = new();
                foreach(mask_agg_error_fatal11_bit_cg[bt]) mask_agg_error_fatal11_bit_cg[bt] = new();
                foreach(mask_agg_error_fatal10_bit_cg[bt]) mask_agg_error_fatal10_bit_cg[bt] = new();
                foreach(mask_agg_error_fatal9_bit_cg[bt]) mask_agg_error_fatal9_bit_cg[bt] = new();
                foreach(mask_agg_error_fatal8_bit_cg[bt]) mask_agg_error_fatal8_bit_cg[bt] = new();
                foreach(mask_agg_error_fatal7_bit_cg[bt]) mask_agg_error_fatal7_bit_cg[bt] = new();
                foreach(mask_agg_error_fatal6_bit_cg[bt]) mask_agg_error_fatal6_bit_cg[bt] = new();
                foreach(mask_agg_error_fatal5_bit_cg[bt]) mask_agg_error_fatal5_bit_cg[bt] = new();
                foreach(mask_agg_error_fatal4_bit_cg[bt]) mask_agg_error_fatal4_bit_cg[bt] = new();
                foreach(mask_agg_error_fatal3_bit_cg[bt]) mask_agg_error_fatal3_bit_cg[bt] = new();
                foreach(mask_agg_error_fatal2_bit_cg[bt]) mask_agg_error_fatal2_bit_cg[bt] = new();
                foreach(mask_agg_error_fatal1_bit_cg[bt]) mask_agg_error_fatal1_bit_cg[bt] = new();
                foreach(mask_agg_error_fatal0_bit_cg[bt]) mask_agg_error_fatal0_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__internal_agg_error_fatal_mask

    // Reg - mci_reg::internal_agg_error_non_fatal_mask
    class mci_reg__internal_agg_error_non_fatal_mask extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__internal_agg_error_non_fatal_mask_bit_cg mask_agg_error_non_fatal31_bit_cg[1];
        mci_reg__internal_agg_error_non_fatal_mask_bit_cg mask_agg_error_non_fatal30_bit_cg[1];
        mci_reg__internal_agg_error_non_fatal_mask_bit_cg mask_agg_error_non_fatal29_bit_cg[1];
        mci_reg__internal_agg_error_non_fatal_mask_bit_cg mask_agg_error_non_fatal28_bit_cg[1];
        mci_reg__internal_agg_error_non_fatal_mask_bit_cg mask_agg_error_non_fatal27_bit_cg[1];
        mci_reg__internal_agg_error_non_fatal_mask_bit_cg mask_agg_error_non_fatal26_bit_cg[1];
        mci_reg__internal_agg_error_non_fatal_mask_bit_cg mask_agg_error_non_fatal25_bit_cg[1];
        mci_reg__internal_agg_error_non_fatal_mask_bit_cg mask_agg_error_non_fatal24_bit_cg[1];
        mci_reg__internal_agg_error_non_fatal_mask_bit_cg mask_agg_error_non_fatal23_bit_cg[1];
        mci_reg__internal_agg_error_non_fatal_mask_bit_cg mask_agg_error_non_fatal22_bit_cg[1];
        mci_reg__internal_agg_error_non_fatal_mask_bit_cg mask_agg_error_non_fatal21_bit_cg[1];
        mci_reg__internal_agg_error_non_fatal_mask_bit_cg mask_agg_error_non_fatal20_bit_cg[1];
        mci_reg__internal_agg_error_non_fatal_mask_bit_cg mask_agg_error_non_fatal19_bit_cg[1];
        mci_reg__internal_agg_error_non_fatal_mask_bit_cg mask_agg_error_non_fatal18_bit_cg[1];
        mci_reg__internal_agg_error_non_fatal_mask_bit_cg mask_agg_error_non_fatal17_bit_cg[1];
        mci_reg__internal_agg_error_non_fatal_mask_bit_cg mask_agg_error_non_fatal16_bit_cg[1];
        mci_reg__internal_agg_error_non_fatal_mask_bit_cg mask_agg_error_non_fatal15_bit_cg[1];
        mci_reg__internal_agg_error_non_fatal_mask_bit_cg mask_agg_error_non_fatal14_bit_cg[1];
        mci_reg__internal_agg_error_non_fatal_mask_bit_cg mask_agg_error_non_fatal13_bit_cg[1];
        mci_reg__internal_agg_error_non_fatal_mask_bit_cg mask_agg_error_non_fatal12_bit_cg[1];
        mci_reg__internal_agg_error_non_fatal_mask_bit_cg mask_agg_error_non_fatal11_bit_cg[1];
        mci_reg__internal_agg_error_non_fatal_mask_bit_cg mask_agg_error_non_fatal10_bit_cg[1];
        mci_reg__internal_agg_error_non_fatal_mask_bit_cg mask_agg_error_non_fatal9_bit_cg[1];
        mci_reg__internal_agg_error_non_fatal_mask_bit_cg mask_agg_error_non_fatal8_bit_cg[1];
        mci_reg__internal_agg_error_non_fatal_mask_bit_cg mask_agg_error_non_fatal7_bit_cg[1];
        mci_reg__internal_agg_error_non_fatal_mask_bit_cg mask_agg_error_non_fatal6_bit_cg[1];
        mci_reg__internal_agg_error_non_fatal_mask_bit_cg mask_agg_error_non_fatal5_bit_cg[1];
        mci_reg__internal_agg_error_non_fatal_mask_bit_cg mask_agg_error_non_fatal4_bit_cg[1];
        mci_reg__internal_agg_error_non_fatal_mask_bit_cg mask_agg_error_non_fatal3_bit_cg[1];
        mci_reg__internal_agg_error_non_fatal_mask_bit_cg mask_agg_error_non_fatal2_bit_cg[1];
        mci_reg__internal_agg_error_non_fatal_mask_bit_cg mask_agg_error_non_fatal1_bit_cg[1];
        mci_reg__internal_agg_error_non_fatal_mask_bit_cg mask_agg_error_non_fatal0_bit_cg[1];
        mci_reg__internal_agg_error_non_fatal_mask_fld_cg fld_cg;
        rand uvm_reg_field mask_agg_error_non_fatal31;
        rand uvm_reg_field mask_agg_error_non_fatal30;
        rand uvm_reg_field mask_agg_error_non_fatal29;
        rand uvm_reg_field mask_agg_error_non_fatal28;
        rand uvm_reg_field mask_agg_error_non_fatal27;
        rand uvm_reg_field mask_agg_error_non_fatal26;
        rand uvm_reg_field mask_agg_error_non_fatal25;
        rand uvm_reg_field mask_agg_error_non_fatal24;
        rand uvm_reg_field mask_agg_error_non_fatal23;
        rand uvm_reg_field mask_agg_error_non_fatal22;
        rand uvm_reg_field mask_agg_error_non_fatal21;
        rand uvm_reg_field mask_agg_error_non_fatal20;
        rand uvm_reg_field mask_agg_error_non_fatal19;
        rand uvm_reg_field mask_agg_error_non_fatal18;
        rand uvm_reg_field mask_agg_error_non_fatal17;
        rand uvm_reg_field mask_agg_error_non_fatal16;
        rand uvm_reg_field mask_agg_error_non_fatal15;
        rand uvm_reg_field mask_agg_error_non_fatal14;
        rand uvm_reg_field mask_agg_error_non_fatal13;
        rand uvm_reg_field mask_agg_error_non_fatal12;
        rand uvm_reg_field mask_agg_error_non_fatal11;
        rand uvm_reg_field mask_agg_error_non_fatal10;
        rand uvm_reg_field mask_agg_error_non_fatal9;
        rand uvm_reg_field mask_agg_error_non_fatal8;
        rand uvm_reg_field mask_agg_error_non_fatal7;
        rand uvm_reg_field mask_agg_error_non_fatal6;
        rand uvm_reg_field mask_agg_error_non_fatal5;
        rand uvm_reg_field mask_agg_error_non_fatal4;
        rand uvm_reg_field mask_agg_error_non_fatal3;
        rand uvm_reg_field mask_agg_error_non_fatal2;
        rand uvm_reg_field mask_agg_error_non_fatal1;
        rand uvm_reg_field mask_agg_error_non_fatal0;

        function new(string name = "mci_reg__internal_agg_error_non_fatal_mask");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.mask_agg_error_non_fatal31 = new("mask_agg_error_non_fatal31");
            this.mask_agg_error_non_fatal31.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_non_fatal30 = new("mask_agg_error_non_fatal30");
            this.mask_agg_error_non_fatal30.configure(this, 1, 1, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_non_fatal29 = new("mask_agg_error_non_fatal29");
            this.mask_agg_error_non_fatal29.configure(this, 1, 2, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_non_fatal28 = new("mask_agg_error_non_fatal28");
            this.mask_agg_error_non_fatal28.configure(this, 1, 3, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_non_fatal27 = new("mask_agg_error_non_fatal27");
            this.mask_agg_error_non_fatal27.configure(this, 1, 4, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_non_fatal26 = new("mask_agg_error_non_fatal26");
            this.mask_agg_error_non_fatal26.configure(this, 1, 5, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_non_fatal25 = new("mask_agg_error_non_fatal25");
            this.mask_agg_error_non_fatal25.configure(this, 1, 6, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_non_fatal24 = new("mask_agg_error_non_fatal24");
            this.mask_agg_error_non_fatal24.configure(this, 1, 7, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_non_fatal23 = new("mask_agg_error_non_fatal23");
            this.mask_agg_error_non_fatal23.configure(this, 1, 8, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_non_fatal22 = new("mask_agg_error_non_fatal22");
            this.mask_agg_error_non_fatal22.configure(this, 1, 9, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_non_fatal21 = new("mask_agg_error_non_fatal21");
            this.mask_agg_error_non_fatal21.configure(this, 1, 10, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_non_fatal20 = new("mask_agg_error_non_fatal20");
            this.mask_agg_error_non_fatal20.configure(this, 1, 11, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_non_fatal19 = new("mask_agg_error_non_fatal19");
            this.mask_agg_error_non_fatal19.configure(this, 1, 12, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_non_fatal18 = new("mask_agg_error_non_fatal18");
            this.mask_agg_error_non_fatal18.configure(this, 1, 13, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_non_fatal17 = new("mask_agg_error_non_fatal17");
            this.mask_agg_error_non_fatal17.configure(this, 1, 14, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_non_fatal16 = new("mask_agg_error_non_fatal16");
            this.mask_agg_error_non_fatal16.configure(this, 1, 15, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_non_fatal15 = new("mask_agg_error_non_fatal15");
            this.mask_agg_error_non_fatal15.configure(this, 1, 16, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_non_fatal14 = new("mask_agg_error_non_fatal14");
            this.mask_agg_error_non_fatal14.configure(this, 1, 17, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_non_fatal13 = new("mask_agg_error_non_fatal13");
            this.mask_agg_error_non_fatal13.configure(this, 1, 18, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_non_fatal12 = new("mask_agg_error_non_fatal12");
            this.mask_agg_error_non_fatal12.configure(this, 1, 19, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_non_fatal11 = new("mask_agg_error_non_fatal11");
            this.mask_agg_error_non_fatal11.configure(this, 1, 20, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_non_fatal10 = new("mask_agg_error_non_fatal10");
            this.mask_agg_error_non_fatal10.configure(this, 1, 21, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_non_fatal9 = new("mask_agg_error_non_fatal9");
            this.mask_agg_error_non_fatal9.configure(this, 1, 22, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_non_fatal8 = new("mask_agg_error_non_fatal8");
            this.mask_agg_error_non_fatal8.configure(this, 1, 23, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_non_fatal7 = new("mask_agg_error_non_fatal7");
            this.mask_agg_error_non_fatal7.configure(this, 1, 24, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_non_fatal6 = new("mask_agg_error_non_fatal6");
            this.mask_agg_error_non_fatal6.configure(this, 1, 25, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_non_fatal5 = new("mask_agg_error_non_fatal5");
            this.mask_agg_error_non_fatal5.configure(this, 1, 26, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_non_fatal4 = new("mask_agg_error_non_fatal4");
            this.mask_agg_error_non_fatal4.configure(this, 1, 27, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_non_fatal3 = new("mask_agg_error_non_fatal3");
            this.mask_agg_error_non_fatal3.configure(this, 1, 28, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_non_fatal2 = new("mask_agg_error_non_fatal2");
            this.mask_agg_error_non_fatal2.configure(this, 1, 29, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_non_fatal1 = new("mask_agg_error_non_fatal1");
            this.mask_agg_error_non_fatal1.configure(this, 1, 30, "RW", 0, 'h0, 1, 1, 0);
            this.mask_agg_error_non_fatal0 = new("mask_agg_error_non_fatal0");
            this.mask_agg_error_non_fatal0.configure(this, 1, 31, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(mask_agg_error_non_fatal31_bit_cg[bt]) mask_agg_error_non_fatal31_bit_cg[bt] = new();
                foreach(mask_agg_error_non_fatal30_bit_cg[bt]) mask_agg_error_non_fatal30_bit_cg[bt] = new();
                foreach(mask_agg_error_non_fatal29_bit_cg[bt]) mask_agg_error_non_fatal29_bit_cg[bt] = new();
                foreach(mask_agg_error_non_fatal28_bit_cg[bt]) mask_agg_error_non_fatal28_bit_cg[bt] = new();
                foreach(mask_agg_error_non_fatal27_bit_cg[bt]) mask_agg_error_non_fatal27_bit_cg[bt] = new();
                foreach(mask_agg_error_non_fatal26_bit_cg[bt]) mask_agg_error_non_fatal26_bit_cg[bt] = new();
                foreach(mask_agg_error_non_fatal25_bit_cg[bt]) mask_agg_error_non_fatal25_bit_cg[bt] = new();
                foreach(mask_agg_error_non_fatal24_bit_cg[bt]) mask_agg_error_non_fatal24_bit_cg[bt] = new();
                foreach(mask_agg_error_non_fatal23_bit_cg[bt]) mask_agg_error_non_fatal23_bit_cg[bt] = new();
                foreach(mask_agg_error_non_fatal22_bit_cg[bt]) mask_agg_error_non_fatal22_bit_cg[bt] = new();
                foreach(mask_agg_error_non_fatal21_bit_cg[bt]) mask_agg_error_non_fatal21_bit_cg[bt] = new();
                foreach(mask_agg_error_non_fatal20_bit_cg[bt]) mask_agg_error_non_fatal20_bit_cg[bt] = new();
                foreach(mask_agg_error_non_fatal19_bit_cg[bt]) mask_agg_error_non_fatal19_bit_cg[bt] = new();
                foreach(mask_agg_error_non_fatal18_bit_cg[bt]) mask_agg_error_non_fatal18_bit_cg[bt] = new();
                foreach(mask_agg_error_non_fatal17_bit_cg[bt]) mask_agg_error_non_fatal17_bit_cg[bt] = new();
                foreach(mask_agg_error_non_fatal16_bit_cg[bt]) mask_agg_error_non_fatal16_bit_cg[bt] = new();
                foreach(mask_agg_error_non_fatal15_bit_cg[bt]) mask_agg_error_non_fatal15_bit_cg[bt] = new();
                foreach(mask_agg_error_non_fatal14_bit_cg[bt]) mask_agg_error_non_fatal14_bit_cg[bt] = new();
                foreach(mask_agg_error_non_fatal13_bit_cg[bt]) mask_agg_error_non_fatal13_bit_cg[bt] = new();
                foreach(mask_agg_error_non_fatal12_bit_cg[bt]) mask_agg_error_non_fatal12_bit_cg[bt] = new();
                foreach(mask_agg_error_non_fatal11_bit_cg[bt]) mask_agg_error_non_fatal11_bit_cg[bt] = new();
                foreach(mask_agg_error_non_fatal10_bit_cg[bt]) mask_agg_error_non_fatal10_bit_cg[bt] = new();
                foreach(mask_agg_error_non_fatal9_bit_cg[bt]) mask_agg_error_non_fatal9_bit_cg[bt] = new();
                foreach(mask_agg_error_non_fatal8_bit_cg[bt]) mask_agg_error_non_fatal8_bit_cg[bt] = new();
                foreach(mask_agg_error_non_fatal7_bit_cg[bt]) mask_agg_error_non_fatal7_bit_cg[bt] = new();
                foreach(mask_agg_error_non_fatal6_bit_cg[bt]) mask_agg_error_non_fatal6_bit_cg[bt] = new();
                foreach(mask_agg_error_non_fatal5_bit_cg[bt]) mask_agg_error_non_fatal5_bit_cg[bt] = new();
                foreach(mask_agg_error_non_fatal4_bit_cg[bt]) mask_agg_error_non_fatal4_bit_cg[bt] = new();
                foreach(mask_agg_error_non_fatal3_bit_cg[bt]) mask_agg_error_non_fatal3_bit_cg[bt] = new();
                foreach(mask_agg_error_non_fatal2_bit_cg[bt]) mask_agg_error_non_fatal2_bit_cg[bt] = new();
                foreach(mask_agg_error_non_fatal1_bit_cg[bt]) mask_agg_error_non_fatal1_bit_cg[bt] = new();
                foreach(mask_agg_error_non_fatal0_bit_cg[bt]) mask_agg_error_non_fatal0_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__internal_agg_error_non_fatal_mask

    // Reg - mci_reg::internal_fw_error_fatal_mask
    class mci_reg__internal_fw_error_fatal_mask extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__internal_fw_error_fatal_mask_bit_cg mask_bit_cg[32];
        mci_reg__internal_fw_error_fatal_mask_fld_cg fld_cg;
        rand uvm_reg_field mask;

        function new(string name = "mci_reg__internal_fw_error_fatal_mask");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.mask = new("mask");
            this.mask.configure(this, 32, 0, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(mask_bit_cg[bt]) mask_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__internal_fw_error_fatal_mask

    // Reg - mci_reg::internal_fw_error_non_fatal_mask
    class mci_reg__internal_fw_error_non_fatal_mask extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__internal_fw_error_non_fatal_mask_bit_cg mask_bit_cg[32];
        mci_reg__internal_fw_error_non_fatal_mask_fld_cg fld_cg;
        rand uvm_reg_field mask;

        function new(string name = "mci_reg__internal_fw_error_non_fatal_mask");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.mask = new("mask");
            this.mask.configure(this, 32, 0, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(mask_bit_cg[bt]) mask_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__internal_fw_error_non_fatal_mask

    // Reg - mci_reg::WDT_TIMER1_EN
    class mci_reg__WDT_TIMER1_EN extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__WDT_TIMER1_EN_bit_cg timer1_en_bit_cg[1];
        mci_reg__WDT_TIMER1_EN_fld_cg fld_cg;
        rand uvm_reg_field timer1_en;

        function new(string name = "mci_reg__WDT_TIMER1_EN");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.timer1_en = new("timer1_en");
            this.timer1_en.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(timer1_en_bit_cg[bt]) timer1_en_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__WDT_TIMER1_EN

    // Reg - mci_reg::WDT_TIMER1_CTRL
    class mci_reg__WDT_TIMER1_CTRL extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__WDT_TIMER1_CTRL_bit_cg timer1_restart_bit_cg[1];
        mci_reg__WDT_TIMER1_CTRL_fld_cg fld_cg;
        rand uvm_reg_field timer1_restart;

        function new(string name = "mci_reg__WDT_TIMER1_CTRL");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.timer1_restart = new("timer1_restart");
            this.timer1_restart.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(timer1_restart_bit_cg[bt]) timer1_restart_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__WDT_TIMER1_CTRL

    // Reg - mci_reg::WDT_TIMER1_TIMEOUT_PERIOD
    class mci_reg__WDT_TIMER1_TIMEOUT_PERIOD extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__WDT_TIMER1_TIMEOUT_PERIOD_bit_cg timer1_timeout_period_bit_cg[32];
        mci_reg__WDT_TIMER1_TIMEOUT_PERIOD_fld_cg fld_cg;
        rand uvm_reg_field timer1_timeout_period;

        function new(string name = "mci_reg__WDT_TIMER1_TIMEOUT_PERIOD");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.timer1_timeout_period = new("timer1_timeout_period");
            this.timer1_timeout_period.configure(this, 32, 0, "RW", 0, 'hffffffff, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(timer1_timeout_period_bit_cg[bt]) timer1_timeout_period_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__WDT_TIMER1_TIMEOUT_PERIOD

    // Reg - mci_reg::WDT_TIMER2_EN
    class mci_reg__WDT_TIMER2_EN extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__WDT_TIMER2_EN_bit_cg timer2_en_bit_cg[1];
        mci_reg__WDT_TIMER2_EN_fld_cg fld_cg;
        rand uvm_reg_field timer2_en;

        function new(string name = "mci_reg__WDT_TIMER2_EN");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.timer2_en = new("timer2_en");
            this.timer2_en.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(timer2_en_bit_cg[bt]) timer2_en_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__WDT_TIMER2_EN

    // Reg - mci_reg::WDT_TIMER2_CTRL
    class mci_reg__WDT_TIMER2_CTRL extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__WDT_TIMER2_CTRL_bit_cg timer2_restart_bit_cg[1];
        mci_reg__WDT_TIMER2_CTRL_fld_cg fld_cg;
        rand uvm_reg_field timer2_restart;

        function new(string name = "mci_reg__WDT_TIMER2_CTRL");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.timer2_restart = new("timer2_restart");
            this.timer2_restart.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(timer2_restart_bit_cg[bt]) timer2_restart_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__WDT_TIMER2_CTRL

    // Reg - mci_reg::WDT_TIMER2_TIMEOUT_PERIOD
    class mci_reg__WDT_TIMER2_TIMEOUT_PERIOD extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__WDT_TIMER2_TIMEOUT_PERIOD_bit_cg timer2_timeout_period_bit_cg[32];
        mci_reg__WDT_TIMER2_TIMEOUT_PERIOD_fld_cg fld_cg;
        rand uvm_reg_field timer2_timeout_period;

        function new(string name = "mci_reg__WDT_TIMER2_TIMEOUT_PERIOD");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.timer2_timeout_period = new("timer2_timeout_period");
            this.timer2_timeout_period.configure(this, 32, 0, "RW", 0, 'hffffffff, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(timer2_timeout_period_bit_cg[bt]) timer2_timeout_period_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__WDT_TIMER2_TIMEOUT_PERIOD

    // Reg - mci_reg::WDT_STATUS
    class mci_reg__WDT_STATUS extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__WDT_STATUS_bit_cg t1_timeout_bit_cg[1];
        mci_reg__WDT_STATUS_bit_cg t2_timeout_bit_cg[1];
        mci_reg__WDT_STATUS_fld_cg fld_cg;
        rand uvm_reg_field t1_timeout;
        rand uvm_reg_field t2_timeout;

        function new(string name = "mci_reg__WDT_STATUS");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.t1_timeout = new("t1_timeout");
            this.t1_timeout.configure(this, 1, 0, "RW", 1, 'h0, 1, 1, 0);
            this.t2_timeout = new("t2_timeout");
            this.t2_timeout.configure(this, 1, 1, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(t1_timeout_bit_cg[bt]) t1_timeout_bit_cg[bt] = new();
                foreach(t2_timeout_bit_cg[bt]) t2_timeout_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__WDT_STATUS

    // Reg - mci_reg::WDT_CFG
    class mci_reg__WDT_CFG extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__WDT_CFG_bit_cg TIMEOUT_bit_cg[32];
        mci_reg__WDT_CFG_fld_cg fld_cg;
        rand uvm_reg_field TIMEOUT;

        function new(string name = "mci_reg__WDT_CFG");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.TIMEOUT = new("TIMEOUT");
            this.TIMEOUT.configure(this, 32, 0, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(TIMEOUT_bit_cg[bt]) TIMEOUT_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__WDT_CFG

    // Reg - mci_reg::MCU_TIMER_CONFIG
    class mci_reg__MCU_TIMER_CONFIG extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__MCU_TIMER_CONFIG_bit_cg clk_period_bit_cg[32];
        mci_reg__MCU_TIMER_CONFIG_fld_cg fld_cg;
        rand uvm_reg_field clk_period;

        function new(string name = "mci_reg__MCU_TIMER_CONFIG");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.clk_period = new("clk_period");
            this.clk_period.configure(this, 32, 0, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(clk_period_bit_cg[bt]) clk_period_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__MCU_TIMER_CONFIG

    // Reg - mci_reg::MCU_RV_MTIME_L
    class mci_reg__MCU_RV_MTIME_L extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__MCU_RV_MTIME_L_bit_cg count_l_bit_cg[32];
        mci_reg__MCU_RV_MTIME_L_fld_cg fld_cg;
        rand uvm_reg_field count_l;

        function new(string name = "mci_reg__MCU_RV_MTIME_L");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.count_l = new("count_l");
            this.count_l.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(count_l_bit_cg[bt]) count_l_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__MCU_RV_MTIME_L

    // Reg - mci_reg::MCU_RV_MTIME_H
    class mci_reg__MCU_RV_MTIME_H extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__MCU_RV_MTIME_H_bit_cg count_h_bit_cg[32];
        mci_reg__MCU_RV_MTIME_H_fld_cg fld_cg;
        rand uvm_reg_field count_h;

        function new(string name = "mci_reg__MCU_RV_MTIME_H");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.count_h = new("count_h");
            this.count_h.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(count_h_bit_cg[bt]) count_h_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__MCU_RV_MTIME_H

    // Reg - mci_reg::MCU_RV_MTIMECMP_L
    class mci_reg__MCU_RV_MTIMECMP_L extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__MCU_RV_MTIMECMP_L_bit_cg compare_l_bit_cg[32];
        mci_reg__MCU_RV_MTIMECMP_L_fld_cg fld_cg;
        rand uvm_reg_field compare_l;

        function new(string name = "mci_reg__MCU_RV_MTIMECMP_L");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.compare_l = new("compare_l");
            this.compare_l.configure(this, 32, 0, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(compare_l_bit_cg[bt]) compare_l_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__MCU_RV_MTIMECMP_L

    // Reg - mci_reg::MCU_RV_MTIMECMP_H
    class mci_reg__MCU_RV_MTIMECMP_H extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__MCU_RV_MTIMECMP_H_bit_cg compare_h_bit_cg[32];
        mci_reg__MCU_RV_MTIMECMP_H_fld_cg fld_cg;
        rand uvm_reg_field compare_h;

        function new(string name = "mci_reg__MCU_RV_MTIMECMP_H");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.compare_h = new("compare_h");
            this.compare_h.configure(this, 32, 0, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(compare_h_bit_cg[bt]) compare_h_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__MCU_RV_MTIMECMP_H

    // Reg - mci_reg::RESET_REQUEST
    class mci_reg__RESET_REQUEST extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__RESET_REQUEST_bit_cg mcu_req_bit_cg[1];
        mci_reg__RESET_REQUEST_fld_cg fld_cg;
        rand uvm_reg_field mcu_req;

        function new(string name = "mci_reg__RESET_REQUEST");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.mcu_req = new("mcu_req");
            this.mcu_req.configure(this, 1, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(mcu_req_bit_cg[bt]) mcu_req_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__RESET_REQUEST

    // Reg - mci_reg::CALIPTRA_BOOT_GO
    class mci_reg__CALIPTRA_BOOT_GO extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__CALIPTRA_BOOT_GO_bit_cg go_bit_cg[1];
        mci_reg__CALIPTRA_BOOT_GO_fld_cg fld_cg;
        rand uvm_reg_field go;

        function new(string name = "mci_reg__CALIPTRA_BOOT_GO");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.go = new("go");
            this.go.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(go_bit_cg[bt]) go_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__CALIPTRA_BOOT_GO

    // Reg - mci_reg::FW_SRAM_EXEC_REGION_SIZE
    class mci_reg__FW_SRAM_EXEC_REGION_SIZE extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__FW_SRAM_EXEC_REGION_SIZE_bit_cg size_bit_cg[16];
        mci_reg__FW_SRAM_EXEC_REGION_SIZE_fld_cg fld_cg;
        rand uvm_reg_field size;

        function new(string name = "mci_reg__FW_SRAM_EXEC_REGION_SIZE");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.size = new("size");
            this.size.configure(this, 16, 0, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(size_bit_cg[bt]) size_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__FW_SRAM_EXEC_REGION_SIZE

    // Reg - mci_reg::MCU_NMI_VECTOR
    class mci_reg__MCU_NMI_VECTOR extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__MCU_NMI_VECTOR_bit_cg vec_bit_cg[32];
        mci_reg__MCU_NMI_VECTOR_fld_cg fld_cg;
        rand uvm_reg_field vec;

        function new(string name = "mci_reg__MCU_NMI_VECTOR");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.vec = new("vec");
            this.vec.configure(this, 32, 0, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(vec_bit_cg[bt]) vec_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__MCU_NMI_VECTOR

    // Reg - mci_reg::MCU_RESET_VECTOR
    class mci_reg__MCU_RESET_VECTOR extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__MCU_RESET_VECTOR_bit_cg vec_bit_cg[32];
        mci_reg__MCU_RESET_VECTOR_fld_cg fld_cg;
        rand uvm_reg_field vec;

        function new(string name = "mci_reg__MCU_RESET_VECTOR");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.vec = new("vec");
            this.vec.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(vec_bit_cg[bt]) vec_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__MCU_RESET_VECTOR

    // Reg - mci_reg::MBOX0_VALID_AXI_ID
    class mci_reg__MBOX0_VALID_AXI_ID extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__MBOX0_VALID_AXI_ID_bit_cg id_bit_cg[32];
        mci_reg__MBOX0_VALID_AXI_ID_fld_cg fld_cg;
        rand uvm_reg_field id;

        function new(string name = "mci_reg__MBOX0_VALID_AXI_ID");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.id = new("id");
            this.id.configure(this, 32, 0, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(id_bit_cg[bt]) id_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__MBOX0_VALID_AXI_ID

    // Reg - mci_reg::MBOX0_VALID_AXI_ID_LOCK
    class mci_reg__MBOX0_VALID_AXI_ID_LOCK extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__MBOX0_VALID_AXI_ID_LOCK_bit_cg lock_bit_cg[1];
        mci_reg__MBOX0_VALID_AXI_ID_LOCK_fld_cg fld_cg;
        rand uvm_reg_field lock;

        function new(string name = "mci_reg__MBOX0_VALID_AXI_ID_LOCK");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.lock = new("lock");
            this.lock.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(lock_bit_cg[bt]) lock_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__MBOX0_VALID_AXI_ID_LOCK

    // Reg - mci_reg::MBOX1_VALID_AXI_ID
    class mci_reg__MBOX1_VALID_AXI_ID extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__MBOX1_VALID_AXI_ID_bit_cg id_bit_cg[32];
        mci_reg__MBOX1_VALID_AXI_ID_fld_cg fld_cg;
        rand uvm_reg_field id;

        function new(string name = "mci_reg__MBOX1_VALID_AXI_ID");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.id = new("id");
            this.id.configure(this, 32, 0, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(id_bit_cg[bt]) id_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__MBOX1_VALID_AXI_ID

    // Reg - mci_reg::MBOX1_VALID_AXI_ID_LOCK
    class mci_reg__MBOX1_VALID_AXI_ID_LOCK extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__MBOX1_VALID_AXI_ID_LOCK_bit_cg lock_bit_cg[1];
        mci_reg__MBOX1_VALID_AXI_ID_LOCK_fld_cg fld_cg;
        rand uvm_reg_field lock;

        function new(string name = "mci_reg__MBOX1_VALID_AXI_ID_LOCK");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.lock = new("lock");
            this.lock.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(lock_bit_cg[bt]) lock_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__MBOX1_VALID_AXI_ID_LOCK

    // Reg - mci_reg::GENERIC_INPUT_WIRES
    class mci_reg__GENERIC_INPUT_WIRES extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__GENERIC_INPUT_WIRES_bit_cg wires_bit_cg[32];
        mci_reg__GENERIC_INPUT_WIRES_fld_cg fld_cg;
        rand uvm_reg_field wires;

        function new(string name = "mci_reg__GENERIC_INPUT_WIRES");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.wires = new("wires");
            this.wires.configure(this, 32, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(wires_bit_cg[bt]) wires_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__GENERIC_INPUT_WIRES

    // Reg - mci_reg::GENERIC_OUTPUT_WIRES
    class mci_reg__GENERIC_OUTPUT_WIRES extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__GENERIC_OUTPUT_WIRES_bit_cg wires_bit_cg[32];
        mci_reg__GENERIC_OUTPUT_WIRES_fld_cg fld_cg;
        rand uvm_reg_field wires;

        function new(string name = "mci_reg__GENERIC_OUTPUT_WIRES");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.wires = new("wires");
            this.wires.configure(this, 32, 0, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(wires_bit_cg[bt]) wires_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__GENERIC_OUTPUT_WIRES

    // Reg - mci_reg::DEBUG_IN
    class mci_reg__DEBUG_IN extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__DEBUG_IN_bit_cg FIXME_bit_cg[1];
        mci_reg__DEBUG_IN_fld_cg fld_cg;
        rand uvm_reg_field FIXME;

        function new(string name = "mci_reg__DEBUG_IN");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.FIXME = new("FIXME");
            this.FIXME.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(FIXME_bit_cg[bt]) FIXME_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__DEBUG_IN

    // Reg - mci_reg::DEBUG_OUT
    class mci_reg__DEBUG_OUT extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__DEBUG_OUT_bit_cg FIXME_bit_cg[1];
        mci_reg__DEBUG_OUT_fld_cg fld_cg;
        rand uvm_reg_field FIXME;

        function new(string name = "mci_reg__DEBUG_OUT");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.FIXME = new("FIXME");
            this.FIXME.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(FIXME_bit_cg[bt]) FIXME_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__DEBUG_OUT

    // Reg - mci_reg::FUSE_WR_DONE
    class mci_reg__FUSE_WR_DONE extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__FUSE_WR_DONE_bit_cg done_bit_cg[1];
        mci_reg__FUSE_WR_DONE_fld_cg fld_cg;
        rand uvm_reg_field done;

        function new(string name = "mci_reg__FUSE_WR_DONE");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.done = new("done");
            this.done.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(done_bit_cg[bt]) done_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__FUSE_WR_DONE

    // Reg - mci_reg::PROD_DEBUG_UNLOCK_PK_HASH_REG
    class mci_reg__PROD_DEBUG_UNLOCK_PK_HASH_REG extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__PROD_DEBUG_UNLOCK_PK_HASH_REG_bit_cg hash_bit_cg[32];
        mci_reg__PROD_DEBUG_UNLOCK_PK_HASH_REG_fld_cg fld_cg;
        rand uvm_reg_field hash;

        function new(string name = "mci_reg__PROD_DEBUG_UNLOCK_PK_HASH_REG");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.hash = new("hash");
            this.hash.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(hash_bit_cg[bt]) hash_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__PROD_DEBUG_UNLOCK_PK_HASH_REG

    // Reg - mci_reg::STICKY_DATA_VAULT_CTRL
    class mci_reg__STICKY_DATA_VAULT_CTRL extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__STICKY_DATA_VAULT_CTRL_bit_cg lock_entry_bit_cg[1];
        mci_reg__STICKY_DATA_VAULT_CTRL_fld_cg fld_cg;
        rand uvm_reg_field lock_entry;

        function new(string name = "mci_reg__STICKY_DATA_VAULT_CTRL");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.lock_entry = new("lock_entry");
            this.lock_entry.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(lock_entry_bit_cg[bt]) lock_entry_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__STICKY_DATA_VAULT_CTRL

    // Reg - mci_reg::STICKY_DATA_VAULT_ENTRY
    class mci_reg__STICKY_DATA_VAULT_ENTRY extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__STICKY_DATA_VAULT_ENTRY_bit_cg lock_entry_bit_cg[1];
        mci_reg__STICKY_DATA_VAULT_ENTRY_fld_cg fld_cg;
        rand uvm_reg_field lock_entry;

        function new(string name = "mci_reg__STICKY_DATA_VAULT_ENTRY");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.lock_entry = new("lock_entry");
            this.lock_entry.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(lock_entry_bit_cg[bt]) lock_entry_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__STICKY_DATA_VAULT_ENTRY

    // Reg - mci_reg::DATA_VAULT_CTRL
    class mci_reg__DATA_VAULT_CTRL extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__DATA_VAULT_CTRL_bit_cg lock_entry_bit_cg[1];
        mci_reg__DATA_VAULT_CTRL_fld_cg fld_cg;
        rand uvm_reg_field lock_entry;

        function new(string name = "mci_reg__DATA_VAULT_CTRL");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.lock_entry = new("lock_entry");
            this.lock_entry.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(lock_entry_bit_cg[bt]) lock_entry_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__DATA_VAULT_CTRL

    // Reg - mci_reg::DATA_VAULT_ENTRY
    class mci_reg__DATA_VAULT_ENTRY extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__DATA_VAULT_ENTRY_bit_cg lock_entry_bit_cg[1];
        mci_reg__DATA_VAULT_ENTRY_fld_cg fld_cg;
        rand uvm_reg_field lock_entry;

        function new(string name = "mci_reg__DATA_VAULT_ENTRY");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.lock_entry = new("lock_entry");
            this.lock_entry.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(lock_entry_bit_cg[bt]) lock_entry_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__DATA_VAULT_ENTRY

    // Reg - mci_reg::STICKY_LOCKABLE_SCRATCH_REG_CTRL
    class mci_reg__STICKY_LOCKABLE_SCRATCH_REG_CTRL extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__STICKY_LOCKABLE_SCRATCH_REG_CTRL_bit_cg lock_entry_bit_cg[1];
        mci_reg__STICKY_LOCKABLE_SCRATCH_REG_CTRL_fld_cg fld_cg;
        rand uvm_reg_field lock_entry;

        function new(string name = "mci_reg__STICKY_LOCKABLE_SCRATCH_REG_CTRL");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.lock_entry = new("lock_entry");
            this.lock_entry.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(lock_entry_bit_cg[bt]) lock_entry_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__STICKY_LOCKABLE_SCRATCH_REG_CTRL

    // Reg - mci_reg::STICKY_LOCKABLE_SCRATCH_REG
    class mci_reg__STICKY_LOCKABLE_SCRATCH_REG extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__STICKY_LOCKABLE_SCRATCH_REG_bit_cg data_bit_cg[32];
        mci_reg__STICKY_LOCKABLE_SCRATCH_REG_fld_cg fld_cg;
        rand uvm_reg_field data;

        function new(string name = "mci_reg__STICKY_LOCKABLE_SCRATCH_REG");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.data = new("data");
            this.data.configure(this, 32, 0, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(data_bit_cg[bt]) data_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__STICKY_LOCKABLE_SCRATCH_REG

    // Reg - mci_reg::LOCKABLE_SCRATCH_REG_CTRL
    class mci_reg__LOCKABLE_SCRATCH_REG_CTRL extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__LOCKABLE_SCRATCH_REG_CTRL_bit_cg lock_entry_bit_cg[1];
        mci_reg__LOCKABLE_SCRATCH_REG_CTRL_fld_cg fld_cg;
        rand uvm_reg_field lock_entry;

        function new(string name = "mci_reg__LOCKABLE_SCRATCH_REG_CTRL");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.lock_entry = new("lock_entry");
            this.lock_entry.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(lock_entry_bit_cg[bt]) lock_entry_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__LOCKABLE_SCRATCH_REG_CTRL

    // Reg - mci_reg::LOCKABLE_SCRATCH_REG
    class mci_reg__LOCKABLE_SCRATCH_REG extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__LOCKABLE_SCRATCH_REG_bit_cg data_bit_cg[32];
        mci_reg__LOCKABLE_SCRATCH_REG_fld_cg fld_cg;
        rand uvm_reg_field data;

        function new(string name = "mci_reg__LOCKABLE_SCRATCH_REG");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.data = new("data");
            this.data.configure(this, 32, 0, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(data_bit_cg[bt]) data_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__LOCKABLE_SCRATCH_REG

    // Reg - mci_reg::NON_STICKY_GENERIC_SCRATCH_REG
    class mci_reg__NON_STICKY_GENERIC_SCRATCH_REG extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__NON_STICKY_GENERIC_SCRATCH_REG_bit_cg data_bit_cg[32];
        mci_reg__NON_STICKY_GENERIC_SCRATCH_REG_fld_cg fld_cg;
        rand uvm_reg_field data;

        function new(string name = "mci_reg__NON_STICKY_GENERIC_SCRATCH_REG");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.data = new("data");
            this.data.configure(this, 32, 0, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(data_bit_cg[bt]) data_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__NON_STICKY_GENERIC_SCRATCH_REG

    // Reg - mci_reg::intr_block_t::global_intr_en_t
    class mci_reg__intr_block_t__global_intr_en_t extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__global_intr_en_t_bit_cg error_en_bit_cg[1];
        mci_reg__intr_block_t__global_intr_en_t_bit_cg notif_en_bit_cg[1];
        mci_reg__intr_block_t__global_intr_en_t_fld_cg fld_cg;
        rand uvm_reg_field error_en;
        rand uvm_reg_field notif_en;

        function new(string name = "mci_reg__intr_block_t__global_intr_en_t");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.error_en = new("error_en");
            this.error_en.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
            this.notif_en = new("notif_en");
            this.notif_en.configure(this, 1, 1, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(error_en_bit_cg[bt]) error_en_bit_cg[bt] = new();
                foreach(notif_en_bit_cg[bt]) notif_en_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__global_intr_en_t

    // Reg - mci_reg::intr_block_t::error0_intr_en_t
    class mci_reg__intr_block_t__error0_intr_en_t extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__error0_intr_en_t_bit_cg error_wdt_timer1_timeout_en_bit_cg[1];
        mci_reg__intr_block_t__error0_intr_en_t_bit_cg error_wdt_timer2_timeout_en_bit_cg[1];
        mci_reg__intr_block_t__error0_intr_en_t_fld_cg fld_cg;
        rand uvm_reg_field error_wdt_timer1_timeout_en;
        rand uvm_reg_field error_wdt_timer2_timeout_en;

        function new(string name = "mci_reg__intr_block_t__error0_intr_en_t");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.error_wdt_timer1_timeout_en = new("error_wdt_timer1_timeout_en");
            this.error_wdt_timer1_timeout_en.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
            this.error_wdt_timer2_timeout_en = new("error_wdt_timer2_timeout_en");
            this.error_wdt_timer2_timeout_en.configure(this, 1, 1, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(error_wdt_timer1_timeout_en_bit_cg[bt]) error_wdt_timer1_timeout_en_bit_cg[bt] = new();
                foreach(error_wdt_timer2_timeout_en_bit_cg[bt]) error_wdt_timer2_timeout_en_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__error0_intr_en_t

    // Reg - mci_reg::intr_block_t::error1_intr_en_t
    class mci_reg__intr_block_t__error1_intr_en_t extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__error1_intr_en_t_bit_cg error_agg_error_fatal31_en_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_en_t_bit_cg error_agg_error_fatal30_en_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_en_t_bit_cg error_agg_error_fatal29_en_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_en_t_bit_cg error_agg_error_fatal28_en_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_en_t_bit_cg error_agg_error_fatal27_en_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_en_t_bit_cg error_agg_error_fatal26_en_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_en_t_bit_cg error_agg_error_fatal25_en_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_en_t_bit_cg error_agg_error_fatal24_en_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_en_t_bit_cg error_agg_error_fatal23_en_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_en_t_bit_cg error_agg_error_fatal22_en_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_en_t_bit_cg error_agg_error_fatal21_en_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_en_t_bit_cg error_agg_error_fatal20_en_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_en_t_bit_cg error_agg_error_fatal19_en_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_en_t_bit_cg error_agg_error_fatal18_en_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_en_t_bit_cg error_agg_error_fatal17_en_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_en_t_bit_cg error_agg_error_fatal16_en_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_en_t_bit_cg error_agg_error_fatal15_en_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_en_t_bit_cg error_agg_error_fatal14_en_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_en_t_bit_cg error_agg_error_fatal13_en_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_en_t_bit_cg error_agg_error_fatal12_en_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_en_t_bit_cg error_agg_error_fatal11_en_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_en_t_bit_cg error_agg_error_fatal10_en_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_en_t_bit_cg error_agg_error_fatal9_en_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_en_t_bit_cg error_agg_error_fatal8_en_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_en_t_bit_cg error_agg_error_fatal7_en_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_en_t_bit_cg error_agg_error_fatal6_en_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_en_t_bit_cg error_agg_error_fatal5_en_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_en_t_bit_cg error_agg_error_fatal4_en_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_en_t_bit_cg error_agg_error_fatal3_en_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_en_t_bit_cg error_agg_error_fatal2_en_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_en_t_bit_cg error_agg_error_fatal1_en_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_en_t_bit_cg error_agg_error_fatal0_en_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_en_t_fld_cg fld_cg;
        rand uvm_reg_field error_agg_error_fatal31_en;
        rand uvm_reg_field error_agg_error_fatal30_en;
        rand uvm_reg_field error_agg_error_fatal29_en;
        rand uvm_reg_field error_agg_error_fatal28_en;
        rand uvm_reg_field error_agg_error_fatal27_en;
        rand uvm_reg_field error_agg_error_fatal26_en;
        rand uvm_reg_field error_agg_error_fatal25_en;
        rand uvm_reg_field error_agg_error_fatal24_en;
        rand uvm_reg_field error_agg_error_fatal23_en;
        rand uvm_reg_field error_agg_error_fatal22_en;
        rand uvm_reg_field error_agg_error_fatal21_en;
        rand uvm_reg_field error_agg_error_fatal20_en;
        rand uvm_reg_field error_agg_error_fatal19_en;
        rand uvm_reg_field error_agg_error_fatal18_en;
        rand uvm_reg_field error_agg_error_fatal17_en;
        rand uvm_reg_field error_agg_error_fatal16_en;
        rand uvm_reg_field error_agg_error_fatal15_en;
        rand uvm_reg_field error_agg_error_fatal14_en;
        rand uvm_reg_field error_agg_error_fatal13_en;
        rand uvm_reg_field error_agg_error_fatal12_en;
        rand uvm_reg_field error_agg_error_fatal11_en;
        rand uvm_reg_field error_agg_error_fatal10_en;
        rand uvm_reg_field error_agg_error_fatal9_en;
        rand uvm_reg_field error_agg_error_fatal8_en;
        rand uvm_reg_field error_agg_error_fatal7_en;
        rand uvm_reg_field error_agg_error_fatal6_en;
        rand uvm_reg_field error_agg_error_fatal5_en;
        rand uvm_reg_field error_agg_error_fatal4_en;
        rand uvm_reg_field error_agg_error_fatal3_en;
        rand uvm_reg_field error_agg_error_fatal2_en;
        rand uvm_reg_field error_agg_error_fatal1_en;
        rand uvm_reg_field error_agg_error_fatal0_en;

        function new(string name = "mci_reg__intr_block_t__error1_intr_en_t");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.error_agg_error_fatal31_en = new("error_agg_error_fatal31_en");
            this.error_agg_error_fatal31_en.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal30_en = new("error_agg_error_fatal30_en");
            this.error_agg_error_fatal30_en.configure(this, 1, 1, "RW", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal29_en = new("error_agg_error_fatal29_en");
            this.error_agg_error_fatal29_en.configure(this, 1, 2, "RW", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal28_en = new("error_agg_error_fatal28_en");
            this.error_agg_error_fatal28_en.configure(this, 1, 3, "RW", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal27_en = new("error_agg_error_fatal27_en");
            this.error_agg_error_fatal27_en.configure(this, 1, 4, "RW", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal26_en = new("error_agg_error_fatal26_en");
            this.error_agg_error_fatal26_en.configure(this, 1, 5, "RW", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal25_en = new("error_agg_error_fatal25_en");
            this.error_agg_error_fatal25_en.configure(this, 1, 6, "RW", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal24_en = new("error_agg_error_fatal24_en");
            this.error_agg_error_fatal24_en.configure(this, 1, 7, "RW", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal23_en = new("error_agg_error_fatal23_en");
            this.error_agg_error_fatal23_en.configure(this, 1, 8, "RW", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal22_en = new("error_agg_error_fatal22_en");
            this.error_agg_error_fatal22_en.configure(this, 1, 9, "RW", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal21_en = new("error_agg_error_fatal21_en");
            this.error_agg_error_fatal21_en.configure(this, 1, 10, "RW", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal20_en = new("error_agg_error_fatal20_en");
            this.error_agg_error_fatal20_en.configure(this, 1, 11, "RW", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal19_en = new("error_agg_error_fatal19_en");
            this.error_agg_error_fatal19_en.configure(this, 1, 12, "RW", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal18_en = new("error_agg_error_fatal18_en");
            this.error_agg_error_fatal18_en.configure(this, 1, 13, "RW", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal17_en = new("error_agg_error_fatal17_en");
            this.error_agg_error_fatal17_en.configure(this, 1, 14, "RW", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal16_en = new("error_agg_error_fatal16_en");
            this.error_agg_error_fatal16_en.configure(this, 1, 15, "RW", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal15_en = new("error_agg_error_fatal15_en");
            this.error_agg_error_fatal15_en.configure(this, 1, 16, "RW", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal14_en = new("error_agg_error_fatal14_en");
            this.error_agg_error_fatal14_en.configure(this, 1, 17, "RW", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal13_en = new("error_agg_error_fatal13_en");
            this.error_agg_error_fatal13_en.configure(this, 1, 18, "RW", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal12_en = new("error_agg_error_fatal12_en");
            this.error_agg_error_fatal12_en.configure(this, 1, 19, "RW", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal11_en = new("error_agg_error_fatal11_en");
            this.error_agg_error_fatal11_en.configure(this, 1, 20, "RW", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal10_en = new("error_agg_error_fatal10_en");
            this.error_agg_error_fatal10_en.configure(this, 1, 21, "RW", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal9_en = new("error_agg_error_fatal9_en");
            this.error_agg_error_fatal9_en.configure(this, 1, 22, "RW", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal8_en = new("error_agg_error_fatal8_en");
            this.error_agg_error_fatal8_en.configure(this, 1, 23, "RW", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal7_en = new("error_agg_error_fatal7_en");
            this.error_agg_error_fatal7_en.configure(this, 1, 24, "RW", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal6_en = new("error_agg_error_fatal6_en");
            this.error_agg_error_fatal6_en.configure(this, 1, 25, "RW", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal5_en = new("error_agg_error_fatal5_en");
            this.error_agg_error_fatal5_en.configure(this, 1, 26, "RW", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal4_en = new("error_agg_error_fatal4_en");
            this.error_agg_error_fatal4_en.configure(this, 1, 27, "RW", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal3_en = new("error_agg_error_fatal3_en");
            this.error_agg_error_fatal3_en.configure(this, 1, 28, "RW", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal2_en = new("error_agg_error_fatal2_en");
            this.error_agg_error_fatal2_en.configure(this, 1, 29, "RW", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal1_en = new("error_agg_error_fatal1_en");
            this.error_agg_error_fatal1_en.configure(this, 1, 30, "RW", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal0_en = new("error_agg_error_fatal0_en");
            this.error_agg_error_fatal0_en.configure(this, 1, 31, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(error_agg_error_fatal31_en_bit_cg[bt]) error_agg_error_fatal31_en_bit_cg[bt] = new();
                foreach(error_agg_error_fatal30_en_bit_cg[bt]) error_agg_error_fatal30_en_bit_cg[bt] = new();
                foreach(error_agg_error_fatal29_en_bit_cg[bt]) error_agg_error_fatal29_en_bit_cg[bt] = new();
                foreach(error_agg_error_fatal28_en_bit_cg[bt]) error_agg_error_fatal28_en_bit_cg[bt] = new();
                foreach(error_agg_error_fatal27_en_bit_cg[bt]) error_agg_error_fatal27_en_bit_cg[bt] = new();
                foreach(error_agg_error_fatal26_en_bit_cg[bt]) error_agg_error_fatal26_en_bit_cg[bt] = new();
                foreach(error_agg_error_fatal25_en_bit_cg[bt]) error_agg_error_fatal25_en_bit_cg[bt] = new();
                foreach(error_agg_error_fatal24_en_bit_cg[bt]) error_agg_error_fatal24_en_bit_cg[bt] = new();
                foreach(error_agg_error_fatal23_en_bit_cg[bt]) error_agg_error_fatal23_en_bit_cg[bt] = new();
                foreach(error_agg_error_fatal22_en_bit_cg[bt]) error_agg_error_fatal22_en_bit_cg[bt] = new();
                foreach(error_agg_error_fatal21_en_bit_cg[bt]) error_agg_error_fatal21_en_bit_cg[bt] = new();
                foreach(error_agg_error_fatal20_en_bit_cg[bt]) error_agg_error_fatal20_en_bit_cg[bt] = new();
                foreach(error_agg_error_fatal19_en_bit_cg[bt]) error_agg_error_fatal19_en_bit_cg[bt] = new();
                foreach(error_agg_error_fatal18_en_bit_cg[bt]) error_agg_error_fatal18_en_bit_cg[bt] = new();
                foreach(error_agg_error_fatal17_en_bit_cg[bt]) error_agg_error_fatal17_en_bit_cg[bt] = new();
                foreach(error_agg_error_fatal16_en_bit_cg[bt]) error_agg_error_fatal16_en_bit_cg[bt] = new();
                foreach(error_agg_error_fatal15_en_bit_cg[bt]) error_agg_error_fatal15_en_bit_cg[bt] = new();
                foreach(error_agg_error_fatal14_en_bit_cg[bt]) error_agg_error_fatal14_en_bit_cg[bt] = new();
                foreach(error_agg_error_fatal13_en_bit_cg[bt]) error_agg_error_fatal13_en_bit_cg[bt] = new();
                foreach(error_agg_error_fatal12_en_bit_cg[bt]) error_agg_error_fatal12_en_bit_cg[bt] = new();
                foreach(error_agg_error_fatal11_en_bit_cg[bt]) error_agg_error_fatal11_en_bit_cg[bt] = new();
                foreach(error_agg_error_fatal10_en_bit_cg[bt]) error_agg_error_fatal10_en_bit_cg[bt] = new();
                foreach(error_agg_error_fatal9_en_bit_cg[bt]) error_agg_error_fatal9_en_bit_cg[bt] = new();
                foreach(error_agg_error_fatal8_en_bit_cg[bt]) error_agg_error_fatal8_en_bit_cg[bt] = new();
                foreach(error_agg_error_fatal7_en_bit_cg[bt]) error_agg_error_fatal7_en_bit_cg[bt] = new();
                foreach(error_agg_error_fatal6_en_bit_cg[bt]) error_agg_error_fatal6_en_bit_cg[bt] = new();
                foreach(error_agg_error_fatal5_en_bit_cg[bt]) error_agg_error_fatal5_en_bit_cg[bt] = new();
                foreach(error_agg_error_fatal4_en_bit_cg[bt]) error_agg_error_fatal4_en_bit_cg[bt] = new();
                foreach(error_agg_error_fatal3_en_bit_cg[bt]) error_agg_error_fatal3_en_bit_cg[bt] = new();
                foreach(error_agg_error_fatal2_en_bit_cg[bt]) error_agg_error_fatal2_en_bit_cg[bt] = new();
                foreach(error_agg_error_fatal1_en_bit_cg[bt]) error_agg_error_fatal1_en_bit_cg[bt] = new();
                foreach(error_agg_error_fatal0_en_bit_cg[bt]) error_agg_error_fatal0_en_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__error1_intr_en_t

    // Reg - mci_reg::intr_block_t::notif0_intr_en_t
    class mci_reg__intr_block_t__notif0_intr_en_t extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__notif0_intr_en_t_bit_cg notif_mcu_sram_ecc_cor_en_bit_cg[1];
        mci_reg__intr_block_t__notif0_intr_en_t_bit_cg notif_clpra_mcu_reset_req_en_bit_cg[1];
        mci_reg__intr_block_t__notif0_intr_en_t_fld_cg fld_cg;
        rand uvm_reg_field notif_mcu_sram_ecc_cor_en;
        rand uvm_reg_field notif_clpra_mcu_reset_req_en;

        function new(string name = "mci_reg__intr_block_t__notif0_intr_en_t");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.notif_mcu_sram_ecc_cor_en = new("notif_mcu_sram_ecc_cor_en");
            this.notif_mcu_sram_ecc_cor_en.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
            this.notif_clpra_mcu_reset_req_en = new("notif_clpra_mcu_reset_req_en");
            this.notif_clpra_mcu_reset_req_en.configure(this, 1, 1, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(notif_mcu_sram_ecc_cor_en_bit_cg[bt]) notif_mcu_sram_ecc_cor_en_bit_cg[bt] = new();
                foreach(notif_clpra_mcu_reset_req_en_bit_cg[bt]) notif_clpra_mcu_reset_req_en_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__notif0_intr_en_t

    // Reg - mci_reg::intr_block_t::notif1_intr_en_t
    class mci_reg__intr_block_t__notif1_intr_en_t extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__notif1_intr_en_t_bit_cg notif_agg_error_non_fatal31_en_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_en_t_bit_cg notif_agg_error_non_fatal30_en_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_en_t_bit_cg notif_agg_error_non_fatal29_en_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_en_t_bit_cg notif_agg_error_non_fatal28_en_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_en_t_bit_cg notif_agg_error_non_fatal27_en_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_en_t_bit_cg notif_agg_error_non_fatal26_en_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_en_t_bit_cg notif_agg_error_non_fatal25_en_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_en_t_bit_cg notif_agg_error_non_fatal24_en_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_en_t_bit_cg notif_agg_error_non_fatal23_en_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_en_t_bit_cg notif_agg_error_non_fatal22_en_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_en_t_bit_cg notif_agg_error_non_fatal21_en_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_en_t_bit_cg notif_agg_error_non_fatal20_en_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_en_t_bit_cg notif_agg_error_non_fatal19_en_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_en_t_bit_cg notif_agg_error_non_fatal18_en_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_en_t_bit_cg notif_agg_error_non_fatal17_en_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_en_t_bit_cg notif_agg_error_non_fatal16_en_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_en_t_bit_cg notif_agg_error_non_fatal15_en_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_en_t_bit_cg notif_agg_error_non_fatal14_en_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_en_t_bit_cg notif_agg_error_non_fatal13_en_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_en_t_bit_cg notif_agg_error_non_fatal12_en_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_en_t_bit_cg notif_agg_error_non_fatal11_en_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_en_t_bit_cg notif_agg_error_non_fatal10_en_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_en_t_bit_cg notif_agg_error_non_fatal9_en_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_en_t_bit_cg notif_agg_error_non_fatal8_en_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_en_t_bit_cg notif_agg_error_non_fatal7_en_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_en_t_bit_cg notif_agg_error_non_fatal6_en_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_en_t_bit_cg notif_agg_error_non_fatal5_en_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_en_t_bit_cg notif_agg_error_non_fatal4_en_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_en_t_bit_cg notif_agg_error_non_fatal3_en_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_en_t_bit_cg notif_agg_error_non_fatal2_en_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_en_t_bit_cg notif_agg_error_non_fatal1_en_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_en_t_bit_cg notif_agg_error_non_fatal0_en_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_en_t_fld_cg fld_cg;
        rand uvm_reg_field notif_agg_error_non_fatal31_en;
        rand uvm_reg_field notif_agg_error_non_fatal30_en;
        rand uvm_reg_field notif_agg_error_non_fatal29_en;
        rand uvm_reg_field notif_agg_error_non_fatal28_en;
        rand uvm_reg_field notif_agg_error_non_fatal27_en;
        rand uvm_reg_field notif_agg_error_non_fatal26_en;
        rand uvm_reg_field notif_agg_error_non_fatal25_en;
        rand uvm_reg_field notif_agg_error_non_fatal24_en;
        rand uvm_reg_field notif_agg_error_non_fatal23_en;
        rand uvm_reg_field notif_agg_error_non_fatal22_en;
        rand uvm_reg_field notif_agg_error_non_fatal21_en;
        rand uvm_reg_field notif_agg_error_non_fatal20_en;
        rand uvm_reg_field notif_agg_error_non_fatal19_en;
        rand uvm_reg_field notif_agg_error_non_fatal18_en;
        rand uvm_reg_field notif_agg_error_non_fatal17_en;
        rand uvm_reg_field notif_agg_error_non_fatal16_en;
        rand uvm_reg_field notif_agg_error_non_fatal15_en;
        rand uvm_reg_field notif_agg_error_non_fatal14_en;
        rand uvm_reg_field notif_agg_error_non_fatal13_en;
        rand uvm_reg_field notif_agg_error_non_fatal12_en;
        rand uvm_reg_field notif_agg_error_non_fatal11_en;
        rand uvm_reg_field notif_agg_error_non_fatal10_en;
        rand uvm_reg_field notif_agg_error_non_fatal9_en;
        rand uvm_reg_field notif_agg_error_non_fatal8_en;
        rand uvm_reg_field notif_agg_error_non_fatal7_en;
        rand uvm_reg_field notif_agg_error_non_fatal6_en;
        rand uvm_reg_field notif_agg_error_non_fatal5_en;
        rand uvm_reg_field notif_agg_error_non_fatal4_en;
        rand uvm_reg_field notif_agg_error_non_fatal3_en;
        rand uvm_reg_field notif_agg_error_non_fatal2_en;
        rand uvm_reg_field notif_agg_error_non_fatal1_en;
        rand uvm_reg_field notif_agg_error_non_fatal0_en;

        function new(string name = "mci_reg__intr_block_t__notif1_intr_en_t");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.notif_agg_error_non_fatal31_en = new("notif_agg_error_non_fatal31_en");
            this.notif_agg_error_non_fatal31_en.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal30_en = new("notif_agg_error_non_fatal30_en");
            this.notif_agg_error_non_fatal30_en.configure(this, 1, 1, "RW", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal29_en = new("notif_agg_error_non_fatal29_en");
            this.notif_agg_error_non_fatal29_en.configure(this, 1, 2, "RW", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal28_en = new("notif_agg_error_non_fatal28_en");
            this.notif_agg_error_non_fatal28_en.configure(this, 1, 3, "RW", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal27_en = new("notif_agg_error_non_fatal27_en");
            this.notif_agg_error_non_fatal27_en.configure(this, 1, 4, "RW", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal26_en = new("notif_agg_error_non_fatal26_en");
            this.notif_agg_error_non_fatal26_en.configure(this, 1, 5, "RW", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal25_en = new("notif_agg_error_non_fatal25_en");
            this.notif_agg_error_non_fatal25_en.configure(this, 1, 6, "RW", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal24_en = new("notif_agg_error_non_fatal24_en");
            this.notif_agg_error_non_fatal24_en.configure(this, 1, 7, "RW", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal23_en = new("notif_agg_error_non_fatal23_en");
            this.notif_agg_error_non_fatal23_en.configure(this, 1, 8, "RW", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal22_en = new("notif_agg_error_non_fatal22_en");
            this.notif_agg_error_non_fatal22_en.configure(this, 1, 9, "RW", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal21_en = new("notif_agg_error_non_fatal21_en");
            this.notif_agg_error_non_fatal21_en.configure(this, 1, 10, "RW", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal20_en = new("notif_agg_error_non_fatal20_en");
            this.notif_agg_error_non_fatal20_en.configure(this, 1, 11, "RW", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal19_en = new("notif_agg_error_non_fatal19_en");
            this.notif_agg_error_non_fatal19_en.configure(this, 1, 12, "RW", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal18_en = new("notif_agg_error_non_fatal18_en");
            this.notif_agg_error_non_fatal18_en.configure(this, 1, 13, "RW", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal17_en = new("notif_agg_error_non_fatal17_en");
            this.notif_agg_error_non_fatal17_en.configure(this, 1, 14, "RW", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal16_en = new("notif_agg_error_non_fatal16_en");
            this.notif_agg_error_non_fatal16_en.configure(this, 1, 15, "RW", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal15_en = new("notif_agg_error_non_fatal15_en");
            this.notif_agg_error_non_fatal15_en.configure(this, 1, 16, "RW", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal14_en = new("notif_agg_error_non_fatal14_en");
            this.notif_agg_error_non_fatal14_en.configure(this, 1, 17, "RW", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal13_en = new("notif_agg_error_non_fatal13_en");
            this.notif_agg_error_non_fatal13_en.configure(this, 1, 18, "RW", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal12_en = new("notif_agg_error_non_fatal12_en");
            this.notif_agg_error_non_fatal12_en.configure(this, 1, 19, "RW", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal11_en = new("notif_agg_error_non_fatal11_en");
            this.notif_agg_error_non_fatal11_en.configure(this, 1, 20, "RW", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal10_en = new("notif_agg_error_non_fatal10_en");
            this.notif_agg_error_non_fatal10_en.configure(this, 1, 21, "RW", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal9_en = new("notif_agg_error_non_fatal9_en");
            this.notif_agg_error_non_fatal9_en.configure(this, 1, 22, "RW", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal8_en = new("notif_agg_error_non_fatal8_en");
            this.notif_agg_error_non_fatal8_en.configure(this, 1, 23, "RW", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal7_en = new("notif_agg_error_non_fatal7_en");
            this.notif_agg_error_non_fatal7_en.configure(this, 1, 24, "RW", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal6_en = new("notif_agg_error_non_fatal6_en");
            this.notif_agg_error_non_fatal6_en.configure(this, 1, 25, "RW", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal5_en = new("notif_agg_error_non_fatal5_en");
            this.notif_agg_error_non_fatal5_en.configure(this, 1, 26, "RW", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal4_en = new("notif_agg_error_non_fatal4_en");
            this.notif_agg_error_non_fatal4_en.configure(this, 1, 27, "RW", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal3_en = new("notif_agg_error_non_fatal3_en");
            this.notif_agg_error_non_fatal3_en.configure(this, 1, 28, "RW", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal2_en = new("notif_agg_error_non_fatal2_en");
            this.notif_agg_error_non_fatal2_en.configure(this, 1, 29, "RW", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal1_en = new("notif_agg_error_non_fatal1_en");
            this.notif_agg_error_non_fatal1_en.configure(this, 1, 30, "RW", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal0_en = new("notif_agg_error_non_fatal0_en");
            this.notif_agg_error_non_fatal0_en.configure(this, 1, 31, "RW", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(notif_agg_error_non_fatal31_en_bit_cg[bt]) notif_agg_error_non_fatal31_en_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal30_en_bit_cg[bt]) notif_agg_error_non_fatal30_en_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal29_en_bit_cg[bt]) notif_agg_error_non_fatal29_en_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal28_en_bit_cg[bt]) notif_agg_error_non_fatal28_en_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal27_en_bit_cg[bt]) notif_agg_error_non_fatal27_en_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal26_en_bit_cg[bt]) notif_agg_error_non_fatal26_en_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal25_en_bit_cg[bt]) notif_agg_error_non_fatal25_en_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal24_en_bit_cg[bt]) notif_agg_error_non_fatal24_en_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal23_en_bit_cg[bt]) notif_agg_error_non_fatal23_en_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal22_en_bit_cg[bt]) notif_agg_error_non_fatal22_en_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal21_en_bit_cg[bt]) notif_agg_error_non_fatal21_en_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal20_en_bit_cg[bt]) notif_agg_error_non_fatal20_en_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal19_en_bit_cg[bt]) notif_agg_error_non_fatal19_en_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal18_en_bit_cg[bt]) notif_agg_error_non_fatal18_en_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal17_en_bit_cg[bt]) notif_agg_error_non_fatal17_en_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal16_en_bit_cg[bt]) notif_agg_error_non_fatal16_en_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal15_en_bit_cg[bt]) notif_agg_error_non_fatal15_en_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal14_en_bit_cg[bt]) notif_agg_error_non_fatal14_en_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal13_en_bit_cg[bt]) notif_agg_error_non_fatal13_en_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal12_en_bit_cg[bt]) notif_agg_error_non_fatal12_en_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal11_en_bit_cg[bt]) notif_agg_error_non_fatal11_en_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal10_en_bit_cg[bt]) notif_agg_error_non_fatal10_en_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal9_en_bit_cg[bt]) notif_agg_error_non_fatal9_en_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal8_en_bit_cg[bt]) notif_agg_error_non_fatal8_en_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal7_en_bit_cg[bt]) notif_agg_error_non_fatal7_en_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal6_en_bit_cg[bt]) notif_agg_error_non_fatal6_en_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal5_en_bit_cg[bt]) notif_agg_error_non_fatal5_en_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal4_en_bit_cg[bt]) notif_agg_error_non_fatal4_en_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal3_en_bit_cg[bt]) notif_agg_error_non_fatal3_en_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal2_en_bit_cg[bt]) notif_agg_error_non_fatal2_en_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal1_en_bit_cg[bt]) notif_agg_error_non_fatal1_en_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal0_en_bit_cg[bt]) notif_agg_error_non_fatal0_en_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__notif1_intr_en_t

    // Reg - mci_reg::intr_block_t::global_intr_t_agg_sts0_9d4fcb80_agg_sts1_dd15d6db
    class mci_reg__intr_block_t__global_intr_t_agg_sts0_9d4fcb80_agg_sts1_dd15d6db extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__global_intr_t_agg_sts0_9d4fcb80_agg_sts1_dd15d6db_bit_cg agg_sts0_bit_cg[1];
        mci_reg__intr_block_t__global_intr_t_agg_sts0_9d4fcb80_agg_sts1_dd15d6db_bit_cg agg_sts1_bit_cg[1];
        mci_reg__intr_block_t__global_intr_t_agg_sts0_9d4fcb80_agg_sts1_dd15d6db_fld_cg fld_cg;
        rand uvm_reg_field agg_sts0;
        rand uvm_reg_field agg_sts1;

        function new(string name = "mci_reg__intr_block_t__global_intr_t_agg_sts0_9d4fcb80_agg_sts1_dd15d6db");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.agg_sts0 = new("agg_sts0");
            this.agg_sts0.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            this.agg_sts1 = new("agg_sts1");
            this.agg_sts1.configure(this, 1, 1, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(agg_sts0_bit_cg[bt]) agg_sts0_bit_cg[bt] = new();
                foreach(agg_sts1_bit_cg[bt]) agg_sts1_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__global_intr_t_agg_sts0_9d4fcb80_agg_sts1_dd15d6db

    // Reg - mci_reg::intr_block_t::global_intr_t_agg_sts0_fbbcc271_agg_sts1_5df57496
    class mci_reg__intr_block_t__global_intr_t_agg_sts0_fbbcc271_agg_sts1_5df57496 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__global_intr_t_agg_sts0_fbbcc271_agg_sts1_5df57496_bit_cg agg_sts0_bit_cg[1];
        mci_reg__intr_block_t__global_intr_t_agg_sts0_fbbcc271_agg_sts1_5df57496_bit_cg agg_sts1_bit_cg[1];
        mci_reg__intr_block_t__global_intr_t_agg_sts0_fbbcc271_agg_sts1_5df57496_fld_cg fld_cg;
        rand uvm_reg_field agg_sts0;
        rand uvm_reg_field agg_sts1;

        function new(string name = "mci_reg__intr_block_t__global_intr_t_agg_sts0_fbbcc271_agg_sts1_5df57496");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.agg_sts0 = new("agg_sts0");
            this.agg_sts0.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            this.agg_sts1 = new("agg_sts1");
            this.agg_sts1.configure(this, 1, 1, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(agg_sts0_bit_cg[bt]) agg_sts0_bit_cg[bt] = new();
                foreach(agg_sts1_bit_cg[bt]) agg_sts1_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__global_intr_t_agg_sts0_fbbcc271_agg_sts1_5df57496

    // Reg - mci_reg::intr_block_t::error0_intr_t_error_wdt_timer1_timeout_sts_d5484b74_error_wdt_timer2_timeout_sts_275950a2
    class mci_reg__intr_block_t__error0_intr_t_error_wdt_timer1_timeout_sts_d5484b74_error_wdt_timer2_timeout_sts_275950a2 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__error0_intr_t_error_wdt_timer1_timeout_sts_d5484b74_error_wdt_timer2_timeout_sts_275950a2_bit_cg error_wdt_timer1_timeout_sts_bit_cg[1];
        mci_reg__intr_block_t__error0_intr_t_error_wdt_timer1_timeout_sts_d5484b74_error_wdt_timer2_timeout_sts_275950a2_bit_cg error_wdt_timer2_timeout_sts_bit_cg[1];
        mci_reg__intr_block_t__error0_intr_t_error_wdt_timer1_timeout_sts_d5484b74_error_wdt_timer2_timeout_sts_275950a2_fld_cg fld_cg;
        rand uvm_reg_field error_wdt_timer1_timeout_sts;
        rand uvm_reg_field error_wdt_timer2_timeout_sts;

        function new(string name = "mci_reg__intr_block_t__error0_intr_t_error_wdt_timer1_timeout_sts_d5484b74_error_wdt_timer2_timeout_sts_275950a2");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.error_wdt_timer1_timeout_sts = new("error_wdt_timer1_timeout_sts");
            this.error_wdt_timer1_timeout_sts.configure(this, 1, 0, "W1C", 1, 'h0, 1, 1, 0);
            this.error_wdt_timer2_timeout_sts = new("error_wdt_timer2_timeout_sts");
            this.error_wdt_timer2_timeout_sts.configure(this, 1, 1, "W1C", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(error_wdt_timer1_timeout_sts_bit_cg[bt]) error_wdt_timer1_timeout_sts_bit_cg[bt] = new();
                foreach(error_wdt_timer2_timeout_sts_bit_cg[bt]) error_wdt_timer2_timeout_sts_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__error0_intr_t_error_wdt_timer1_timeout_sts_d5484b74_error_wdt_timer2_timeout_sts_275950a2

    // Reg - mci_reg::intr_block_t::error1_intr_t_error_agg_error_fatal0_sts_fa132a82_error_agg_error_fatal10_sts_6f865c89_error_agg_error_fatal11_sts_fa6208a0_error_agg_error_fatal12_sts_721d3a75_error_agg_error_fatal13_sts_5c3990f4_error_agg_error_fatal14_sts_a694518f_error_agg_error_fatal15_sts_9f83da34_error_agg_error_fatal16_sts_d2008075_error_agg_error_fatal17_sts_c4477fd6_error_agg_error_fatal18_sts_7e56b5c7_error_agg_error_fatal19_sts_d910ce2f_error_agg_error_fatal1_sts_a502c972_error_agg_error_fatal20_sts_1c366f71_error_agg_error_fatal21_sts_3ffab23c_error_agg_error_fatal22_sts_cf97fe95_error_agg_error_fatal23_sts_b038dc4b_error_agg_error_fatal24_sts_46a7f9f2_error_agg_error_fatal25_sts_d3847056_error_agg_error_fatal26_sts_07ce5573_error_agg_error_fatal27_sts_686337e8_error_agg_error_fatal28_sts_47915955_error_agg_error_fatal29_sts_748fd418_error_agg_error_fatal2_sts_1eed1d52_error_agg_error_fatal30_sts_56c415d2_error_agg_error_fatal31_sts_9c4937bc_error_agg_error_fatal3_sts_7910568d_error_agg_error_fatal4_sts_b4f21204_error_agg_error_fatal5_sts_799bf567_error_agg_error_fatal6_sts_554d4d0d_error_agg_error_fatal7_sts_5e5cb629_error_agg_error_fatal8_sts_f823a735_error_agg_error_fatal9_sts_63fe0bbb
    class mci_reg__intr_block_t__error1_intr_t_error_agg_error_fatal0_sts_fa132a82_error_agg_error_fatal10_sts_6f865c89_error_agg_error_fatal11_sts_fa6208a0_error_agg_error_fatal12_sts_721d3a75_error_agg_error_fatal13_sts_5c3990f4_error_agg_error_fatal14_sts_a694518f_error_agg_error_fatal15_sts_9f83da34_error_agg_error_fatal16_sts_d2008075_error_agg_error_fatal17_sts_c4477fd6_error_agg_error_fatal18_sts_7e56b5c7_error_agg_error_fatal19_sts_d910ce2f_error_agg_error_fatal1_sts_a502c972_error_agg_error_fatal20_sts_1c366f71_error_agg_error_fatal21_sts_3ffab23c_error_agg_error_fatal22_sts_cf97fe95_error_agg_error_fatal23_sts_b038dc4b_error_agg_error_fatal24_sts_46a7f9f2_error_agg_error_fatal25_sts_d3847056_error_agg_error_fatal26_sts_07ce5573_error_agg_error_fatal27_sts_686337e8_error_agg_error_fatal28_sts_47915955_error_agg_error_fatal29_sts_748fd418_error_agg_error_fatal2_sts_1eed1d52_error_agg_error_fatal30_sts_56c415d2_error_agg_error_fatal31_sts_9c4937bc_error_agg_error_fatal3_sts_7910568d_error_agg_error_fatal4_sts_b4f21204_error_agg_error_fatal5_sts_799bf567_error_agg_error_fatal6_sts_554d4d0d_error_agg_error_fatal7_sts_5e5cb629_error_agg_error_fatal8_sts_f823a735_error_agg_error_fatal9_sts_63fe0bbb extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__error1_intr_t_error_agg_error_fatal0_sts_fa132a82_error_agg_error_fatal10_sts_6f865c89_error_agg_error_fatal11_sts_fa6208a0_error_agg_error_fatal12_sts_721d3a75_error_agg_error_fatal13_sts_5c3990f4_error_agg_error_fatal14_sts_a694518f_error_agg_error_fatal15_sts_9f83da34_error_agg_error_fatal16_sts_d2008075_error_agg_error_fatal17_sts_c4477fd6_error_agg_error_fatal18_sts_7e56b5c7_error_agg_error_fatal19_sts_d910ce2f_error_agg_error_fatal1_sts_a502c972_error_agg_error_fatal20_sts_1c366f71_error_agg_error_fatal21_sts_3ffab23c_error_agg_error_fatal22_sts_cf97fe95_error_agg_error_fatal23_sts_b038dc4b_error_agg_error_fatal24_sts_46a7f9f2_error_agg_error_fatal25_sts_d3847056_error_agg_error_fatal26_sts_07ce5573_error_agg_error_fatal27_sts_686337e8_error_agg_error_fatal28_sts_47915955_error_agg_error_fatal29_sts_748fd418_error_agg_error_fatal2_sts_1eed1d52_error_agg_error_fatal30_sts_56c415d2_error_agg_error_fatal31_sts_9c4937bc_error_agg_error_fatal3_sts_7910568d_error_agg_error_fatal4_sts_b4f21204_error_agg_error_fatal5_sts_799bf567_error_agg_error_fatal6_sts_554d4d0d_error_agg_error_fatal7_sts_5e5cb629_error_agg_error_fatal8_sts_f823a735_error_agg_error_fatal9_sts_63fe0bbb_bit_cg error_agg_error_fatal31_sts_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_t_error_agg_error_fatal0_sts_fa132a82_error_agg_error_fatal10_sts_6f865c89_error_agg_error_fatal11_sts_fa6208a0_error_agg_error_fatal12_sts_721d3a75_error_agg_error_fatal13_sts_5c3990f4_error_agg_error_fatal14_sts_a694518f_error_agg_error_fatal15_sts_9f83da34_error_agg_error_fatal16_sts_d2008075_error_agg_error_fatal17_sts_c4477fd6_error_agg_error_fatal18_sts_7e56b5c7_error_agg_error_fatal19_sts_d910ce2f_error_agg_error_fatal1_sts_a502c972_error_agg_error_fatal20_sts_1c366f71_error_agg_error_fatal21_sts_3ffab23c_error_agg_error_fatal22_sts_cf97fe95_error_agg_error_fatal23_sts_b038dc4b_error_agg_error_fatal24_sts_46a7f9f2_error_agg_error_fatal25_sts_d3847056_error_agg_error_fatal26_sts_07ce5573_error_agg_error_fatal27_sts_686337e8_error_agg_error_fatal28_sts_47915955_error_agg_error_fatal29_sts_748fd418_error_agg_error_fatal2_sts_1eed1d52_error_agg_error_fatal30_sts_56c415d2_error_agg_error_fatal31_sts_9c4937bc_error_agg_error_fatal3_sts_7910568d_error_agg_error_fatal4_sts_b4f21204_error_agg_error_fatal5_sts_799bf567_error_agg_error_fatal6_sts_554d4d0d_error_agg_error_fatal7_sts_5e5cb629_error_agg_error_fatal8_sts_f823a735_error_agg_error_fatal9_sts_63fe0bbb_bit_cg error_agg_error_fatal30_sts_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_t_error_agg_error_fatal0_sts_fa132a82_error_agg_error_fatal10_sts_6f865c89_error_agg_error_fatal11_sts_fa6208a0_error_agg_error_fatal12_sts_721d3a75_error_agg_error_fatal13_sts_5c3990f4_error_agg_error_fatal14_sts_a694518f_error_agg_error_fatal15_sts_9f83da34_error_agg_error_fatal16_sts_d2008075_error_agg_error_fatal17_sts_c4477fd6_error_agg_error_fatal18_sts_7e56b5c7_error_agg_error_fatal19_sts_d910ce2f_error_agg_error_fatal1_sts_a502c972_error_agg_error_fatal20_sts_1c366f71_error_agg_error_fatal21_sts_3ffab23c_error_agg_error_fatal22_sts_cf97fe95_error_agg_error_fatal23_sts_b038dc4b_error_agg_error_fatal24_sts_46a7f9f2_error_agg_error_fatal25_sts_d3847056_error_agg_error_fatal26_sts_07ce5573_error_agg_error_fatal27_sts_686337e8_error_agg_error_fatal28_sts_47915955_error_agg_error_fatal29_sts_748fd418_error_agg_error_fatal2_sts_1eed1d52_error_agg_error_fatal30_sts_56c415d2_error_agg_error_fatal31_sts_9c4937bc_error_agg_error_fatal3_sts_7910568d_error_agg_error_fatal4_sts_b4f21204_error_agg_error_fatal5_sts_799bf567_error_agg_error_fatal6_sts_554d4d0d_error_agg_error_fatal7_sts_5e5cb629_error_agg_error_fatal8_sts_f823a735_error_agg_error_fatal9_sts_63fe0bbb_bit_cg error_agg_error_fatal29_sts_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_t_error_agg_error_fatal0_sts_fa132a82_error_agg_error_fatal10_sts_6f865c89_error_agg_error_fatal11_sts_fa6208a0_error_agg_error_fatal12_sts_721d3a75_error_agg_error_fatal13_sts_5c3990f4_error_agg_error_fatal14_sts_a694518f_error_agg_error_fatal15_sts_9f83da34_error_agg_error_fatal16_sts_d2008075_error_agg_error_fatal17_sts_c4477fd6_error_agg_error_fatal18_sts_7e56b5c7_error_agg_error_fatal19_sts_d910ce2f_error_agg_error_fatal1_sts_a502c972_error_agg_error_fatal20_sts_1c366f71_error_agg_error_fatal21_sts_3ffab23c_error_agg_error_fatal22_sts_cf97fe95_error_agg_error_fatal23_sts_b038dc4b_error_agg_error_fatal24_sts_46a7f9f2_error_agg_error_fatal25_sts_d3847056_error_agg_error_fatal26_sts_07ce5573_error_agg_error_fatal27_sts_686337e8_error_agg_error_fatal28_sts_47915955_error_agg_error_fatal29_sts_748fd418_error_agg_error_fatal2_sts_1eed1d52_error_agg_error_fatal30_sts_56c415d2_error_agg_error_fatal31_sts_9c4937bc_error_agg_error_fatal3_sts_7910568d_error_agg_error_fatal4_sts_b4f21204_error_agg_error_fatal5_sts_799bf567_error_agg_error_fatal6_sts_554d4d0d_error_agg_error_fatal7_sts_5e5cb629_error_agg_error_fatal8_sts_f823a735_error_agg_error_fatal9_sts_63fe0bbb_bit_cg error_agg_error_fatal28_sts_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_t_error_agg_error_fatal0_sts_fa132a82_error_agg_error_fatal10_sts_6f865c89_error_agg_error_fatal11_sts_fa6208a0_error_agg_error_fatal12_sts_721d3a75_error_agg_error_fatal13_sts_5c3990f4_error_agg_error_fatal14_sts_a694518f_error_agg_error_fatal15_sts_9f83da34_error_agg_error_fatal16_sts_d2008075_error_agg_error_fatal17_sts_c4477fd6_error_agg_error_fatal18_sts_7e56b5c7_error_agg_error_fatal19_sts_d910ce2f_error_agg_error_fatal1_sts_a502c972_error_agg_error_fatal20_sts_1c366f71_error_agg_error_fatal21_sts_3ffab23c_error_agg_error_fatal22_sts_cf97fe95_error_agg_error_fatal23_sts_b038dc4b_error_agg_error_fatal24_sts_46a7f9f2_error_agg_error_fatal25_sts_d3847056_error_agg_error_fatal26_sts_07ce5573_error_agg_error_fatal27_sts_686337e8_error_agg_error_fatal28_sts_47915955_error_agg_error_fatal29_sts_748fd418_error_agg_error_fatal2_sts_1eed1d52_error_agg_error_fatal30_sts_56c415d2_error_agg_error_fatal31_sts_9c4937bc_error_agg_error_fatal3_sts_7910568d_error_agg_error_fatal4_sts_b4f21204_error_agg_error_fatal5_sts_799bf567_error_agg_error_fatal6_sts_554d4d0d_error_agg_error_fatal7_sts_5e5cb629_error_agg_error_fatal8_sts_f823a735_error_agg_error_fatal9_sts_63fe0bbb_bit_cg error_agg_error_fatal27_sts_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_t_error_agg_error_fatal0_sts_fa132a82_error_agg_error_fatal10_sts_6f865c89_error_agg_error_fatal11_sts_fa6208a0_error_agg_error_fatal12_sts_721d3a75_error_agg_error_fatal13_sts_5c3990f4_error_agg_error_fatal14_sts_a694518f_error_agg_error_fatal15_sts_9f83da34_error_agg_error_fatal16_sts_d2008075_error_agg_error_fatal17_sts_c4477fd6_error_agg_error_fatal18_sts_7e56b5c7_error_agg_error_fatal19_sts_d910ce2f_error_agg_error_fatal1_sts_a502c972_error_agg_error_fatal20_sts_1c366f71_error_agg_error_fatal21_sts_3ffab23c_error_agg_error_fatal22_sts_cf97fe95_error_agg_error_fatal23_sts_b038dc4b_error_agg_error_fatal24_sts_46a7f9f2_error_agg_error_fatal25_sts_d3847056_error_agg_error_fatal26_sts_07ce5573_error_agg_error_fatal27_sts_686337e8_error_agg_error_fatal28_sts_47915955_error_agg_error_fatal29_sts_748fd418_error_agg_error_fatal2_sts_1eed1d52_error_agg_error_fatal30_sts_56c415d2_error_agg_error_fatal31_sts_9c4937bc_error_agg_error_fatal3_sts_7910568d_error_agg_error_fatal4_sts_b4f21204_error_agg_error_fatal5_sts_799bf567_error_agg_error_fatal6_sts_554d4d0d_error_agg_error_fatal7_sts_5e5cb629_error_agg_error_fatal8_sts_f823a735_error_agg_error_fatal9_sts_63fe0bbb_bit_cg error_agg_error_fatal26_sts_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_t_error_agg_error_fatal0_sts_fa132a82_error_agg_error_fatal10_sts_6f865c89_error_agg_error_fatal11_sts_fa6208a0_error_agg_error_fatal12_sts_721d3a75_error_agg_error_fatal13_sts_5c3990f4_error_agg_error_fatal14_sts_a694518f_error_agg_error_fatal15_sts_9f83da34_error_agg_error_fatal16_sts_d2008075_error_agg_error_fatal17_sts_c4477fd6_error_agg_error_fatal18_sts_7e56b5c7_error_agg_error_fatal19_sts_d910ce2f_error_agg_error_fatal1_sts_a502c972_error_agg_error_fatal20_sts_1c366f71_error_agg_error_fatal21_sts_3ffab23c_error_agg_error_fatal22_sts_cf97fe95_error_agg_error_fatal23_sts_b038dc4b_error_agg_error_fatal24_sts_46a7f9f2_error_agg_error_fatal25_sts_d3847056_error_agg_error_fatal26_sts_07ce5573_error_agg_error_fatal27_sts_686337e8_error_agg_error_fatal28_sts_47915955_error_agg_error_fatal29_sts_748fd418_error_agg_error_fatal2_sts_1eed1d52_error_agg_error_fatal30_sts_56c415d2_error_agg_error_fatal31_sts_9c4937bc_error_agg_error_fatal3_sts_7910568d_error_agg_error_fatal4_sts_b4f21204_error_agg_error_fatal5_sts_799bf567_error_agg_error_fatal6_sts_554d4d0d_error_agg_error_fatal7_sts_5e5cb629_error_agg_error_fatal8_sts_f823a735_error_agg_error_fatal9_sts_63fe0bbb_bit_cg error_agg_error_fatal25_sts_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_t_error_agg_error_fatal0_sts_fa132a82_error_agg_error_fatal10_sts_6f865c89_error_agg_error_fatal11_sts_fa6208a0_error_agg_error_fatal12_sts_721d3a75_error_agg_error_fatal13_sts_5c3990f4_error_agg_error_fatal14_sts_a694518f_error_agg_error_fatal15_sts_9f83da34_error_agg_error_fatal16_sts_d2008075_error_agg_error_fatal17_sts_c4477fd6_error_agg_error_fatal18_sts_7e56b5c7_error_agg_error_fatal19_sts_d910ce2f_error_agg_error_fatal1_sts_a502c972_error_agg_error_fatal20_sts_1c366f71_error_agg_error_fatal21_sts_3ffab23c_error_agg_error_fatal22_sts_cf97fe95_error_agg_error_fatal23_sts_b038dc4b_error_agg_error_fatal24_sts_46a7f9f2_error_agg_error_fatal25_sts_d3847056_error_agg_error_fatal26_sts_07ce5573_error_agg_error_fatal27_sts_686337e8_error_agg_error_fatal28_sts_47915955_error_agg_error_fatal29_sts_748fd418_error_agg_error_fatal2_sts_1eed1d52_error_agg_error_fatal30_sts_56c415d2_error_agg_error_fatal31_sts_9c4937bc_error_agg_error_fatal3_sts_7910568d_error_agg_error_fatal4_sts_b4f21204_error_agg_error_fatal5_sts_799bf567_error_agg_error_fatal6_sts_554d4d0d_error_agg_error_fatal7_sts_5e5cb629_error_agg_error_fatal8_sts_f823a735_error_agg_error_fatal9_sts_63fe0bbb_bit_cg error_agg_error_fatal24_sts_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_t_error_agg_error_fatal0_sts_fa132a82_error_agg_error_fatal10_sts_6f865c89_error_agg_error_fatal11_sts_fa6208a0_error_agg_error_fatal12_sts_721d3a75_error_agg_error_fatal13_sts_5c3990f4_error_agg_error_fatal14_sts_a694518f_error_agg_error_fatal15_sts_9f83da34_error_agg_error_fatal16_sts_d2008075_error_agg_error_fatal17_sts_c4477fd6_error_agg_error_fatal18_sts_7e56b5c7_error_agg_error_fatal19_sts_d910ce2f_error_agg_error_fatal1_sts_a502c972_error_agg_error_fatal20_sts_1c366f71_error_agg_error_fatal21_sts_3ffab23c_error_agg_error_fatal22_sts_cf97fe95_error_agg_error_fatal23_sts_b038dc4b_error_agg_error_fatal24_sts_46a7f9f2_error_agg_error_fatal25_sts_d3847056_error_agg_error_fatal26_sts_07ce5573_error_agg_error_fatal27_sts_686337e8_error_agg_error_fatal28_sts_47915955_error_agg_error_fatal29_sts_748fd418_error_agg_error_fatal2_sts_1eed1d52_error_agg_error_fatal30_sts_56c415d2_error_agg_error_fatal31_sts_9c4937bc_error_agg_error_fatal3_sts_7910568d_error_agg_error_fatal4_sts_b4f21204_error_agg_error_fatal5_sts_799bf567_error_agg_error_fatal6_sts_554d4d0d_error_agg_error_fatal7_sts_5e5cb629_error_agg_error_fatal8_sts_f823a735_error_agg_error_fatal9_sts_63fe0bbb_bit_cg error_agg_error_fatal23_sts_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_t_error_agg_error_fatal0_sts_fa132a82_error_agg_error_fatal10_sts_6f865c89_error_agg_error_fatal11_sts_fa6208a0_error_agg_error_fatal12_sts_721d3a75_error_agg_error_fatal13_sts_5c3990f4_error_agg_error_fatal14_sts_a694518f_error_agg_error_fatal15_sts_9f83da34_error_agg_error_fatal16_sts_d2008075_error_agg_error_fatal17_sts_c4477fd6_error_agg_error_fatal18_sts_7e56b5c7_error_agg_error_fatal19_sts_d910ce2f_error_agg_error_fatal1_sts_a502c972_error_agg_error_fatal20_sts_1c366f71_error_agg_error_fatal21_sts_3ffab23c_error_agg_error_fatal22_sts_cf97fe95_error_agg_error_fatal23_sts_b038dc4b_error_agg_error_fatal24_sts_46a7f9f2_error_agg_error_fatal25_sts_d3847056_error_agg_error_fatal26_sts_07ce5573_error_agg_error_fatal27_sts_686337e8_error_agg_error_fatal28_sts_47915955_error_agg_error_fatal29_sts_748fd418_error_agg_error_fatal2_sts_1eed1d52_error_agg_error_fatal30_sts_56c415d2_error_agg_error_fatal31_sts_9c4937bc_error_agg_error_fatal3_sts_7910568d_error_agg_error_fatal4_sts_b4f21204_error_agg_error_fatal5_sts_799bf567_error_agg_error_fatal6_sts_554d4d0d_error_agg_error_fatal7_sts_5e5cb629_error_agg_error_fatal8_sts_f823a735_error_agg_error_fatal9_sts_63fe0bbb_bit_cg error_agg_error_fatal22_sts_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_t_error_agg_error_fatal0_sts_fa132a82_error_agg_error_fatal10_sts_6f865c89_error_agg_error_fatal11_sts_fa6208a0_error_agg_error_fatal12_sts_721d3a75_error_agg_error_fatal13_sts_5c3990f4_error_agg_error_fatal14_sts_a694518f_error_agg_error_fatal15_sts_9f83da34_error_agg_error_fatal16_sts_d2008075_error_agg_error_fatal17_sts_c4477fd6_error_agg_error_fatal18_sts_7e56b5c7_error_agg_error_fatal19_sts_d910ce2f_error_agg_error_fatal1_sts_a502c972_error_agg_error_fatal20_sts_1c366f71_error_agg_error_fatal21_sts_3ffab23c_error_agg_error_fatal22_sts_cf97fe95_error_agg_error_fatal23_sts_b038dc4b_error_agg_error_fatal24_sts_46a7f9f2_error_agg_error_fatal25_sts_d3847056_error_agg_error_fatal26_sts_07ce5573_error_agg_error_fatal27_sts_686337e8_error_agg_error_fatal28_sts_47915955_error_agg_error_fatal29_sts_748fd418_error_agg_error_fatal2_sts_1eed1d52_error_agg_error_fatal30_sts_56c415d2_error_agg_error_fatal31_sts_9c4937bc_error_agg_error_fatal3_sts_7910568d_error_agg_error_fatal4_sts_b4f21204_error_agg_error_fatal5_sts_799bf567_error_agg_error_fatal6_sts_554d4d0d_error_agg_error_fatal7_sts_5e5cb629_error_agg_error_fatal8_sts_f823a735_error_agg_error_fatal9_sts_63fe0bbb_bit_cg error_agg_error_fatal21_sts_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_t_error_agg_error_fatal0_sts_fa132a82_error_agg_error_fatal10_sts_6f865c89_error_agg_error_fatal11_sts_fa6208a0_error_agg_error_fatal12_sts_721d3a75_error_agg_error_fatal13_sts_5c3990f4_error_agg_error_fatal14_sts_a694518f_error_agg_error_fatal15_sts_9f83da34_error_agg_error_fatal16_sts_d2008075_error_agg_error_fatal17_sts_c4477fd6_error_agg_error_fatal18_sts_7e56b5c7_error_agg_error_fatal19_sts_d910ce2f_error_agg_error_fatal1_sts_a502c972_error_agg_error_fatal20_sts_1c366f71_error_agg_error_fatal21_sts_3ffab23c_error_agg_error_fatal22_sts_cf97fe95_error_agg_error_fatal23_sts_b038dc4b_error_agg_error_fatal24_sts_46a7f9f2_error_agg_error_fatal25_sts_d3847056_error_agg_error_fatal26_sts_07ce5573_error_agg_error_fatal27_sts_686337e8_error_agg_error_fatal28_sts_47915955_error_agg_error_fatal29_sts_748fd418_error_agg_error_fatal2_sts_1eed1d52_error_agg_error_fatal30_sts_56c415d2_error_agg_error_fatal31_sts_9c4937bc_error_agg_error_fatal3_sts_7910568d_error_agg_error_fatal4_sts_b4f21204_error_agg_error_fatal5_sts_799bf567_error_agg_error_fatal6_sts_554d4d0d_error_agg_error_fatal7_sts_5e5cb629_error_agg_error_fatal8_sts_f823a735_error_agg_error_fatal9_sts_63fe0bbb_bit_cg error_agg_error_fatal20_sts_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_t_error_agg_error_fatal0_sts_fa132a82_error_agg_error_fatal10_sts_6f865c89_error_agg_error_fatal11_sts_fa6208a0_error_agg_error_fatal12_sts_721d3a75_error_agg_error_fatal13_sts_5c3990f4_error_agg_error_fatal14_sts_a694518f_error_agg_error_fatal15_sts_9f83da34_error_agg_error_fatal16_sts_d2008075_error_agg_error_fatal17_sts_c4477fd6_error_agg_error_fatal18_sts_7e56b5c7_error_agg_error_fatal19_sts_d910ce2f_error_agg_error_fatal1_sts_a502c972_error_agg_error_fatal20_sts_1c366f71_error_agg_error_fatal21_sts_3ffab23c_error_agg_error_fatal22_sts_cf97fe95_error_agg_error_fatal23_sts_b038dc4b_error_agg_error_fatal24_sts_46a7f9f2_error_agg_error_fatal25_sts_d3847056_error_agg_error_fatal26_sts_07ce5573_error_agg_error_fatal27_sts_686337e8_error_agg_error_fatal28_sts_47915955_error_agg_error_fatal29_sts_748fd418_error_agg_error_fatal2_sts_1eed1d52_error_agg_error_fatal30_sts_56c415d2_error_agg_error_fatal31_sts_9c4937bc_error_agg_error_fatal3_sts_7910568d_error_agg_error_fatal4_sts_b4f21204_error_agg_error_fatal5_sts_799bf567_error_agg_error_fatal6_sts_554d4d0d_error_agg_error_fatal7_sts_5e5cb629_error_agg_error_fatal8_sts_f823a735_error_agg_error_fatal9_sts_63fe0bbb_bit_cg error_agg_error_fatal19_sts_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_t_error_agg_error_fatal0_sts_fa132a82_error_agg_error_fatal10_sts_6f865c89_error_agg_error_fatal11_sts_fa6208a0_error_agg_error_fatal12_sts_721d3a75_error_agg_error_fatal13_sts_5c3990f4_error_agg_error_fatal14_sts_a694518f_error_agg_error_fatal15_sts_9f83da34_error_agg_error_fatal16_sts_d2008075_error_agg_error_fatal17_sts_c4477fd6_error_agg_error_fatal18_sts_7e56b5c7_error_agg_error_fatal19_sts_d910ce2f_error_agg_error_fatal1_sts_a502c972_error_agg_error_fatal20_sts_1c366f71_error_agg_error_fatal21_sts_3ffab23c_error_agg_error_fatal22_sts_cf97fe95_error_agg_error_fatal23_sts_b038dc4b_error_agg_error_fatal24_sts_46a7f9f2_error_agg_error_fatal25_sts_d3847056_error_agg_error_fatal26_sts_07ce5573_error_agg_error_fatal27_sts_686337e8_error_agg_error_fatal28_sts_47915955_error_agg_error_fatal29_sts_748fd418_error_agg_error_fatal2_sts_1eed1d52_error_agg_error_fatal30_sts_56c415d2_error_agg_error_fatal31_sts_9c4937bc_error_agg_error_fatal3_sts_7910568d_error_agg_error_fatal4_sts_b4f21204_error_agg_error_fatal5_sts_799bf567_error_agg_error_fatal6_sts_554d4d0d_error_agg_error_fatal7_sts_5e5cb629_error_agg_error_fatal8_sts_f823a735_error_agg_error_fatal9_sts_63fe0bbb_bit_cg error_agg_error_fatal18_sts_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_t_error_agg_error_fatal0_sts_fa132a82_error_agg_error_fatal10_sts_6f865c89_error_agg_error_fatal11_sts_fa6208a0_error_agg_error_fatal12_sts_721d3a75_error_agg_error_fatal13_sts_5c3990f4_error_agg_error_fatal14_sts_a694518f_error_agg_error_fatal15_sts_9f83da34_error_agg_error_fatal16_sts_d2008075_error_agg_error_fatal17_sts_c4477fd6_error_agg_error_fatal18_sts_7e56b5c7_error_agg_error_fatal19_sts_d910ce2f_error_agg_error_fatal1_sts_a502c972_error_agg_error_fatal20_sts_1c366f71_error_agg_error_fatal21_sts_3ffab23c_error_agg_error_fatal22_sts_cf97fe95_error_agg_error_fatal23_sts_b038dc4b_error_agg_error_fatal24_sts_46a7f9f2_error_agg_error_fatal25_sts_d3847056_error_agg_error_fatal26_sts_07ce5573_error_agg_error_fatal27_sts_686337e8_error_agg_error_fatal28_sts_47915955_error_agg_error_fatal29_sts_748fd418_error_agg_error_fatal2_sts_1eed1d52_error_agg_error_fatal30_sts_56c415d2_error_agg_error_fatal31_sts_9c4937bc_error_agg_error_fatal3_sts_7910568d_error_agg_error_fatal4_sts_b4f21204_error_agg_error_fatal5_sts_799bf567_error_agg_error_fatal6_sts_554d4d0d_error_agg_error_fatal7_sts_5e5cb629_error_agg_error_fatal8_sts_f823a735_error_agg_error_fatal9_sts_63fe0bbb_bit_cg error_agg_error_fatal17_sts_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_t_error_agg_error_fatal0_sts_fa132a82_error_agg_error_fatal10_sts_6f865c89_error_agg_error_fatal11_sts_fa6208a0_error_agg_error_fatal12_sts_721d3a75_error_agg_error_fatal13_sts_5c3990f4_error_agg_error_fatal14_sts_a694518f_error_agg_error_fatal15_sts_9f83da34_error_agg_error_fatal16_sts_d2008075_error_agg_error_fatal17_sts_c4477fd6_error_agg_error_fatal18_sts_7e56b5c7_error_agg_error_fatal19_sts_d910ce2f_error_agg_error_fatal1_sts_a502c972_error_agg_error_fatal20_sts_1c366f71_error_agg_error_fatal21_sts_3ffab23c_error_agg_error_fatal22_sts_cf97fe95_error_agg_error_fatal23_sts_b038dc4b_error_agg_error_fatal24_sts_46a7f9f2_error_agg_error_fatal25_sts_d3847056_error_agg_error_fatal26_sts_07ce5573_error_agg_error_fatal27_sts_686337e8_error_agg_error_fatal28_sts_47915955_error_agg_error_fatal29_sts_748fd418_error_agg_error_fatal2_sts_1eed1d52_error_agg_error_fatal30_sts_56c415d2_error_agg_error_fatal31_sts_9c4937bc_error_agg_error_fatal3_sts_7910568d_error_agg_error_fatal4_sts_b4f21204_error_agg_error_fatal5_sts_799bf567_error_agg_error_fatal6_sts_554d4d0d_error_agg_error_fatal7_sts_5e5cb629_error_agg_error_fatal8_sts_f823a735_error_agg_error_fatal9_sts_63fe0bbb_bit_cg error_agg_error_fatal16_sts_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_t_error_agg_error_fatal0_sts_fa132a82_error_agg_error_fatal10_sts_6f865c89_error_agg_error_fatal11_sts_fa6208a0_error_agg_error_fatal12_sts_721d3a75_error_agg_error_fatal13_sts_5c3990f4_error_agg_error_fatal14_sts_a694518f_error_agg_error_fatal15_sts_9f83da34_error_agg_error_fatal16_sts_d2008075_error_agg_error_fatal17_sts_c4477fd6_error_agg_error_fatal18_sts_7e56b5c7_error_agg_error_fatal19_sts_d910ce2f_error_agg_error_fatal1_sts_a502c972_error_agg_error_fatal20_sts_1c366f71_error_agg_error_fatal21_sts_3ffab23c_error_agg_error_fatal22_sts_cf97fe95_error_agg_error_fatal23_sts_b038dc4b_error_agg_error_fatal24_sts_46a7f9f2_error_agg_error_fatal25_sts_d3847056_error_agg_error_fatal26_sts_07ce5573_error_agg_error_fatal27_sts_686337e8_error_agg_error_fatal28_sts_47915955_error_agg_error_fatal29_sts_748fd418_error_agg_error_fatal2_sts_1eed1d52_error_agg_error_fatal30_sts_56c415d2_error_agg_error_fatal31_sts_9c4937bc_error_agg_error_fatal3_sts_7910568d_error_agg_error_fatal4_sts_b4f21204_error_agg_error_fatal5_sts_799bf567_error_agg_error_fatal6_sts_554d4d0d_error_agg_error_fatal7_sts_5e5cb629_error_agg_error_fatal8_sts_f823a735_error_agg_error_fatal9_sts_63fe0bbb_bit_cg error_agg_error_fatal15_sts_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_t_error_agg_error_fatal0_sts_fa132a82_error_agg_error_fatal10_sts_6f865c89_error_agg_error_fatal11_sts_fa6208a0_error_agg_error_fatal12_sts_721d3a75_error_agg_error_fatal13_sts_5c3990f4_error_agg_error_fatal14_sts_a694518f_error_agg_error_fatal15_sts_9f83da34_error_agg_error_fatal16_sts_d2008075_error_agg_error_fatal17_sts_c4477fd6_error_agg_error_fatal18_sts_7e56b5c7_error_agg_error_fatal19_sts_d910ce2f_error_agg_error_fatal1_sts_a502c972_error_agg_error_fatal20_sts_1c366f71_error_agg_error_fatal21_sts_3ffab23c_error_agg_error_fatal22_sts_cf97fe95_error_agg_error_fatal23_sts_b038dc4b_error_agg_error_fatal24_sts_46a7f9f2_error_agg_error_fatal25_sts_d3847056_error_agg_error_fatal26_sts_07ce5573_error_agg_error_fatal27_sts_686337e8_error_agg_error_fatal28_sts_47915955_error_agg_error_fatal29_sts_748fd418_error_agg_error_fatal2_sts_1eed1d52_error_agg_error_fatal30_sts_56c415d2_error_agg_error_fatal31_sts_9c4937bc_error_agg_error_fatal3_sts_7910568d_error_agg_error_fatal4_sts_b4f21204_error_agg_error_fatal5_sts_799bf567_error_agg_error_fatal6_sts_554d4d0d_error_agg_error_fatal7_sts_5e5cb629_error_agg_error_fatal8_sts_f823a735_error_agg_error_fatal9_sts_63fe0bbb_bit_cg error_agg_error_fatal14_sts_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_t_error_agg_error_fatal0_sts_fa132a82_error_agg_error_fatal10_sts_6f865c89_error_agg_error_fatal11_sts_fa6208a0_error_agg_error_fatal12_sts_721d3a75_error_agg_error_fatal13_sts_5c3990f4_error_agg_error_fatal14_sts_a694518f_error_agg_error_fatal15_sts_9f83da34_error_agg_error_fatal16_sts_d2008075_error_agg_error_fatal17_sts_c4477fd6_error_agg_error_fatal18_sts_7e56b5c7_error_agg_error_fatal19_sts_d910ce2f_error_agg_error_fatal1_sts_a502c972_error_agg_error_fatal20_sts_1c366f71_error_agg_error_fatal21_sts_3ffab23c_error_agg_error_fatal22_sts_cf97fe95_error_agg_error_fatal23_sts_b038dc4b_error_agg_error_fatal24_sts_46a7f9f2_error_agg_error_fatal25_sts_d3847056_error_agg_error_fatal26_sts_07ce5573_error_agg_error_fatal27_sts_686337e8_error_agg_error_fatal28_sts_47915955_error_agg_error_fatal29_sts_748fd418_error_agg_error_fatal2_sts_1eed1d52_error_agg_error_fatal30_sts_56c415d2_error_agg_error_fatal31_sts_9c4937bc_error_agg_error_fatal3_sts_7910568d_error_agg_error_fatal4_sts_b4f21204_error_agg_error_fatal5_sts_799bf567_error_agg_error_fatal6_sts_554d4d0d_error_agg_error_fatal7_sts_5e5cb629_error_agg_error_fatal8_sts_f823a735_error_agg_error_fatal9_sts_63fe0bbb_bit_cg error_agg_error_fatal13_sts_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_t_error_agg_error_fatal0_sts_fa132a82_error_agg_error_fatal10_sts_6f865c89_error_agg_error_fatal11_sts_fa6208a0_error_agg_error_fatal12_sts_721d3a75_error_agg_error_fatal13_sts_5c3990f4_error_agg_error_fatal14_sts_a694518f_error_agg_error_fatal15_sts_9f83da34_error_agg_error_fatal16_sts_d2008075_error_agg_error_fatal17_sts_c4477fd6_error_agg_error_fatal18_sts_7e56b5c7_error_agg_error_fatal19_sts_d910ce2f_error_agg_error_fatal1_sts_a502c972_error_agg_error_fatal20_sts_1c366f71_error_agg_error_fatal21_sts_3ffab23c_error_agg_error_fatal22_sts_cf97fe95_error_agg_error_fatal23_sts_b038dc4b_error_agg_error_fatal24_sts_46a7f9f2_error_agg_error_fatal25_sts_d3847056_error_agg_error_fatal26_sts_07ce5573_error_agg_error_fatal27_sts_686337e8_error_agg_error_fatal28_sts_47915955_error_agg_error_fatal29_sts_748fd418_error_agg_error_fatal2_sts_1eed1d52_error_agg_error_fatal30_sts_56c415d2_error_agg_error_fatal31_sts_9c4937bc_error_agg_error_fatal3_sts_7910568d_error_agg_error_fatal4_sts_b4f21204_error_agg_error_fatal5_sts_799bf567_error_agg_error_fatal6_sts_554d4d0d_error_agg_error_fatal7_sts_5e5cb629_error_agg_error_fatal8_sts_f823a735_error_agg_error_fatal9_sts_63fe0bbb_bit_cg error_agg_error_fatal12_sts_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_t_error_agg_error_fatal0_sts_fa132a82_error_agg_error_fatal10_sts_6f865c89_error_agg_error_fatal11_sts_fa6208a0_error_agg_error_fatal12_sts_721d3a75_error_agg_error_fatal13_sts_5c3990f4_error_agg_error_fatal14_sts_a694518f_error_agg_error_fatal15_sts_9f83da34_error_agg_error_fatal16_sts_d2008075_error_agg_error_fatal17_sts_c4477fd6_error_agg_error_fatal18_sts_7e56b5c7_error_agg_error_fatal19_sts_d910ce2f_error_agg_error_fatal1_sts_a502c972_error_agg_error_fatal20_sts_1c366f71_error_agg_error_fatal21_sts_3ffab23c_error_agg_error_fatal22_sts_cf97fe95_error_agg_error_fatal23_sts_b038dc4b_error_agg_error_fatal24_sts_46a7f9f2_error_agg_error_fatal25_sts_d3847056_error_agg_error_fatal26_sts_07ce5573_error_agg_error_fatal27_sts_686337e8_error_agg_error_fatal28_sts_47915955_error_agg_error_fatal29_sts_748fd418_error_agg_error_fatal2_sts_1eed1d52_error_agg_error_fatal30_sts_56c415d2_error_agg_error_fatal31_sts_9c4937bc_error_agg_error_fatal3_sts_7910568d_error_agg_error_fatal4_sts_b4f21204_error_agg_error_fatal5_sts_799bf567_error_agg_error_fatal6_sts_554d4d0d_error_agg_error_fatal7_sts_5e5cb629_error_agg_error_fatal8_sts_f823a735_error_agg_error_fatal9_sts_63fe0bbb_bit_cg error_agg_error_fatal11_sts_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_t_error_agg_error_fatal0_sts_fa132a82_error_agg_error_fatal10_sts_6f865c89_error_agg_error_fatal11_sts_fa6208a0_error_agg_error_fatal12_sts_721d3a75_error_agg_error_fatal13_sts_5c3990f4_error_agg_error_fatal14_sts_a694518f_error_agg_error_fatal15_sts_9f83da34_error_agg_error_fatal16_sts_d2008075_error_agg_error_fatal17_sts_c4477fd6_error_agg_error_fatal18_sts_7e56b5c7_error_agg_error_fatal19_sts_d910ce2f_error_agg_error_fatal1_sts_a502c972_error_agg_error_fatal20_sts_1c366f71_error_agg_error_fatal21_sts_3ffab23c_error_agg_error_fatal22_sts_cf97fe95_error_agg_error_fatal23_sts_b038dc4b_error_agg_error_fatal24_sts_46a7f9f2_error_agg_error_fatal25_sts_d3847056_error_agg_error_fatal26_sts_07ce5573_error_agg_error_fatal27_sts_686337e8_error_agg_error_fatal28_sts_47915955_error_agg_error_fatal29_sts_748fd418_error_agg_error_fatal2_sts_1eed1d52_error_agg_error_fatal30_sts_56c415d2_error_agg_error_fatal31_sts_9c4937bc_error_agg_error_fatal3_sts_7910568d_error_agg_error_fatal4_sts_b4f21204_error_agg_error_fatal5_sts_799bf567_error_agg_error_fatal6_sts_554d4d0d_error_agg_error_fatal7_sts_5e5cb629_error_agg_error_fatal8_sts_f823a735_error_agg_error_fatal9_sts_63fe0bbb_bit_cg error_agg_error_fatal10_sts_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_t_error_agg_error_fatal0_sts_fa132a82_error_agg_error_fatal10_sts_6f865c89_error_agg_error_fatal11_sts_fa6208a0_error_agg_error_fatal12_sts_721d3a75_error_agg_error_fatal13_sts_5c3990f4_error_agg_error_fatal14_sts_a694518f_error_agg_error_fatal15_sts_9f83da34_error_agg_error_fatal16_sts_d2008075_error_agg_error_fatal17_sts_c4477fd6_error_agg_error_fatal18_sts_7e56b5c7_error_agg_error_fatal19_sts_d910ce2f_error_agg_error_fatal1_sts_a502c972_error_agg_error_fatal20_sts_1c366f71_error_agg_error_fatal21_sts_3ffab23c_error_agg_error_fatal22_sts_cf97fe95_error_agg_error_fatal23_sts_b038dc4b_error_agg_error_fatal24_sts_46a7f9f2_error_agg_error_fatal25_sts_d3847056_error_agg_error_fatal26_sts_07ce5573_error_agg_error_fatal27_sts_686337e8_error_agg_error_fatal28_sts_47915955_error_agg_error_fatal29_sts_748fd418_error_agg_error_fatal2_sts_1eed1d52_error_agg_error_fatal30_sts_56c415d2_error_agg_error_fatal31_sts_9c4937bc_error_agg_error_fatal3_sts_7910568d_error_agg_error_fatal4_sts_b4f21204_error_agg_error_fatal5_sts_799bf567_error_agg_error_fatal6_sts_554d4d0d_error_agg_error_fatal7_sts_5e5cb629_error_agg_error_fatal8_sts_f823a735_error_agg_error_fatal9_sts_63fe0bbb_bit_cg error_agg_error_fatal9_sts_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_t_error_agg_error_fatal0_sts_fa132a82_error_agg_error_fatal10_sts_6f865c89_error_agg_error_fatal11_sts_fa6208a0_error_agg_error_fatal12_sts_721d3a75_error_agg_error_fatal13_sts_5c3990f4_error_agg_error_fatal14_sts_a694518f_error_agg_error_fatal15_sts_9f83da34_error_agg_error_fatal16_sts_d2008075_error_agg_error_fatal17_sts_c4477fd6_error_agg_error_fatal18_sts_7e56b5c7_error_agg_error_fatal19_sts_d910ce2f_error_agg_error_fatal1_sts_a502c972_error_agg_error_fatal20_sts_1c366f71_error_agg_error_fatal21_sts_3ffab23c_error_agg_error_fatal22_sts_cf97fe95_error_agg_error_fatal23_sts_b038dc4b_error_agg_error_fatal24_sts_46a7f9f2_error_agg_error_fatal25_sts_d3847056_error_agg_error_fatal26_sts_07ce5573_error_agg_error_fatal27_sts_686337e8_error_agg_error_fatal28_sts_47915955_error_agg_error_fatal29_sts_748fd418_error_agg_error_fatal2_sts_1eed1d52_error_agg_error_fatal30_sts_56c415d2_error_agg_error_fatal31_sts_9c4937bc_error_agg_error_fatal3_sts_7910568d_error_agg_error_fatal4_sts_b4f21204_error_agg_error_fatal5_sts_799bf567_error_agg_error_fatal6_sts_554d4d0d_error_agg_error_fatal7_sts_5e5cb629_error_agg_error_fatal8_sts_f823a735_error_agg_error_fatal9_sts_63fe0bbb_bit_cg error_agg_error_fatal8_sts_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_t_error_agg_error_fatal0_sts_fa132a82_error_agg_error_fatal10_sts_6f865c89_error_agg_error_fatal11_sts_fa6208a0_error_agg_error_fatal12_sts_721d3a75_error_agg_error_fatal13_sts_5c3990f4_error_agg_error_fatal14_sts_a694518f_error_agg_error_fatal15_sts_9f83da34_error_agg_error_fatal16_sts_d2008075_error_agg_error_fatal17_sts_c4477fd6_error_agg_error_fatal18_sts_7e56b5c7_error_agg_error_fatal19_sts_d910ce2f_error_agg_error_fatal1_sts_a502c972_error_agg_error_fatal20_sts_1c366f71_error_agg_error_fatal21_sts_3ffab23c_error_agg_error_fatal22_sts_cf97fe95_error_agg_error_fatal23_sts_b038dc4b_error_agg_error_fatal24_sts_46a7f9f2_error_agg_error_fatal25_sts_d3847056_error_agg_error_fatal26_sts_07ce5573_error_agg_error_fatal27_sts_686337e8_error_agg_error_fatal28_sts_47915955_error_agg_error_fatal29_sts_748fd418_error_agg_error_fatal2_sts_1eed1d52_error_agg_error_fatal30_sts_56c415d2_error_agg_error_fatal31_sts_9c4937bc_error_agg_error_fatal3_sts_7910568d_error_agg_error_fatal4_sts_b4f21204_error_agg_error_fatal5_sts_799bf567_error_agg_error_fatal6_sts_554d4d0d_error_agg_error_fatal7_sts_5e5cb629_error_agg_error_fatal8_sts_f823a735_error_agg_error_fatal9_sts_63fe0bbb_bit_cg error_agg_error_fatal7_sts_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_t_error_agg_error_fatal0_sts_fa132a82_error_agg_error_fatal10_sts_6f865c89_error_agg_error_fatal11_sts_fa6208a0_error_agg_error_fatal12_sts_721d3a75_error_agg_error_fatal13_sts_5c3990f4_error_agg_error_fatal14_sts_a694518f_error_agg_error_fatal15_sts_9f83da34_error_agg_error_fatal16_sts_d2008075_error_agg_error_fatal17_sts_c4477fd6_error_agg_error_fatal18_sts_7e56b5c7_error_agg_error_fatal19_sts_d910ce2f_error_agg_error_fatal1_sts_a502c972_error_agg_error_fatal20_sts_1c366f71_error_agg_error_fatal21_sts_3ffab23c_error_agg_error_fatal22_sts_cf97fe95_error_agg_error_fatal23_sts_b038dc4b_error_agg_error_fatal24_sts_46a7f9f2_error_agg_error_fatal25_sts_d3847056_error_agg_error_fatal26_sts_07ce5573_error_agg_error_fatal27_sts_686337e8_error_agg_error_fatal28_sts_47915955_error_agg_error_fatal29_sts_748fd418_error_agg_error_fatal2_sts_1eed1d52_error_agg_error_fatal30_sts_56c415d2_error_agg_error_fatal31_sts_9c4937bc_error_agg_error_fatal3_sts_7910568d_error_agg_error_fatal4_sts_b4f21204_error_agg_error_fatal5_sts_799bf567_error_agg_error_fatal6_sts_554d4d0d_error_agg_error_fatal7_sts_5e5cb629_error_agg_error_fatal8_sts_f823a735_error_agg_error_fatal9_sts_63fe0bbb_bit_cg error_agg_error_fatal6_sts_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_t_error_agg_error_fatal0_sts_fa132a82_error_agg_error_fatal10_sts_6f865c89_error_agg_error_fatal11_sts_fa6208a0_error_agg_error_fatal12_sts_721d3a75_error_agg_error_fatal13_sts_5c3990f4_error_agg_error_fatal14_sts_a694518f_error_agg_error_fatal15_sts_9f83da34_error_agg_error_fatal16_sts_d2008075_error_agg_error_fatal17_sts_c4477fd6_error_agg_error_fatal18_sts_7e56b5c7_error_agg_error_fatal19_sts_d910ce2f_error_agg_error_fatal1_sts_a502c972_error_agg_error_fatal20_sts_1c366f71_error_agg_error_fatal21_sts_3ffab23c_error_agg_error_fatal22_sts_cf97fe95_error_agg_error_fatal23_sts_b038dc4b_error_agg_error_fatal24_sts_46a7f9f2_error_agg_error_fatal25_sts_d3847056_error_agg_error_fatal26_sts_07ce5573_error_agg_error_fatal27_sts_686337e8_error_agg_error_fatal28_sts_47915955_error_agg_error_fatal29_sts_748fd418_error_agg_error_fatal2_sts_1eed1d52_error_agg_error_fatal30_sts_56c415d2_error_agg_error_fatal31_sts_9c4937bc_error_agg_error_fatal3_sts_7910568d_error_agg_error_fatal4_sts_b4f21204_error_agg_error_fatal5_sts_799bf567_error_agg_error_fatal6_sts_554d4d0d_error_agg_error_fatal7_sts_5e5cb629_error_agg_error_fatal8_sts_f823a735_error_agg_error_fatal9_sts_63fe0bbb_bit_cg error_agg_error_fatal5_sts_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_t_error_agg_error_fatal0_sts_fa132a82_error_agg_error_fatal10_sts_6f865c89_error_agg_error_fatal11_sts_fa6208a0_error_agg_error_fatal12_sts_721d3a75_error_agg_error_fatal13_sts_5c3990f4_error_agg_error_fatal14_sts_a694518f_error_agg_error_fatal15_sts_9f83da34_error_agg_error_fatal16_sts_d2008075_error_agg_error_fatal17_sts_c4477fd6_error_agg_error_fatal18_sts_7e56b5c7_error_agg_error_fatal19_sts_d910ce2f_error_agg_error_fatal1_sts_a502c972_error_agg_error_fatal20_sts_1c366f71_error_agg_error_fatal21_sts_3ffab23c_error_agg_error_fatal22_sts_cf97fe95_error_agg_error_fatal23_sts_b038dc4b_error_agg_error_fatal24_sts_46a7f9f2_error_agg_error_fatal25_sts_d3847056_error_agg_error_fatal26_sts_07ce5573_error_agg_error_fatal27_sts_686337e8_error_agg_error_fatal28_sts_47915955_error_agg_error_fatal29_sts_748fd418_error_agg_error_fatal2_sts_1eed1d52_error_agg_error_fatal30_sts_56c415d2_error_agg_error_fatal31_sts_9c4937bc_error_agg_error_fatal3_sts_7910568d_error_agg_error_fatal4_sts_b4f21204_error_agg_error_fatal5_sts_799bf567_error_agg_error_fatal6_sts_554d4d0d_error_agg_error_fatal7_sts_5e5cb629_error_agg_error_fatal8_sts_f823a735_error_agg_error_fatal9_sts_63fe0bbb_bit_cg error_agg_error_fatal4_sts_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_t_error_agg_error_fatal0_sts_fa132a82_error_agg_error_fatal10_sts_6f865c89_error_agg_error_fatal11_sts_fa6208a0_error_agg_error_fatal12_sts_721d3a75_error_agg_error_fatal13_sts_5c3990f4_error_agg_error_fatal14_sts_a694518f_error_agg_error_fatal15_sts_9f83da34_error_agg_error_fatal16_sts_d2008075_error_agg_error_fatal17_sts_c4477fd6_error_agg_error_fatal18_sts_7e56b5c7_error_agg_error_fatal19_sts_d910ce2f_error_agg_error_fatal1_sts_a502c972_error_agg_error_fatal20_sts_1c366f71_error_agg_error_fatal21_sts_3ffab23c_error_agg_error_fatal22_sts_cf97fe95_error_agg_error_fatal23_sts_b038dc4b_error_agg_error_fatal24_sts_46a7f9f2_error_agg_error_fatal25_sts_d3847056_error_agg_error_fatal26_sts_07ce5573_error_agg_error_fatal27_sts_686337e8_error_agg_error_fatal28_sts_47915955_error_agg_error_fatal29_sts_748fd418_error_agg_error_fatal2_sts_1eed1d52_error_agg_error_fatal30_sts_56c415d2_error_agg_error_fatal31_sts_9c4937bc_error_agg_error_fatal3_sts_7910568d_error_agg_error_fatal4_sts_b4f21204_error_agg_error_fatal5_sts_799bf567_error_agg_error_fatal6_sts_554d4d0d_error_agg_error_fatal7_sts_5e5cb629_error_agg_error_fatal8_sts_f823a735_error_agg_error_fatal9_sts_63fe0bbb_bit_cg error_agg_error_fatal3_sts_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_t_error_agg_error_fatal0_sts_fa132a82_error_agg_error_fatal10_sts_6f865c89_error_agg_error_fatal11_sts_fa6208a0_error_agg_error_fatal12_sts_721d3a75_error_agg_error_fatal13_sts_5c3990f4_error_agg_error_fatal14_sts_a694518f_error_agg_error_fatal15_sts_9f83da34_error_agg_error_fatal16_sts_d2008075_error_agg_error_fatal17_sts_c4477fd6_error_agg_error_fatal18_sts_7e56b5c7_error_agg_error_fatal19_sts_d910ce2f_error_agg_error_fatal1_sts_a502c972_error_agg_error_fatal20_sts_1c366f71_error_agg_error_fatal21_sts_3ffab23c_error_agg_error_fatal22_sts_cf97fe95_error_agg_error_fatal23_sts_b038dc4b_error_agg_error_fatal24_sts_46a7f9f2_error_agg_error_fatal25_sts_d3847056_error_agg_error_fatal26_sts_07ce5573_error_agg_error_fatal27_sts_686337e8_error_agg_error_fatal28_sts_47915955_error_agg_error_fatal29_sts_748fd418_error_agg_error_fatal2_sts_1eed1d52_error_agg_error_fatal30_sts_56c415d2_error_agg_error_fatal31_sts_9c4937bc_error_agg_error_fatal3_sts_7910568d_error_agg_error_fatal4_sts_b4f21204_error_agg_error_fatal5_sts_799bf567_error_agg_error_fatal6_sts_554d4d0d_error_agg_error_fatal7_sts_5e5cb629_error_agg_error_fatal8_sts_f823a735_error_agg_error_fatal9_sts_63fe0bbb_bit_cg error_agg_error_fatal2_sts_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_t_error_agg_error_fatal0_sts_fa132a82_error_agg_error_fatal10_sts_6f865c89_error_agg_error_fatal11_sts_fa6208a0_error_agg_error_fatal12_sts_721d3a75_error_agg_error_fatal13_sts_5c3990f4_error_agg_error_fatal14_sts_a694518f_error_agg_error_fatal15_sts_9f83da34_error_agg_error_fatal16_sts_d2008075_error_agg_error_fatal17_sts_c4477fd6_error_agg_error_fatal18_sts_7e56b5c7_error_agg_error_fatal19_sts_d910ce2f_error_agg_error_fatal1_sts_a502c972_error_agg_error_fatal20_sts_1c366f71_error_agg_error_fatal21_sts_3ffab23c_error_agg_error_fatal22_sts_cf97fe95_error_agg_error_fatal23_sts_b038dc4b_error_agg_error_fatal24_sts_46a7f9f2_error_agg_error_fatal25_sts_d3847056_error_agg_error_fatal26_sts_07ce5573_error_agg_error_fatal27_sts_686337e8_error_agg_error_fatal28_sts_47915955_error_agg_error_fatal29_sts_748fd418_error_agg_error_fatal2_sts_1eed1d52_error_agg_error_fatal30_sts_56c415d2_error_agg_error_fatal31_sts_9c4937bc_error_agg_error_fatal3_sts_7910568d_error_agg_error_fatal4_sts_b4f21204_error_agg_error_fatal5_sts_799bf567_error_agg_error_fatal6_sts_554d4d0d_error_agg_error_fatal7_sts_5e5cb629_error_agg_error_fatal8_sts_f823a735_error_agg_error_fatal9_sts_63fe0bbb_bit_cg error_agg_error_fatal1_sts_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_t_error_agg_error_fatal0_sts_fa132a82_error_agg_error_fatal10_sts_6f865c89_error_agg_error_fatal11_sts_fa6208a0_error_agg_error_fatal12_sts_721d3a75_error_agg_error_fatal13_sts_5c3990f4_error_agg_error_fatal14_sts_a694518f_error_agg_error_fatal15_sts_9f83da34_error_agg_error_fatal16_sts_d2008075_error_agg_error_fatal17_sts_c4477fd6_error_agg_error_fatal18_sts_7e56b5c7_error_agg_error_fatal19_sts_d910ce2f_error_agg_error_fatal1_sts_a502c972_error_agg_error_fatal20_sts_1c366f71_error_agg_error_fatal21_sts_3ffab23c_error_agg_error_fatal22_sts_cf97fe95_error_agg_error_fatal23_sts_b038dc4b_error_agg_error_fatal24_sts_46a7f9f2_error_agg_error_fatal25_sts_d3847056_error_agg_error_fatal26_sts_07ce5573_error_agg_error_fatal27_sts_686337e8_error_agg_error_fatal28_sts_47915955_error_agg_error_fatal29_sts_748fd418_error_agg_error_fatal2_sts_1eed1d52_error_agg_error_fatal30_sts_56c415d2_error_agg_error_fatal31_sts_9c4937bc_error_agg_error_fatal3_sts_7910568d_error_agg_error_fatal4_sts_b4f21204_error_agg_error_fatal5_sts_799bf567_error_agg_error_fatal6_sts_554d4d0d_error_agg_error_fatal7_sts_5e5cb629_error_agg_error_fatal8_sts_f823a735_error_agg_error_fatal9_sts_63fe0bbb_bit_cg error_agg_error_fatal0_sts_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_t_error_agg_error_fatal0_sts_fa132a82_error_agg_error_fatal10_sts_6f865c89_error_agg_error_fatal11_sts_fa6208a0_error_agg_error_fatal12_sts_721d3a75_error_agg_error_fatal13_sts_5c3990f4_error_agg_error_fatal14_sts_a694518f_error_agg_error_fatal15_sts_9f83da34_error_agg_error_fatal16_sts_d2008075_error_agg_error_fatal17_sts_c4477fd6_error_agg_error_fatal18_sts_7e56b5c7_error_agg_error_fatal19_sts_d910ce2f_error_agg_error_fatal1_sts_a502c972_error_agg_error_fatal20_sts_1c366f71_error_agg_error_fatal21_sts_3ffab23c_error_agg_error_fatal22_sts_cf97fe95_error_agg_error_fatal23_sts_b038dc4b_error_agg_error_fatal24_sts_46a7f9f2_error_agg_error_fatal25_sts_d3847056_error_agg_error_fatal26_sts_07ce5573_error_agg_error_fatal27_sts_686337e8_error_agg_error_fatal28_sts_47915955_error_agg_error_fatal29_sts_748fd418_error_agg_error_fatal2_sts_1eed1d52_error_agg_error_fatal30_sts_56c415d2_error_agg_error_fatal31_sts_9c4937bc_error_agg_error_fatal3_sts_7910568d_error_agg_error_fatal4_sts_b4f21204_error_agg_error_fatal5_sts_799bf567_error_agg_error_fatal6_sts_554d4d0d_error_agg_error_fatal7_sts_5e5cb629_error_agg_error_fatal8_sts_f823a735_error_agg_error_fatal9_sts_63fe0bbb_fld_cg fld_cg;
        rand uvm_reg_field error_agg_error_fatal31_sts;
        rand uvm_reg_field error_agg_error_fatal30_sts;
        rand uvm_reg_field error_agg_error_fatal29_sts;
        rand uvm_reg_field error_agg_error_fatal28_sts;
        rand uvm_reg_field error_agg_error_fatal27_sts;
        rand uvm_reg_field error_agg_error_fatal26_sts;
        rand uvm_reg_field error_agg_error_fatal25_sts;
        rand uvm_reg_field error_agg_error_fatal24_sts;
        rand uvm_reg_field error_agg_error_fatal23_sts;
        rand uvm_reg_field error_agg_error_fatal22_sts;
        rand uvm_reg_field error_agg_error_fatal21_sts;
        rand uvm_reg_field error_agg_error_fatal20_sts;
        rand uvm_reg_field error_agg_error_fatal19_sts;
        rand uvm_reg_field error_agg_error_fatal18_sts;
        rand uvm_reg_field error_agg_error_fatal17_sts;
        rand uvm_reg_field error_agg_error_fatal16_sts;
        rand uvm_reg_field error_agg_error_fatal15_sts;
        rand uvm_reg_field error_agg_error_fatal14_sts;
        rand uvm_reg_field error_agg_error_fatal13_sts;
        rand uvm_reg_field error_agg_error_fatal12_sts;
        rand uvm_reg_field error_agg_error_fatal11_sts;
        rand uvm_reg_field error_agg_error_fatal10_sts;
        rand uvm_reg_field error_agg_error_fatal9_sts;
        rand uvm_reg_field error_agg_error_fatal8_sts;
        rand uvm_reg_field error_agg_error_fatal7_sts;
        rand uvm_reg_field error_agg_error_fatal6_sts;
        rand uvm_reg_field error_agg_error_fatal5_sts;
        rand uvm_reg_field error_agg_error_fatal4_sts;
        rand uvm_reg_field error_agg_error_fatal3_sts;
        rand uvm_reg_field error_agg_error_fatal2_sts;
        rand uvm_reg_field error_agg_error_fatal1_sts;
        rand uvm_reg_field error_agg_error_fatal0_sts;

        function new(string name = "mci_reg__intr_block_t__error1_intr_t_error_agg_error_fatal0_sts_fa132a82_error_agg_error_fatal10_sts_6f865c89_error_agg_error_fatal11_sts_fa6208a0_error_agg_error_fatal12_sts_721d3a75_error_agg_error_fatal13_sts_5c3990f4_error_agg_error_fatal14_sts_a694518f_error_agg_error_fatal15_sts_9f83da34_error_agg_error_fatal16_sts_d2008075_error_agg_error_fatal17_sts_c4477fd6_error_agg_error_fatal18_sts_7e56b5c7_error_agg_error_fatal19_sts_d910ce2f_error_agg_error_fatal1_sts_a502c972_error_agg_error_fatal20_sts_1c366f71_error_agg_error_fatal21_sts_3ffab23c_error_agg_error_fatal22_sts_cf97fe95_error_agg_error_fatal23_sts_b038dc4b_error_agg_error_fatal24_sts_46a7f9f2_error_agg_error_fatal25_sts_d3847056_error_agg_error_fatal26_sts_07ce5573_error_agg_error_fatal27_sts_686337e8_error_agg_error_fatal28_sts_47915955_error_agg_error_fatal29_sts_748fd418_error_agg_error_fatal2_sts_1eed1d52_error_agg_error_fatal30_sts_56c415d2_error_agg_error_fatal31_sts_9c4937bc_error_agg_error_fatal3_sts_7910568d_error_agg_error_fatal4_sts_b4f21204_error_agg_error_fatal5_sts_799bf567_error_agg_error_fatal6_sts_554d4d0d_error_agg_error_fatal7_sts_5e5cb629_error_agg_error_fatal8_sts_f823a735_error_agg_error_fatal9_sts_63fe0bbb");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.error_agg_error_fatal31_sts = new("error_agg_error_fatal31_sts");
            this.error_agg_error_fatal31_sts.configure(this, 1, 0, "W1C", 1, 'h0, 1, 1, 0);
            this.error_agg_error_fatal30_sts = new("error_agg_error_fatal30_sts");
            this.error_agg_error_fatal30_sts.configure(this, 1, 1, "W1C", 1, 'h0, 1, 1, 0);
            this.error_agg_error_fatal29_sts = new("error_agg_error_fatal29_sts");
            this.error_agg_error_fatal29_sts.configure(this, 1, 2, "W1C", 1, 'h0, 1, 1, 0);
            this.error_agg_error_fatal28_sts = new("error_agg_error_fatal28_sts");
            this.error_agg_error_fatal28_sts.configure(this, 1, 3, "W1C", 1, 'h0, 1, 1, 0);
            this.error_agg_error_fatal27_sts = new("error_agg_error_fatal27_sts");
            this.error_agg_error_fatal27_sts.configure(this, 1, 4, "W1C", 1, 'h0, 1, 1, 0);
            this.error_agg_error_fatal26_sts = new("error_agg_error_fatal26_sts");
            this.error_agg_error_fatal26_sts.configure(this, 1, 5, "W1C", 1, 'h0, 1, 1, 0);
            this.error_agg_error_fatal25_sts = new("error_agg_error_fatal25_sts");
            this.error_agg_error_fatal25_sts.configure(this, 1, 6, "W1C", 1, 'h0, 1, 1, 0);
            this.error_agg_error_fatal24_sts = new("error_agg_error_fatal24_sts");
            this.error_agg_error_fatal24_sts.configure(this, 1, 7, "W1C", 1, 'h0, 1, 1, 0);
            this.error_agg_error_fatal23_sts = new("error_agg_error_fatal23_sts");
            this.error_agg_error_fatal23_sts.configure(this, 1, 8, "W1C", 1, 'h0, 1, 1, 0);
            this.error_agg_error_fatal22_sts = new("error_agg_error_fatal22_sts");
            this.error_agg_error_fatal22_sts.configure(this, 1, 9, "W1C", 1, 'h0, 1, 1, 0);
            this.error_agg_error_fatal21_sts = new("error_agg_error_fatal21_sts");
            this.error_agg_error_fatal21_sts.configure(this, 1, 10, "W1C", 1, 'h0, 1, 1, 0);
            this.error_agg_error_fatal20_sts = new("error_agg_error_fatal20_sts");
            this.error_agg_error_fatal20_sts.configure(this, 1, 11, "W1C", 1, 'h0, 1, 1, 0);
            this.error_agg_error_fatal19_sts = new("error_agg_error_fatal19_sts");
            this.error_agg_error_fatal19_sts.configure(this, 1, 12, "W1C", 1, 'h0, 1, 1, 0);
            this.error_agg_error_fatal18_sts = new("error_agg_error_fatal18_sts");
            this.error_agg_error_fatal18_sts.configure(this, 1, 13, "W1C", 1, 'h0, 1, 1, 0);
            this.error_agg_error_fatal17_sts = new("error_agg_error_fatal17_sts");
            this.error_agg_error_fatal17_sts.configure(this, 1, 14, "W1C", 1, 'h0, 1, 1, 0);
            this.error_agg_error_fatal16_sts = new("error_agg_error_fatal16_sts");
            this.error_agg_error_fatal16_sts.configure(this, 1, 15, "W1C", 1, 'h0, 1, 1, 0);
            this.error_agg_error_fatal15_sts = new("error_agg_error_fatal15_sts");
            this.error_agg_error_fatal15_sts.configure(this, 1, 16, "W1C", 1, 'h0, 1, 1, 0);
            this.error_agg_error_fatal14_sts = new("error_agg_error_fatal14_sts");
            this.error_agg_error_fatal14_sts.configure(this, 1, 17, "W1C", 1, 'h0, 1, 1, 0);
            this.error_agg_error_fatal13_sts = new("error_agg_error_fatal13_sts");
            this.error_agg_error_fatal13_sts.configure(this, 1, 18, "W1C", 1, 'h0, 1, 1, 0);
            this.error_agg_error_fatal12_sts = new("error_agg_error_fatal12_sts");
            this.error_agg_error_fatal12_sts.configure(this, 1, 19, "W1C", 1, 'h0, 1, 1, 0);
            this.error_agg_error_fatal11_sts = new("error_agg_error_fatal11_sts");
            this.error_agg_error_fatal11_sts.configure(this, 1, 20, "W1C", 1, 'h0, 1, 1, 0);
            this.error_agg_error_fatal10_sts = new("error_agg_error_fatal10_sts");
            this.error_agg_error_fatal10_sts.configure(this, 1, 21, "W1C", 1, 'h0, 1, 1, 0);
            this.error_agg_error_fatal9_sts = new("error_agg_error_fatal9_sts");
            this.error_agg_error_fatal9_sts.configure(this, 1, 22, "W1C", 1, 'h0, 1, 1, 0);
            this.error_agg_error_fatal8_sts = new("error_agg_error_fatal8_sts");
            this.error_agg_error_fatal8_sts.configure(this, 1, 23, "W1C", 1, 'h0, 1, 1, 0);
            this.error_agg_error_fatal7_sts = new("error_agg_error_fatal7_sts");
            this.error_agg_error_fatal7_sts.configure(this, 1, 24, "W1C", 1, 'h0, 1, 1, 0);
            this.error_agg_error_fatal6_sts = new("error_agg_error_fatal6_sts");
            this.error_agg_error_fatal6_sts.configure(this, 1, 25, "W1C", 1, 'h0, 1, 1, 0);
            this.error_agg_error_fatal5_sts = new("error_agg_error_fatal5_sts");
            this.error_agg_error_fatal5_sts.configure(this, 1, 26, "W1C", 1, 'h0, 1, 1, 0);
            this.error_agg_error_fatal4_sts = new("error_agg_error_fatal4_sts");
            this.error_agg_error_fatal4_sts.configure(this, 1, 27, "W1C", 1, 'h0, 1, 1, 0);
            this.error_agg_error_fatal3_sts = new("error_agg_error_fatal3_sts");
            this.error_agg_error_fatal3_sts.configure(this, 1, 28, "W1C", 1, 'h0, 1, 1, 0);
            this.error_agg_error_fatal2_sts = new("error_agg_error_fatal2_sts");
            this.error_agg_error_fatal2_sts.configure(this, 1, 29, "W1C", 1, 'h0, 1, 1, 0);
            this.error_agg_error_fatal1_sts = new("error_agg_error_fatal1_sts");
            this.error_agg_error_fatal1_sts.configure(this, 1, 30, "W1C", 1, 'h0, 1, 1, 0);
            this.error_agg_error_fatal0_sts = new("error_agg_error_fatal0_sts");
            this.error_agg_error_fatal0_sts.configure(this, 1, 31, "W1C", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(error_agg_error_fatal31_sts_bit_cg[bt]) error_agg_error_fatal31_sts_bit_cg[bt] = new();
                foreach(error_agg_error_fatal30_sts_bit_cg[bt]) error_agg_error_fatal30_sts_bit_cg[bt] = new();
                foreach(error_agg_error_fatal29_sts_bit_cg[bt]) error_agg_error_fatal29_sts_bit_cg[bt] = new();
                foreach(error_agg_error_fatal28_sts_bit_cg[bt]) error_agg_error_fatal28_sts_bit_cg[bt] = new();
                foreach(error_agg_error_fatal27_sts_bit_cg[bt]) error_agg_error_fatal27_sts_bit_cg[bt] = new();
                foreach(error_agg_error_fatal26_sts_bit_cg[bt]) error_agg_error_fatal26_sts_bit_cg[bt] = new();
                foreach(error_agg_error_fatal25_sts_bit_cg[bt]) error_agg_error_fatal25_sts_bit_cg[bt] = new();
                foreach(error_agg_error_fatal24_sts_bit_cg[bt]) error_agg_error_fatal24_sts_bit_cg[bt] = new();
                foreach(error_agg_error_fatal23_sts_bit_cg[bt]) error_agg_error_fatal23_sts_bit_cg[bt] = new();
                foreach(error_agg_error_fatal22_sts_bit_cg[bt]) error_agg_error_fatal22_sts_bit_cg[bt] = new();
                foreach(error_agg_error_fatal21_sts_bit_cg[bt]) error_agg_error_fatal21_sts_bit_cg[bt] = new();
                foreach(error_agg_error_fatal20_sts_bit_cg[bt]) error_agg_error_fatal20_sts_bit_cg[bt] = new();
                foreach(error_agg_error_fatal19_sts_bit_cg[bt]) error_agg_error_fatal19_sts_bit_cg[bt] = new();
                foreach(error_agg_error_fatal18_sts_bit_cg[bt]) error_agg_error_fatal18_sts_bit_cg[bt] = new();
                foreach(error_agg_error_fatal17_sts_bit_cg[bt]) error_agg_error_fatal17_sts_bit_cg[bt] = new();
                foreach(error_agg_error_fatal16_sts_bit_cg[bt]) error_agg_error_fatal16_sts_bit_cg[bt] = new();
                foreach(error_agg_error_fatal15_sts_bit_cg[bt]) error_agg_error_fatal15_sts_bit_cg[bt] = new();
                foreach(error_agg_error_fatal14_sts_bit_cg[bt]) error_agg_error_fatal14_sts_bit_cg[bt] = new();
                foreach(error_agg_error_fatal13_sts_bit_cg[bt]) error_agg_error_fatal13_sts_bit_cg[bt] = new();
                foreach(error_agg_error_fatal12_sts_bit_cg[bt]) error_agg_error_fatal12_sts_bit_cg[bt] = new();
                foreach(error_agg_error_fatal11_sts_bit_cg[bt]) error_agg_error_fatal11_sts_bit_cg[bt] = new();
                foreach(error_agg_error_fatal10_sts_bit_cg[bt]) error_agg_error_fatal10_sts_bit_cg[bt] = new();
                foreach(error_agg_error_fatal9_sts_bit_cg[bt]) error_agg_error_fatal9_sts_bit_cg[bt] = new();
                foreach(error_agg_error_fatal8_sts_bit_cg[bt]) error_agg_error_fatal8_sts_bit_cg[bt] = new();
                foreach(error_agg_error_fatal7_sts_bit_cg[bt]) error_agg_error_fatal7_sts_bit_cg[bt] = new();
                foreach(error_agg_error_fatal6_sts_bit_cg[bt]) error_agg_error_fatal6_sts_bit_cg[bt] = new();
                foreach(error_agg_error_fatal5_sts_bit_cg[bt]) error_agg_error_fatal5_sts_bit_cg[bt] = new();
                foreach(error_agg_error_fatal4_sts_bit_cg[bt]) error_agg_error_fatal4_sts_bit_cg[bt] = new();
                foreach(error_agg_error_fatal3_sts_bit_cg[bt]) error_agg_error_fatal3_sts_bit_cg[bt] = new();
                foreach(error_agg_error_fatal2_sts_bit_cg[bt]) error_agg_error_fatal2_sts_bit_cg[bt] = new();
                foreach(error_agg_error_fatal1_sts_bit_cg[bt]) error_agg_error_fatal1_sts_bit_cg[bt] = new();
                foreach(error_agg_error_fatal0_sts_bit_cg[bt]) error_agg_error_fatal0_sts_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__error1_intr_t_error_agg_error_fatal0_sts_fa132a82_error_agg_error_fatal10_sts_6f865c89_error_agg_error_fatal11_sts_fa6208a0_error_agg_error_fatal12_sts_721d3a75_error_agg_error_fatal13_sts_5c3990f4_error_agg_error_fatal14_sts_a694518f_error_agg_error_fatal15_sts_9f83da34_error_agg_error_fatal16_sts_d2008075_error_agg_error_fatal17_sts_c4477fd6_error_agg_error_fatal18_sts_7e56b5c7_error_agg_error_fatal19_sts_d910ce2f_error_agg_error_fatal1_sts_a502c972_error_agg_error_fatal20_sts_1c366f71_error_agg_error_fatal21_sts_3ffab23c_error_agg_error_fatal22_sts_cf97fe95_error_agg_error_fatal23_sts_b038dc4b_error_agg_error_fatal24_sts_46a7f9f2_error_agg_error_fatal25_sts_d3847056_error_agg_error_fatal26_sts_07ce5573_error_agg_error_fatal27_sts_686337e8_error_agg_error_fatal28_sts_47915955_error_agg_error_fatal29_sts_748fd418_error_agg_error_fatal2_sts_1eed1d52_error_agg_error_fatal30_sts_56c415d2_error_agg_error_fatal31_sts_9c4937bc_error_agg_error_fatal3_sts_7910568d_error_agg_error_fatal4_sts_b4f21204_error_agg_error_fatal5_sts_799bf567_error_agg_error_fatal6_sts_554d4d0d_error_agg_error_fatal7_sts_5e5cb629_error_agg_error_fatal8_sts_f823a735_error_agg_error_fatal9_sts_63fe0bbb

    // Reg - mci_reg::intr_block_t::notif0_intr_t_notif_clpra_mcu_reset_req_sts_aadf4417_notif_mcu_sram_ecc_cor_sts_95e5c2eb
    class mci_reg__intr_block_t__notif0_intr_t_notif_clpra_mcu_reset_req_sts_aadf4417_notif_mcu_sram_ecc_cor_sts_95e5c2eb extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__notif0_intr_t_notif_clpra_mcu_reset_req_sts_aadf4417_notif_mcu_sram_ecc_cor_sts_95e5c2eb_bit_cg notif_mcu_sram_ecc_cor_sts_bit_cg[1];
        mci_reg__intr_block_t__notif0_intr_t_notif_clpra_mcu_reset_req_sts_aadf4417_notif_mcu_sram_ecc_cor_sts_95e5c2eb_bit_cg notif_clpra_mcu_reset_req_sts_bit_cg[1];
        mci_reg__intr_block_t__notif0_intr_t_notif_clpra_mcu_reset_req_sts_aadf4417_notif_mcu_sram_ecc_cor_sts_95e5c2eb_fld_cg fld_cg;
        rand uvm_reg_field notif_mcu_sram_ecc_cor_sts;
        rand uvm_reg_field notif_clpra_mcu_reset_req_sts;

        function new(string name = "mci_reg__intr_block_t__notif0_intr_t_notif_clpra_mcu_reset_req_sts_aadf4417_notif_mcu_sram_ecc_cor_sts_95e5c2eb");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.notif_mcu_sram_ecc_cor_sts = new("notif_mcu_sram_ecc_cor_sts");
            this.notif_mcu_sram_ecc_cor_sts.configure(this, 1, 0, "W1C", 1, 'h0, 1, 1, 0);
            this.notif_clpra_mcu_reset_req_sts = new("notif_clpra_mcu_reset_req_sts");
            this.notif_clpra_mcu_reset_req_sts.configure(this, 1, 1, "W1C", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(notif_mcu_sram_ecc_cor_sts_bit_cg[bt]) notif_mcu_sram_ecc_cor_sts_bit_cg[bt] = new();
                foreach(notif_clpra_mcu_reset_req_sts_bit_cg[bt]) notif_clpra_mcu_reset_req_sts_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__notif0_intr_t_notif_clpra_mcu_reset_req_sts_aadf4417_notif_mcu_sram_ecc_cor_sts_95e5c2eb

    // Reg - mci_reg::intr_block_t::notif1_intr_t_notif_agg_error_non_fatal0_sts_153b1f81_notif_agg_error_non_fatal10_sts_9bebb60c_notif_agg_error_non_fatal11_sts_8f4fbe62_notif_agg_error_non_fatal12_sts_8fdbfe78_notif_agg_error_non_fatal13_sts_fa5cd768_notif_agg_error_non_fatal14_sts_516359a7_notif_agg_error_non_fatal15_sts_0e9d571f_notif_agg_error_non_fatal16_sts_b79f75d3_notif_agg_error_non_fatal17_sts_0c18cbf4_notif_agg_error_non_fatal18_sts_83d64a1f_notif_agg_error_non_fatal19_sts_346fbbcc_notif_agg_error_non_fatal1_sts_35748ee2_notif_agg_error_non_fatal20_sts_5362c56e_notif_agg_error_non_fatal21_sts_aeabef1a_notif_agg_error_non_fatal22_sts_3a444065_notif_agg_error_non_fatal23_sts_b2d40317_notif_agg_error_non_fatal24_sts_f683d156_notif_agg_error_non_fatal25_sts_d230131e_notif_agg_error_non_fatal26_sts_151712ef_notif_agg_error_non_fatal27_sts_47032eac_notif_agg_error_non_fatal28_sts_3f7a4f3f_notif_agg_error_non_fatal29_sts_48f1fd41_notif_agg_error_non_fatal2_sts_a4970c79_notif_agg_error_non_fatal30_sts_01dd78e0_notif_agg_error_non_fatal31_sts_31f7f819_notif_agg_error_non_fatal3_sts_338aeee3_notif_agg_error_non_fatal4_sts_e4042c21_notif_agg_error_non_fatal5_sts_a127b4e1_notif_agg_error_non_fatal6_sts_529605e3_notif_agg_error_non_fatal7_sts_4bd45005_notif_agg_error_non_fatal8_sts_8310de42_notif_agg_error_non_fatal9_sts_d954a7c3
    class mci_reg__intr_block_t__notif1_intr_t_notif_agg_error_non_fatal0_sts_153b1f81_notif_agg_error_non_fatal10_sts_9bebb60c_notif_agg_error_non_fatal11_sts_8f4fbe62_notif_agg_error_non_fatal12_sts_8fdbfe78_notif_agg_error_non_fatal13_sts_fa5cd768_notif_agg_error_non_fatal14_sts_516359a7_notif_agg_error_non_fatal15_sts_0e9d571f_notif_agg_error_non_fatal16_sts_b79f75d3_notif_agg_error_non_fatal17_sts_0c18cbf4_notif_agg_error_non_fatal18_sts_83d64a1f_notif_agg_error_non_fatal19_sts_346fbbcc_notif_agg_error_non_fatal1_sts_35748ee2_notif_agg_error_non_fatal20_sts_5362c56e_notif_agg_error_non_fatal21_sts_aeabef1a_notif_agg_error_non_fatal22_sts_3a444065_notif_agg_error_non_fatal23_sts_b2d40317_notif_agg_error_non_fatal24_sts_f683d156_notif_agg_error_non_fatal25_sts_d230131e_notif_agg_error_non_fatal26_sts_151712ef_notif_agg_error_non_fatal27_sts_47032eac_notif_agg_error_non_fatal28_sts_3f7a4f3f_notif_agg_error_non_fatal29_sts_48f1fd41_notif_agg_error_non_fatal2_sts_a4970c79_notif_agg_error_non_fatal30_sts_01dd78e0_notif_agg_error_non_fatal31_sts_31f7f819_notif_agg_error_non_fatal3_sts_338aeee3_notif_agg_error_non_fatal4_sts_e4042c21_notif_agg_error_non_fatal5_sts_a127b4e1_notif_agg_error_non_fatal6_sts_529605e3_notif_agg_error_non_fatal7_sts_4bd45005_notif_agg_error_non_fatal8_sts_8310de42_notif_agg_error_non_fatal9_sts_d954a7c3 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__notif1_intr_t_notif_agg_error_non_fatal0_sts_153b1f81_notif_agg_error_non_fatal10_sts_9bebb60c_notif_agg_error_non_fatal11_sts_8f4fbe62_notif_agg_error_non_fatal12_sts_8fdbfe78_notif_agg_error_non_fatal13_sts_fa5cd768_notif_agg_error_non_fatal14_sts_516359a7_notif_agg_error_non_fatal15_sts_0e9d571f_notif_agg_error_non_fatal16_sts_b79f75d3_notif_agg_error_non_fatal17_sts_0c18cbf4_notif_agg_error_non_fatal18_sts_83d64a1f_notif_agg_error_non_fatal19_sts_346fbbcc_notif_agg_error_non_fatal1_sts_35748ee2_notif_agg_error_non_fatal20_sts_5362c56e_notif_agg_error_non_fatal21_sts_aeabef1a_notif_agg_error_non_fatal22_sts_3a444065_notif_agg_error_non_fatal23_sts_b2d40317_notif_agg_error_non_fatal24_sts_f683d156_notif_agg_error_non_fatal25_sts_d230131e_notif_agg_error_non_fatal26_sts_151712ef_notif_agg_error_non_fatal27_sts_47032eac_notif_agg_error_non_fatal28_sts_3f7a4f3f_notif_agg_error_non_fatal29_sts_48f1fd41_notif_agg_error_non_fatal2_sts_a4970c79_notif_agg_error_non_fatal30_sts_01dd78e0_notif_agg_error_non_fatal31_sts_31f7f819_notif_agg_error_non_fatal3_sts_338aeee3_notif_agg_error_non_fatal4_sts_e4042c21_notif_agg_error_non_fatal5_sts_a127b4e1_notif_agg_error_non_fatal6_sts_529605e3_notif_agg_error_non_fatal7_sts_4bd45005_notif_agg_error_non_fatal8_sts_8310de42_notif_agg_error_non_fatal9_sts_d954a7c3_bit_cg notif_agg_error_non_fatal31_sts_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_t_notif_agg_error_non_fatal0_sts_153b1f81_notif_agg_error_non_fatal10_sts_9bebb60c_notif_agg_error_non_fatal11_sts_8f4fbe62_notif_agg_error_non_fatal12_sts_8fdbfe78_notif_agg_error_non_fatal13_sts_fa5cd768_notif_agg_error_non_fatal14_sts_516359a7_notif_agg_error_non_fatal15_sts_0e9d571f_notif_agg_error_non_fatal16_sts_b79f75d3_notif_agg_error_non_fatal17_sts_0c18cbf4_notif_agg_error_non_fatal18_sts_83d64a1f_notif_agg_error_non_fatal19_sts_346fbbcc_notif_agg_error_non_fatal1_sts_35748ee2_notif_agg_error_non_fatal20_sts_5362c56e_notif_agg_error_non_fatal21_sts_aeabef1a_notif_agg_error_non_fatal22_sts_3a444065_notif_agg_error_non_fatal23_sts_b2d40317_notif_agg_error_non_fatal24_sts_f683d156_notif_agg_error_non_fatal25_sts_d230131e_notif_agg_error_non_fatal26_sts_151712ef_notif_agg_error_non_fatal27_sts_47032eac_notif_agg_error_non_fatal28_sts_3f7a4f3f_notif_agg_error_non_fatal29_sts_48f1fd41_notif_agg_error_non_fatal2_sts_a4970c79_notif_agg_error_non_fatal30_sts_01dd78e0_notif_agg_error_non_fatal31_sts_31f7f819_notif_agg_error_non_fatal3_sts_338aeee3_notif_agg_error_non_fatal4_sts_e4042c21_notif_agg_error_non_fatal5_sts_a127b4e1_notif_agg_error_non_fatal6_sts_529605e3_notif_agg_error_non_fatal7_sts_4bd45005_notif_agg_error_non_fatal8_sts_8310de42_notif_agg_error_non_fatal9_sts_d954a7c3_bit_cg notif_agg_error_non_fatal30_sts_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_t_notif_agg_error_non_fatal0_sts_153b1f81_notif_agg_error_non_fatal10_sts_9bebb60c_notif_agg_error_non_fatal11_sts_8f4fbe62_notif_agg_error_non_fatal12_sts_8fdbfe78_notif_agg_error_non_fatal13_sts_fa5cd768_notif_agg_error_non_fatal14_sts_516359a7_notif_agg_error_non_fatal15_sts_0e9d571f_notif_agg_error_non_fatal16_sts_b79f75d3_notif_agg_error_non_fatal17_sts_0c18cbf4_notif_agg_error_non_fatal18_sts_83d64a1f_notif_agg_error_non_fatal19_sts_346fbbcc_notif_agg_error_non_fatal1_sts_35748ee2_notif_agg_error_non_fatal20_sts_5362c56e_notif_agg_error_non_fatal21_sts_aeabef1a_notif_agg_error_non_fatal22_sts_3a444065_notif_agg_error_non_fatal23_sts_b2d40317_notif_agg_error_non_fatal24_sts_f683d156_notif_agg_error_non_fatal25_sts_d230131e_notif_agg_error_non_fatal26_sts_151712ef_notif_agg_error_non_fatal27_sts_47032eac_notif_agg_error_non_fatal28_sts_3f7a4f3f_notif_agg_error_non_fatal29_sts_48f1fd41_notif_agg_error_non_fatal2_sts_a4970c79_notif_agg_error_non_fatal30_sts_01dd78e0_notif_agg_error_non_fatal31_sts_31f7f819_notif_agg_error_non_fatal3_sts_338aeee3_notif_agg_error_non_fatal4_sts_e4042c21_notif_agg_error_non_fatal5_sts_a127b4e1_notif_agg_error_non_fatal6_sts_529605e3_notif_agg_error_non_fatal7_sts_4bd45005_notif_agg_error_non_fatal8_sts_8310de42_notif_agg_error_non_fatal9_sts_d954a7c3_bit_cg notif_agg_error_non_fatal29_sts_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_t_notif_agg_error_non_fatal0_sts_153b1f81_notif_agg_error_non_fatal10_sts_9bebb60c_notif_agg_error_non_fatal11_sts_8f4fbe62_notif_agg_error_non_fatal12_sts_8fdbfe78_notif_agg_error_non_fatal13_sts_fa5cd768_notif_agg_error_non_fatal14_sts_516359a7_notif_agg_error_non_fatal15_sts_0e9d571f_notif_agg_error_non_fatal16_sts_b79f75d3_notif_agg_error_non_fatal17_sts_0c18cbf4_notif_agg_error_non_fatal18_sts_83d64a1f_notif_agg_error_non_fatal19_sts_346fbbcc_notif_agg_error_non_fatal1_sts_35748ee2_notif_agg_error_non_fatal20_sts_5362c56e_notif_agg_error_non_fatal21_sts_aeabef1a_notif_agg_error_non_fatal22_sts_3a444065_notif_agg_error_non_fatal23_sts_b2d40317_notif_agg_error_non_fatal24_sts_f683d156_notif_agg_error_non_fatal25_sts_d230131e_notif_agg_error_non_fatal26_sts_151712ef_notif_agg_error_non_fatal27_sts_47032eac_notif_agg_error_non_fatal28_sts_3f7a4f3f_notif_agg_error_non_fatal29_sts_48f1fd41_notif_agg_error_non_fatal2_sts_a4970c79_notif_agg_error_non_fatal30_sts_01dd78e0_notif_agg_error_non_fatal31_sts_31f7f819_notif_agg_error_non_fatal3_sts_338aeee3_notif_agg_error_non_fatal4_sts_e4042c21_notif_agg_error_non_fatal5_sts_a127b4e1_notif_agg_error_non_fatal6_sts_529605e3_notif_agg_error_non_fatal7_sts_4bd45005_notif_agg_error_non_fatal8_sts_8310de42_notif_agg_error_non_fatal9_sts_d954a7c3_bit_cg notif_agg_error_non_fatal28_sts_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_t_notif_agg_error_non_fatal0_sts_153b1f81_notif_agg_error_non_fatal10_sts_9bebb60c_notif_agg_error_non_fatal11_sts_8f4fbe62_notif_agg_error_non_fatal12_sts_8fdbfe78_notif_agg_error_non_fatal13_sts_fa5cd768_notif_agg_error_non_fatal14_sts_516359a7_notif_agg_error_non_fatal15_sts_0e9d571f_notif_agg_error_non_fatal16_sts_b79f75d3_notif_agg_error_non_fatal17_sts_0c18cbf4_notif_agg_error_non_fatal18_sts_83d64a1f_notif_agg_error_non_fatal19_sts_346fbbcc_notif_agg_error_non_fatal1_sts_35748ee2_notif_agg_error_non_fatal20_sts_5362c56e_notif_agg_error_non_fatal21_sts_aeabef1a_notif_agg_error_non_fatal22_sts_3a444065_notif_agg_error_non_fatal23_sts_b2d40317_notif_agg_error_non_fatal24_sts_f683d156_notif_agg_error_non_fatal25_sts_d230131e_notif_agg_error_non_fatal26_sts_151712ef_notif_agg_error_non_fatal27_sts_47032eac_notif_agg_error_non_fatal28_sts_3f7a4f3f_notif_agg_error_non_fatal29_sts_48f1fd41_notif_agg_error_non_fatal2_sts_a4970c79_notif_agg_error_non_fatal30_sts_01dd78e0_notif_agg_error_non_fatal31_sts_31f7f819_notif_agg_error_non_fatal3_sts_338aeee3_notif_agg_error_non_fatal4_sts_e4042c21_notif_agg_error_non_fatal5_sts_a127b4e1_notif_agg_error_non_fatal6_sts_529605e3_notif_agg_error_non_fatal7_sts_4bd45005_notif_agg_error_non_fatal8_sts_8310de42_notif_agg_error_non_fatal9_sts_d954a7c3_bit_cg notif_agg_error_non_fatal27_sts_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_t_notif_agg_error_non_fatal0_sts_153b1f81_notif_agg_error_non_fatal10_sts_9bebb60c_notif_agg_error_non_fatal11_sts_8f4fbe62_notif_agg_error_non_fatal12_sts_8fdbfe78_notif_agg_error_non_fatal13_sts_fa5cd768_notif_agg_error_non_fatal14_sts_516359a7_notif_agg_error_non_fatal15_sts_0e9d571f_notif_agg_error_non_fatal16_sts_b79f75d3_notif_agg_error_non_fatal17_sts_0c18cbf4_notif_agg_error_non_fatal18_sts_83d64a1f_notif_agg_error_non_fatal19_sts_346fbbcc_notif_agg_error_non_fatal1_sts_35748ee2_notif_agg_error_non_fatal20_sts_5362c56e_notif_agg_error_non_fatal21_sts_aeabef1a_notif_agg_error_non_fatal22_sts_3a444065_notif_agg_error_non_fatal23_sts_b2d40317_notif_agg_error_non_fatal24_sts_f683d156_notif_agg_error_non_fatal25_sts_d230131e_notif_agg_error_non_fatal26_sts_151712ef_notif_agg_error_non_fatal27_sts_47032eac_notif_agg_error_non_fatal28_sts_3f7a4f3f_notif_agg_error_non_fatal29_sts_48f1fd41_notif_agg_error_non_fatal2_sts_a4970c79_notif_agg_error_non_fatal30_sts_01dd78e0_notif_agg_error_non_fatal31_sts_31f7f819_notif_agg_error_non_fatal3_sts_338aeee3_notif_agg_error_non_fatal4_sts_e4042c21_notif_agg_error_non_fatal5_sts_a127b4e1_notif_agg_error_non_fatal6_sts_529605e3_notif_agg_error_non_fatal7_sts_4bd45005_notif_agg_error_non_fatal8_sts_8310de42_notif_agg_error_non_fatal9_sts_d954a7c3_bit_cg notif_agg_error_non_fatal26_sts_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_t_notif_agg_error_non_fatal0_sts_153b1f81_notif_agg_error_non_fatal10_sts_9bebb60c_notif_agg_error_non_fatal11_sts_8f4fbe62_notif_agg_error_non_fatal12_sts_8fdbfe78_notif_agg_error_non_fatal13_sts_fa5cd768_notif_agg_error_non_fatal14_sts_516359a7_notif_agg_error_non_fatal15_sts_0e9d571f_notif_agg_error_non_fatal16_sts_b79f75d3_notif_agg_error_non_fatal17_sts_0c18cbf4_notif_agg_error_non_fatal18_sts_83d64a1f_notif_agg_error_non_fatal19_sts_346fbbcc_notif_agg_error_non_fatal1_sts_35748ee2_notif_agg_error_non_fatal20_sts_5362c56e_notif_agg_error_non_fatal21_sts_aeabef1a_notif_agg_error_non_fatal22_sts_3a444065_notif_agg_error_non_fatal23_sts_b2d40317_notif_agg_error_non_fatal24_sts_f683d156_notif_agg_error_non_fatal25_sts_d230131e_notif_agg_error_non_fatal26_sts_151712ef_notif_agg_error_non_fatal27_sts_47032eac_notif_agg_error_non_fatal28_sts_3f7a4f3f_notif_agg_error_non_fatal29_sts_48f1fd41_notif_agg_error_non_fatal2_sts_a4970c79_notif_agg_error_non_fatal30_sts_01dd78e0_notif_agg_error_non_fatal31_sts_31f7f819_notif_agg_error_non_fatal3_sts_338aeee3_notif_agg_error_non_fatal4_sts_e4042c21_notif_agg_error_non_fatal5_sts_a127b4e1_notif_agg_error_non_fatal6_sts_529605e3_notif_agg_error_non_fatal7_sts_4bd45005_notif_agg_error_non_fatal8_sts_8310de42_notif_agg_error_non_fatal9_sts_d954a7c3_bit_cg notif_agg_error_non_fatal25_sts_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_t_notif_agg_error_non_fatal0_sts_153b1f81_notif_agg_error_non_fatal10_sts_9bebb60c_notif_agg_error_non_fatal11_sts_8f4fbe62_notif_agg_error_non_fatal12_sts_8fdbfe78_notif_agg_error_non_fatal13_sts_fa5cd768_notif_agg_error_non_fatal14_sts_516359a7_notif_agg_error_non_fatal15_sts_0e9d571f_notif_agg_error_non_fatal16_sts_b79f75d3_notif_agg_error_non_fatal17_sts_0c18cbf4_notif_agg_error_non_fatal18_sts_83d64a1f_notif_agg_error_non_fatal19_sts_346fbbcc_notif_agg_error_non_fatal1_sts_35748ee2_notif_agg_error_non_fatal20_sts_5362c56e_notif_agg_error_non_fatal21_sts_aeabef1a_notif_agg_error_non_fatal22_sts_3a444065_notif_agg_error_non_fatal23_sts_b2d40317_notif_agg_error_non_fatal24_sts_f683d156_notif_agg_error_non_fatal25_sts_d230131e_notif_agg_error_non_fatal26_sts_151712ef_notif_agg_error_non_fatal27_sts_47032eac_notif_agg_error_non_fatal28_sts_3f7a4f3f_notif_agg_error_non_fatal29_sts_48f1fd41_notif_agg_error_non_fatal2_sts_a4970c79_notif_agg_error_non_fatal30_sts_01dd78e0_notif_agg_error_non_fatal31_sts_31f7f819_notif_agg_error_non_fatal3_sts_338aeee3_notif_agg_error_non_fatal4_sts_e4042c21_notif_agg_error_non_fatal5_sts_a127b4e1_notif_agg_error_non_fatal6_sts_529605e3_notif_agg_error_non_fatal7_sts_4bd45005_notif_agg_error_non_fatal8_sts_8310de42_notif_agg_error_non_fatal9_sts_d954a7c3_bit_cg notif_agg_error_non_fatal24_sts_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_t_notif_agg_error_non_fatal0_sts_153b1f81_notif_agg_error_non_fatal10_sts_9bebb60c_notif_agg_error_non_fatal11_sts_8f4fbe62_notif_agg_error_non_fatal12_sts_8fdbfe78_notif_agg_error_non_fatal13_sts_fa5cd768_notif_agg_error_non_fatal14_sts_516359a7_notif_agg_error_non_fatal15_sts_0e9d571f_notif_agg_error_non_fatal16_sts_b79f75d3_notif_agg_error_non_fatal17_sts_0c18cbf4_notif_agg_error_non_fatal18_sts_83d64a1f_notif_agg_error_non_fatal19_sts_346fbbcc_notif_agg_error_non_fatal1_sts_35748ee2_notif_agg_error_non_fatal20_sts_5362c56e_notif_agg_error_non_fatal21_sts_aeabef1a_notif_agg_error_non_fatal22_sts_3a444065_notif_agg_error_non_fatal23_sts_b2d40317_notif_agg_error_non_fatal24_sts_f683d156_notif_agg_error_non_fatal25_sts_d230131e_notif_agg_error_non_fatal26_sts_151712ef_notif_agg_error_non_fatal27_sts_47032eac_notif_agg_error_non_fatal28_sts_3f7a4f3f_notif_agg_error_non_fatal29_sts_48f1fd41_notif_agg_error_non_fatal2_sts_a4970c79_notif_agg_error_non_fatal30_sts_01dd78e0_notif_agg_error_non_fatal31_sts_31f7f819_notif_agg_error_non_fatal3_sts_338aeee3_notif_agg_error_non_fatal4_sts_e4042c21_notif_agg_error_non_fatal5_sts_a127b4e1_notif_agg_error_non_fatal6_sts_529605e3_notif_agg_error_non_fatal7_sts_4bd45005_notif_agg_error_non_fatal8_sts_8310de42_notif_agg_error_non_fatal9_sts_d954a7c3_bit_cg notif_agg_error_non_fatal23_sts_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_t_notif_agg_error_non_fatal0_sts_153b1f81_notif_agg_error_non_fatal10_sts_9bebb60c_notif_agg_error_non_fatal11_sts_8f4fbe62_notif_agg_error_non_fatal12_sts_8fdbfe78_notif_agg_error_non_fatal13_sts_fa5cd768_notif_agg_error_non_fatal14_sts_516359a7_notif_agg_error_non_fatal15_sts_0e9d571f_notif_agg_error_non_fatal16_sts_b79f75d3_notif_agg_error_non_fatal17_sts_0c18cbf4_notif_agg_error_non_fatal18_sts_83d64a1f_notif_agg_error_non_fatal19_sts_346fbbcc_notif_agg_error_non_fatal1_sts_35748ee2_notif_agg_error_non_fatal20_sts_5362c56e_notif_agg_error_non_fatal21_sts_aeabef1a_notif_agg_error_non_fatal22_sts_3a444065_notif_agg_error_non_fatal23_sts_b2d40317_notif_agg_error_non_fatal24_sts_f683d156_notif_agg_error_non_fatal25_sts_d230131e_notif_agg_error_non_fatal26_sts_151712ef_notif_agg_error_non_fatal27_sts_47032eac_notif_agg_error_non_fatal28_sts_3f7a4f3f_notif_agg_error_non_fatal29_sts_48f1fd41_notif_agg_error_non_fatal2_sts_a4970c79_notif_agg_error_non_fatal30_sts_01dd78e0_notif_agg_error_non_fatal31_sts_31f7f819_notif_agg_error_non_fatal3_sts_338aeee3_notif_agg_error_non_fatal4_sts_e4042c21_notif_agg_error_non_fatal5_sts_a127b4e1_notif_agg_error_non_fatal6_sts_529605e3_notif_agg_error_non_fatal7_sts_4bd45005_notif_agg_error_non_fatal8_sts_8310de42_notif_agg_error_non_fatal9_sts_d954a7c3_bit_cg notif_agg_error_non_fatal22_sts_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_t_notif_agg_error_non_fatal0_sts_153b1f81_notif_agg_error_non_fatal10_sts_9bebb60c_notif_agg_error_non_fatal11_sts_8f4fbe62_notif_agg_error_non_fatal12_sts_8fdbfe78_notif_agg_error_non_fatal13_sts_fa5cd768_notif_agg_error_non_fatal14_sts_516359a7_notif_agg_error_non_fatal15_sts_0e9d571f_notif_agg_error_non_fatal16_sts_b79f75d3_notif_agg_error_non_fatal17_sts_0c18cbf4_notif_agg_error_non_fatal18_sts_83d64a1f_notif_agg_error_non_fatal19_sts_346fbbcc_notif_agg_error_non_fatal1_sts_35748ee2_notif_agg_error_non_fatal20_sts_5362c56e_notif_agg_error_non_fatal21_sts_aeabef1a_notif_agg_error_non_fatal22_sts_3a444065_notif_agg_error_non_fatal23_sts_b2d40317_notif_agg_error_non_fatal24_sts_f683d156_notif_agg_error_non_fatal25_sts_d230131e_notif_agg_error_non_fatal26_sts_151712ef_notif_agg_error_non_fatal27_sts_47032eac_notif_agg_error_non_fatal28_sts_3f7a4f3f_notif_agg_error_non_fatal29_sts_48f1fd41_notif_agg_error_non_fatal2_sts_a4970c79_notif_agg_error_non_fatal30_sts_01dd78e0_notif_agg_error_non_fatal31_sts_31f7f819_notif_agg_error_non_fatal3_sts_338aeee3_notif_agg_error_non_fatal4_sts_e4042c21_notif_agg_error_non_fatal5_sts_a127b4e1_notif_agg_error_non_fatal6_sts_529605e3_notif_agg_error_non_fatal7_sts_4bd45005_notif_agg_error_non_fatal8_sts_8310de42_notif_agg_error_non_fatal9_sts_d954a7c3_bit_cg notif_agg_error_non_fatal21_sts_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_t_notif_agg_error_non_fatal0_sts_153b1f81_notif_agg_error_non_fatal10_sts_9bebb60c_notif_agg_error_non_fatal11_sts_8f4fbe62_notif_agg_error_non_fatal12_sts_8fdbfe78_notif_agg_error_non_fatal13_sts_fa5cd768_notif_agg_error_non_fatal14_sts_516359a7_notif_agg_error_non_fatal15_sts_0e9d571f_notif_agg_error_non_fatal16_sts_b79f75d3_notif_agg_error_non_fatal17_sts_0c18cbf4_notif_agg_error_non_fatal18_sts_83d64a1f_notif_agg_error_non_fatal19_sts_346fbbcc_notif_agg_error_non_fatal1_sts_35748ee2_notif_agg_error_non_fatal20_sts_5362c56e_notif_agg_error_non_fatal21_sts_aeabef1a_notif_agg_error_non_fatal22_sts_3a444065_notif_agg_error_non_fatal23_sts_b2d40317_notif_agg_error_non_fatal24_sts_f683d156_notif_agg_error_non_fatal25_sts_d230131e_notif_agg_error_non_fatal26_sts_151712ef_notif_agg_error_non_fatal27_sts_47032eac_notif_agg_error_non_fatal28_sts_3f7a4f3f_notif_agg_error_non_fatal29_sts_48f1fd41_notif_agg_error_non_fatal2_sts_a4970c79_notif_agg_error_non_fatal30_sts_01dd78e0_notif_agg_error_non_fatal31_sts_31f7f819_notif_agg_error_non_fatal3_sts_338aeee3_notif_agg_error_non_fatal4_sts_e4042c21_notif_agg_error_non_fatal5_sts_a127b4e1_notif_agg_error_non_fatal6_sts_529605e3_notif_agg_error_non_fatal7_sts_4bd45005_notif_agg_error_non_fatal8_sts_8310de42_notif_agg_error_non_fatal9_sts_d954a7c3_bit_cg notif_agg_error_non_fatal20_sts_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_t_notif_agg_error_non_fatal0_sts_153b1f81_notif_agg_error_non_fatal10_sts_9bebb60c_notif_agg_error_non_fatal11_sts_8f4fbe62_notif_agg_error_non_fatal12_sts_8fdbfe78_notif_agg_error_non_fatal13_sts_fa5cd768_notif_agg_error_non_fatal14_sts_516359a7_notif_agg_error_non_fatal15_sts_0e9d571f_notif_agg_error_non_fatal16_sts_b79f75d3_notif_agg_error_non_fatal17_sts_0c18cbf4_notif_agg_error_non_fatal18_sts_83d64a1f_notif_agg_error_non_fatal19_sts_346fbbcc_notif_agg_error_non_fatal1_sts_35748ee2_notif_agg_error_non_fatal20_sts_5362c56e_notif_agg_error_non_fatal21_sts_aeabef1a_notif_agg_error_non_fatal22_sts_3a444065_notif_agg_error_non_fatal23_sts_b2d40317_notif_agg_error_non_fatal24_sts_f683d156_notif_agg_error_non_fatal25_sts_d230131e_notif_agg_error_non_fatal26_sts_151712ef_notif_agg_error_non_fatal27_sts_47032eac_notif_agg_error_non_fatal28_sts_3f7a4f3f_notif_agg_error_non_fatal29_sts_48f1fd41_notif_agg_error_non_fatal2_sts_a4970c79_notif_agg_error_non_fatal30_sts_01dd78e0_notif_agg_error_non_fatal31_sts_31f7f819_notif_agg_error_non_fatal3_sts_338aeee3_notif_agg_error_non_fatal4_sts_e4042c21_notif_agg_error_non_fatal5_sts_a127b4e1_notif_agg_error_non_fatal6_sts_529605e3_notif_agg_error_non_fatal7_sts_4bd45005_notif_agg_error_non_fatal8_sts_8310de42_notif_agg_error_non_fatal9_sts_d954a7c3_bit_cg notif_agg_error_non_fatal19_sts_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_t_notif_agg_error_non_fatal0_sts_153b1f81_notif_agg_error_non_fatal10_sts_9bebb60c_notif_agg_error_non_fatal11_sts_8f4fbe62_notif_agg_error_non_fatal12_sts_8fdbfe78_notif_agg_error_non_fatal13_sts_fa5cd768_notif_agg_error_non_fatal14_sts_516359a7_notif_agg_error_non_fatal15_sts_0e9d571f_notif_agg_error_non_fatal16_sts_b79f75d3_notif_agg_error_non_fatal17_sts_0c18cbf4_notif_agg_error_non_fatal18_sts_83d64a1f_notif_agg_error_non_fatal19_sts_346fbbcc_notif_agg_error_non_fatal1_sts_35748ee2_notif_agg_error_non_fatal20_sts_5362c56e_notif_agg_error_non_fatal21_sts_aeabef1a_notif_agg_error_non_fatal22_sts_3a444065_notif_agg_error_non_fatal23_sts_b2d40317_notif_agg_error_non_fatal24_sts_f683d156_notif_agg_error_non_fatal25_sts_d230131e_notif_agg_error_non_fatal26_sts_151712ef_notif_agg_error_non_fatal27_sts_47032eac_notif_agg_error_non_fatal28_sts_3f7a4f3f_notif_agg_error_non_fatal29_sts_48f1fd41_notif_agg_error_non_fatal2_sts_a4970c79_notif_agg_error_non_fatal30_sts_01dd78e0_notif_agg_error_non_fatal31_sts_31f7f819_notif_agg_error_non_fatal3_sts_338aeee3_notif_agg_error_non_fatal4_sts_e4042c21_notif_agg_error_non_fatal5_sts_a127b4e1_notif_agg_error_non_fatal6_sts_529605e3_notif_agg_error_non_fatal7_sts_4bd45005_notif_agg_error_non_fatal8_sts_8310de42_notif_agg_error_non_fatal9_sts_d954a7c3_bit_cg notif_agg_error_non_fatal18_sts_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_t_notif_agg_error_non_fatal0_sts_153b1f81_notif_agg_error_non_fatal10_sts_9bebb60c_notif_agg_error_non_fatal11_sts_8f4fbe62_notif_agg_error_non_fatal12_sts_8fdbfe78_notif_agg_error_non_fatal13_sts_fa5cd768_notif_agg_error_non_fatal14_sts_516359a7_notif_agg_error_non_fatal15_sts_0e9d571f_notif_agg_error_non_fatal16_sts_b79f75d3_notif_agg_error_non_fatal17_sts_0c18cbf4_notif_agg_error_non_fatal18_sts_83d64a1f_notif_agg_error_non_fatal19_sts_346fbbcc_notif_agg_error_non_fatal1_sts_35748ee2_notif_agg_error_non_fatal20_sts_5362c56e_notif_agg_error_non_fatal21_sts_aeabef1a_notif_agg_error_non_fatal22_sts_3a444065_notif_agg_error_non_fatal23_sts_b2d40317_notif_agg_error_non_fatal24_sts_f683d156_notif_agg_error_non_fatal25_sts_d230131e_notif_agg_error_non_fatal26_sts_151712ef_notif_agg_error_non_fatal27_sts_47032eac_notif_agg_error_non_fatal28_sts_3f7a4f3f_notif_agg_error_non_fatal29_sts_48f1fd41_notif_agg_error_non_fatal2_sts_a4970c79_notif_agg_error_non_fatal30_sts_01dd78e0_notif_agg_error_non_fatal31_sts_31f7f819_notif_agg_error_non_fatal3_sts_338aeee3_notif_agg_error_non_fatal4_sts_e4042c21_notif_agg_error_non_fatal5_sts_a127b4e1_notif_agg_error_non_fatal6_sts_529605e3_notif_agg_error_non_fatal7_sts_4bd45005_notif_agg_error_non_fatal8_sts_8310de42_notif_agg_error_non_fatal9_sts_d954a7c3_bit_cg notif_agg_error_non_fatal17_sts_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_t_notif_agg_error_non_fatal0_sts_153b1f81_notif_agg_error_non_fatal10_sts_9bebb60c_notif_agg_error_non_fatal11_sts_8f4fbe62_notif_agg_error_non_fatal12_sts_8fdbfe78_notif_agg_error_non_fatal13_sts_fa5cd768_notif_agg_error_non_fatal14_sts_516359a7_notif_agg_error_non_fatal15_sts_0e9d571f_notif_agg_error_non_fatal16_sts_b79f75d3_notif_agg_error_non_fatal17_sts_0c18cbf4_notif_agg_error_non_fatal18_sts_83d64a1f_notif_agg_error_non_fatal19_sts_346fbbcc_notif_agg_error_non_fatal1_sts_35748ee2_notif_agg_error_non_fatal20_sts_5362c56e_notif_agg_error_non_fatal21_sts_aeabef1a_notif_agg_error_non_fatal22_sts_3a444065_notif_agg_error_non_fatal23_sts_b2d40317_notif_agg_error_non_fatal24_sts_f683d156_notif_agg_error_non_fatal25_sts_d230131e_notif_agg_error_non_fatal26_sts_151712ef_notif_agg_error_non_fatal27_sts_47032eac_notif_agg_error_non_fatal28_sts_3f7a4f3f_notif_agg_error_non_fatal29_sts_48f1fd41_notif_agg_error_non_fatal2_sts_a4970c79_notif_agg_error_non_fatal30_sts_01dd78e0_notif_agg_error_non_fatal31_sts_31f7f819_notif_agg_error_non_fatal3_sts_338aeee3_notif_agg_error_non_fatal4_sts_e4042c21_notif_agg_error_non_fatal5_sts_a127b4e1_notif_agg_error_non_fatal6_sts_529605e3_notif_agg_error_non_fatal7_sts_4bd45005_notif_agg_error_non_fatal8_sts_8310de42_notif_agg_error_non_fatal9_sts_d954a7c3_bit_cg notif_agg_error_non_fatal16_sts_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_t_notif_agg_error_non_fatal0_sts_153b1f81_notif_agg_error_non_fatal10_sts_9bebb60c_notif_agg_error_non_fatal11_sts_8f4fbe62_notif_agg_error_non_fatal12_sts_8fdbfe78_notif_agg_error_non_fatal13_sts_fa5cd768_notif_agg_error_non_fatal14_sts_516359a7_notif_agg_error_non_fatal15_sts_0e9d571f_notif_agg_error_non_fatal16_sts_b79f75d3_notif_agg_error_non_fatal17_sts_0c18cbf4_notif_agg_error_non_fatal18_sts_83d64a1f_notif_agg_error_non_fatal19_sts_346fbbcc_notif_agg_error_non_fatal1_sts_35748ee2_notif_agg_error_non_fatal20_sts_5362c56e_notif_agg_error_non_fatal21_sts_aeabef1a_notif_agg_error_non_fatal22_sts_3a444065_notif_agg_error_non_fatal23_sts_b2d40317_notif_agg_error_non_fatal24_sts_f683d156_notif_agg_error_non_fatal25_sts_d230131e_notif_agg_error_non_fatal26_sts_151712ef_notif_agg_error_non_fatal27_sts_47032eac_notif_agg_error_non_fatal28_sts_3f7a4f3f_notif_agg_error_non_fatal29_sts_48f1fd41_notif_agg_error_non_fatal2_sts_a4970c79_notif_agg_error_non_fatal30_sts_01dd78e0_notif_agg_error_non_fatal31_sts_31f7f819_notif_agg_error_non_fatal3_sts_338aeee3_notif_agg_error_non_fatal4_sts_e4042c21_notif_agg_error_non_fatal5_sts_a127b4e1_notif_agg_error_non_fatal6_sts_529605e3_notif_agg_error_non_fatal7_sts_4bd45005_notif_agg_error_non_fatal8_sts_8310de42_notif_agg_error_non_fatal9_sts_d954a7c3_bit_cg notif_agg_error_non_fatal15_sts_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_t_notif_agg_error_non_fatal0_sts_153b1f81_notif_agg_error_non_fatal10_sts_9bebb60c_notif_agg_error_non_fatal11_sts_8f4fbe62_notif_agg_error_non_fatal12_sts_8fdbfe78_notif_agg_error_non_fatal13_sts_fa5cd768_notif_agg_error_non_fatal14_sts_516359a7_notif_agg_error_non_fatal15_sts_0e9d571f_notif_agg_error_non_fatal16_sts_b79f75d3_notif_agg_error_non_fatal17_sts_0c18cbf4_notif_agg_error_non_fatal18_sts_83d64a1f_notif_agg_error_non_fatal19_sts_346fbbcc_notif_agg_error_non_fatal1_sts_35748ee2_notif_agg_error_non_fatal20_sts_5362c56e_notif_agg_error_non_fatal21_sts_aeabef1a_notif_agg_error_non_fatal22_sts_3a444065_notif_agg_error_non_fatal23_sts_b2d40317_notif_agg_error_non_fatal24_sts_f683d156_notif_agg_error_non_fatal25_sts_d230131e_notif_agg_error_non_fatal26_sts_151712ef_notif_agg_error_non_fatal27_sts_47032eac_notif_agg_error_non_fatal28_sts_3f7a4f3f_notif_agg_error_non_fatal29_sts_48f1fd41_notif_agg_error_non_fatal2_sts_a4970c79_notif_agg_error_non_fatal30_sts_01dd78e0_notif_agg_error_non_fatal31_sts_31f7f819_notif_agg_error_non_fatal3_sts_338aeee3_notif_agg_error_non_fatal4_sts_e4042c21_notif_agg_error_non_fatal5_sts_a127b4e1_notif_agg_error_non_fatal6_sts_529605e3_notif_agg_error_non_fatal7_sts_4bd45005_notif_agg_error_non_fatal8_sts_8310de42_notif_agg_error_non_fatal9_sts_d954a7c3_bit_cg notif_agg_error_non_fatal14_sts_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_t_notif_agg_error_non_fatal0_sts_153b1f81_notif_agg_error_non_fatal10_sts_9bebb60c_notif_agg_error_non_fatal11_sts_8f4fbe62_notif_agg_error_non_fatal12_sts_8fdbfe78_notif_agg_error_non_fatal13_sts_fa5cd768_notif_agg_error_non_fatal14_sts_516359a7_notif_agg_error_non_fatal15_sts_0e9d571f_notif_agg_error_non_fatal16_sts_b79f75d3_notif_agg_error_non_fatal17_sts_0c18cbf4_notif_agg_error_non_fatal18_sts_83d64a1f_notif_agg_error_non_fatal19_sts_346fbbcc_notif_agg_error_non_fatal1_sts_35748ee2_notif_agg_error_non_fatal20_sts_5362c56e_notif_agg_error_non_fatal21_sts_aeabef1a_notif_agg_error_non_fatal22_sts_3a444065_notif_agg_error_non_fatal23_sts_b2d40317_notif_agg_error_non_fatal24_sts_f683d156_notif_agg_error_non_fatal25_sts_d230131e_notif_agg_error_non_fatal26_sts_151712ef_notif_agg_error_non_fatal27_sts_47032eac_notif_agg_error_non_fatal28_sts_3f7a4f3f_notif_agg_error_non_fatal29_sts_48f1fd41_notif_agg_error_non_fatal2_sts_a4970c79_notif_agg_error_non_fatal30_sts_01dd78e0_notif_agg_error_non_fatal31_sts_31f7f819_notif_agg_error_non_fatal3_sts_338aeee3_notif_agg_error_non_fatal4_sts_e4042c21_notif_agg_error_non_fatal5_sts_a127b4e1_notif_agg_error_non_fatal6_sts_529605e3_notif_agg_error_non_fatal7_sts_4bd45005_notif_agg_error_non_fatal8_sts_8310de42_notif_agg_error_non_fatal9_sts_d954a7c3_bit_cg notif_agg_error_non_fatal13_sts_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_t_notif_agg_error_non_fatal0_sts_153b1f81_notif_agg_error_non_fatal10_sts_9bebb60c_notif_agg_error_non_fatal11_sts_8f4fbe62_notif_agg_error_non_fatal12_sts_8fdbfe78_notif_agg_error_non_fatal13_sts_fa5cd768_notif_agg_error_non_fatal14_sts_516359a7_notif_agg_error_non_fatal15_sts_0e9d571f_notif_agg_error_non_fatal16_sts_b79f75d3_notif_agg_error_non_fatal17_sts_0c18cbf4_notif_agg_error_non_fatal18_sts_83d64a1f_notif_agg_error_non_fatal19_sts_346fbbcc_notif_agg_error_non_fatal1_sts_35748ee2_notif_agg_error_non_fatal20_sts_5362c56e_notif_agg_error_non_fatal21_sts_aeabef1a_notif_agg_error_non_fatal22_sts_3a444065_notif_agg_error_non_fatal23_sts_b2d40317_notif_agg_error_non_fatal24_sts_f683d156_notif_agg_error_non_fatal25_sts_d230131e_notif_agg_error_non_fatal26_sts_151712ef_notif_agg_error_non_fatal27_sts_47032eac_notif_agg_error_non_fatal28_sts_3f7a4f3f_notif_agg_error_non_fatal29_sts_48f1fd41_notif_agg_error_non_fatal2_sts_a4970c79_notif_agg_error_non_fatal30_sts_01dd78e0_notif_agg_error_non_fatal31_sts_31f7f819_notif_agg_error_non_fatal3_sts_338aeee3_notif_agg_error_non_fatal4_sts_e4042c21_notif_agg_error_non_fatal5_sts_a127b4e1_notif_agg_error_non_fatal6_sts_529605e3_notif_agg_error_non_fatal7_sts_4bd45005_notif_agg_error_non_fatal8_sts_8310de42_notif_agg_error_non_fatal9_sts_d954a7c3_bit_cg notif_agg_error_non_fatal12_sts_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_t_notif_agg_error_non_fatal0_sts_153b1f81_notif_agg_error_non_fatal10_sts_9bebb60c_notif_agg_error_non_fatal11_sts_8f4fbe62_notif_agg_error_non_fatal12_sts_8fdbfe78_notif_agg_error_non_fatal13_sts_fa5cd768_notif_agg_error_non_fatal14_sts_516359a7_notif_agg_error_non_fatal15_sts_0e9d571f_notif_agg_error_non_fatal16_sts_b79f75d3_notif_agg_error_non_fatal17_sts_0c18cbf4_notif_agg_error_non_fatal18_sts_83d64a1f_notif_agg_error_non_fatal19_sts_346fbbcc_notif_agg_error_non_fatal1_sts_35748ee2_notif_agg_error_non_fatal20_sts_5362c56e_notif_agg_error_non_fatal21_sts_aeabef1a_notif_agg_error_non_fatal22_sts_3a444065_notif_agg_error_non_fatal23_sts_b2d40317_notif_agg_error_non_fatal24_sts_f683d156_notif_agg_error_non_fatal25_sts_d230131e_notif_agg_error_non_fatal26_sts_151712ef_notif_agg_error_non_fatal27_sts_47032eac_notif_agg_error_non_fatal28_sts_3f7a4f3f_notif_agg_error_non_fatal29_sts_48f1fd41_notif_agg_error_non_fatal2_sts_a4970c79_notif_agg_error_non_fatal30_sts_01dd78e0_notif_agg_error_non_fatal31_sts_31f7f819_notif_agg_error_non_fatal3_sts_338aeee3_notif_agg_error_non_fatal4_sts_e4042c21_notif_agg_error_non_fatal5_sts_a127b4e1_notif_agg_error_non_fatal6_sts_529605e3_notif_agg_error_non_fatal7_sts_4bd45005_notif_agg_error_non_fatal8_sts_8310de42_notif_agg_error_non_fatal9_sts_d954a7c3_bit_cg notif_agg_error_non_fatal11_sts_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_t_notif_agg_error_non_fatal0_sts_153b1f81_notif_agg_error_non_fatal10_sts_9bebb60c_notif_agg_error_non_fatal11_sts_8f4fbe62_notif_agg_error_non_fatal12_sts_8fdbfe78_notif_agg_error_non_fatal13_sts_fa5cd768_notif_agg_error_non_fatal14_sts_516359a7_notif_agg_error_non_fatal15_sts_0e9d571f_notif_agg_error_non_fatal16_sts_b79f75d3_notif_agg_error_non_fatal17_sts_0c18cbf4_notif_agg_error_non_fatal18_sts_83d64a1f_notif_agg_error_non_fatal19_sts_346fbbcc_notif_agg_error_non_fatal1_sts_35748ee2_notif_agg_error_non_fatal20_sts_5362c56e_notif_agg_error_non_fatal21_sts_aeabef1a_notif_agg_error_non_fatal22_sts_3a444065_notif_agg_error_non_fatal23_sts_b2d40317_notif_agg_error_non_fatal24_sts_f683d156_notif_agg_error_non_fatal25_sts_d230131e_notif_agg_error_non_fatal26_sts_151712ef_notif_agg_error_non_fatal27_sts_47032eac_notif_agg_error_non_fatal28_sts_3f7a4f3f_notif_agg_error_non_fatal29_sts_48f1fd41_notif_agg_error_non_fatal2_sts_a4970c79_notif_agg_error_non_fatal30_sts_01dd78e0_notif_agg_error_non_fatal31_sts_31f7f819_notif_agg_error_non_fatal3_sts_338aeee3_notif_agg_error_non_fatal4_sts_e4042c21_notif_agg_error_non_fatal5_sts_a127b4e1_notif_agg_error_non_fatal6_sts_529605e3_notif_agg_error_non_fatal7_sts_4bd45005_notif_agg_error_non_fatal8_sts_8310de42_notif_agg_error_non_fatal9_sts_d954a7c3_bit_cg notif_agg_error_non_fatal10_sts_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_t_notif_agg_error_non_fatal0_sts_153b1f81_notif_agg_error_non_fatal10_sts_9bebb60c_notif_agg_error_non_fatal11_sts_8f4fbe62_notif_agg_error_non_fatal12_sts_8fdbfe78_notif_agg_error_non_fatal13_sts_fa5cd768_notif_agg_error_non_fatal14_sts_516359a7_notif_agg_error_non_fatal15_sts_0e9d571f_notif_agg_error_non_fatal16_sts_b79f75d3_notif_agg_error_non_fatal17_sts_0c18cbf4_notif_agg_error_non_fatal18_sts_83d64a1f_notif_agg_error_non_fatal19_sts_346fbbcc_notif_agg_error_non_fatal1_sts_35748ee2_notif_agg_error_non_fatal20_sts_5362c56e_notif_agg_error_non_fatal21_sts_aeabef1a_notif_agg_error_non_fatal22_sts_3a444065_notif_agg_error_non_fatal23_sts_b2d40317_notif_agg_error_non_fatal24_sts_f683d156_notif_agg_error_non_fatal25_sts_d230131e_notif_agg_error_non_fatal26_sts_151712ef_notif_agg_error_non_fatal27_sts_47032eac_notif_agg_error_non_fatal28_sts_3f7a4f3f_notif_agg_error_non_fatal29_sts_48f1fd41_notif_agg_error_non_fatal2_sts_a4970c79_notif_agg_error_non_fatal30_sts_01dd78e0_notif_agg_error_non_fatal31_sts_31f7f819_notif_agg_error_non_fatal3_sts_338aeee3_notif_agg_error_non_fatal4_sts_e4042c21_notif_agg_error_non_fatal5_sts_a127b4e1_notif_agg_error_non_fatal6_sts_529605e3_notif_agg_error_non_fatal7_sts_4bd45005_notif_agg_error_non_fatal8_sts_8310de42_notif_agg_error_non_fatal9_sts_d954a7c3_bit_cg notif_agg_error_non_fatal9_sts_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_t_notif_agg_error_non_fatal0_sts_153b1f81_notif_agg_error_non_fatal10_sts_9bebb60c_notif_agg_error_non_fatal11_sts_8f4fbe62_notif_agg_error_non_fatal12_sts_8fdbfe78_notif_agg_error_non_fatal13_sts_fa5cd768_notif_agg_error_non_fatal14_sts_516359a7_notif_agg_error_non_fatal15_sts_0e9d571f_notif_agg_error_non_fatal16_sts_b79f75d3_notif_agg_error_non_fatal17_sts_0c18cbf4_notif_agg_error_non_fatal18_sts_83d64a1f_notif_agg_error_non_fatal19_sts_346fbbcc_notif_agg_error_non_fatal1_sts_35748ee2_notif_agg_error_non_fatal20_sts_5362c56e_notif_agg_error_non_fatal21_sts_aeabef1a_notif_agg_error_non_fatal22_sts_3a444065_notif_agg_error_non_fatal23_sts_b2d40317_notif_agg_error_non_fatal24_sts_f683d156_notif_agg_error_non_fatal25_sts_d230131e_notif_agg_error_non_fatal26_sts_151712ef_notif_agg_error_non_fatal27_sts_47032eac_notif_agg_error_non_fatal28_sts_3f7a4f3f_notif_agg_error_non_fatal29_sts_48f1fd41_notif_agg_error_non_fatal2_sts_a4970c79_notif_agg_error_non_fatal30_sts_01dd78e0_notif_agg_error_non_fatal31_sts_31f7f819_notif_agg_error_non_fatal3_sts_338aeee3_notif_agg_error_non_fatal4_sts_e4042c21_notif_agg_error_non_fatal5_sts_a127b4e1_notif_agg_error_non_fatal6_sts_529605e3_notif_agg_error_non_fatal7_sts_4bd45005_notif_agg_error_non_fatal8_sts_8310de42_notif_agg_error_non_fatal9_sts_d954a7c3_bit_cg notif_agg_error_non_fatal8_sts_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_t_notif_agg_error_non_fatal0_sts_153b1f81_notif_agg_error_non_fatal10_sts_9bebb60c_notif_agg_error_non_fatal11_sts_8f4fbe62_notif_agg_error_non_fatal12_sts_8fdbfe78_notif_agg_error_non_fatal13_sts_fa5cd768_notif_agg_error_non_fatal14_sts_516359a7_notif_agg_error_non_fatal15_sts_0e9d571f_notif_agg_error_non_fatal16_sts_b79f75d3_notif_agg_error_non_fatal17_sts_0c18cbf4_notif_agg_error_non_fatal18_sts_83d64a1f_notif_agg_error_non_fatal19_sts_346fbbcc_notif_agg_error_non_fatal1_sts_35748ee2_notif_agg_error_non_fatal20_sts_5362c56e_notif_agg_error_non_fatal21_sts_aeabef1a_notif_agg_error_non_fatal22_sts_3a444065_notif_agg_error_non_fatal23_sts_b2d40317_notif_agg_error_non_fatal24_sts_f683d156_notif_agg_error_non_fatal25_sts_d230131e_notif_agg_error_non_fatal26_sts_151712ef_notif_agg_error_non_fatal27_sts_47032eac_notif_agg_error_non_fatal28_sts_3f7a4f3f_notif_agg_error_non_fatal29_sts_48f1fd41_notif_agg_error_non_fatal2_sts_a4970c79_notif_agg_error_non_fatal30_sts_01dd78e0_notif_agg_error_non_fatal31_sts_31f7f819_notif_agg_error_non_fatal3_sts_338aeee3_notif_agg_error_non_fatal4_sts_e4042c21_notif_agg_error_non_fatal5_sts_a127b4e1_notif_agg_error_non_fatal6_sts_529605e3_notif_agg_error_non_fatal7_sts_4bd45005_notif_agg_error_non_fatal8_sts_8310de42_notif_agg_error_non_fatal9_sts_d954a7c3_bit_cg notif_agg_error_non_fatal7_sts_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_t_notif_agg_error_non_fatal0_sts_153b1f81_notif_agg_error_non_fatal10_sts_9bebb60c_notif_agg_error_non_fatal11_sts_8f4fbe62_notif_agg_error_non_fatal12_sts_8fdbfe78_notif_agg_error_non_fatal13_sts_fa5cd768_notif_agg_error_non_fatal14_sts_516359a7_notif_agg_error_non_fatal15_sts_0e9d571f_notif_agg_error_non_fatal16_sts_b79f75d3_notif_agg_error_non_fatal17_sts_0c18cbf4_notif_agg_error_non_fatal18_sts_83d64a1f_notif_agg_error_non_fatal19_sts_346fbbcc_notif_agg_error_non_fatal1_sts_35748ee2_notif_agg_error_non_fatal20_sts_5362c56e_notif_agg_error_non_fatal21_sts_aeabef1a_notif_agg_error_non_fatal22_sts_3a444065_notif_agg_error_non_fatal23_sts_b2d40317_notif_agg_error_non_fatal24_sts_f683d156_notif_agg_error_non_fatal25_sts_d230131e_notif_agg_error_non_fatal26_sts_151712ef_notif_agg_error_non_fatal27_sts_47032eac_notif_agg_error_non_fatal28_sts_3f7a4f3f_notif_agg_error_non_fatal29_sts_48f1fd41_notif_agg_error_non_fatal2_sts_a4970c79_notif_agg_error_non_fatal30_sts_01dd78e0_notif_agg_error_non_fatal31_sts_31f7f819_notif_agg_error_non_fatal3_sts_338aeee3_notif_agg_error_non_fatal4_sts_e4042c21_notif_agg_error_non_fatal5_sts_a127b4e1_notif_agg_error_non_fatal6_sts_529605e3_notif_agg_error_non_fatal7_sts_4bd45005_notif_agg_error_non_fatal8_sts_8310de42_notif_agg_error_non_fatal9_sts_d954a7c3_bit_cg notif_agg_error_non_fatal6_sts_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_t_notif_agg_error_non_fatal0_sts_153b1f81_notif_agg_error_non_fatal10_sts_9bebb60c_notif_agg_error_non_fatal11_sts_8f4fbe62_notif_agg_error_non_fatal12_sts_8fdbfe78_notif_agg_error_non_fatal13_sts_fa5cd768_notif_agg_error_non_fatal14_sts_516359a7_notif_agg_error_non_fatal15_sts_0e9d571f_notif_agg_error_non_fatal16_sts_b79f75d3_notif_agg_error_non_fatal17_sts_0c18cbf4_notif_agg_error_non_fatal18_sts_83d64a1f_notif_agg_error_non_fatal19_sts_346fbbcc_notif_agg_error_non_fatal1_sts_35748ee2_notif_agg_error_non_fatal20_sts_5362c56e_notif_agg_error_non_fatal21_sts_aeabef1a_notif_agg_error_non_fatal22_sts_3a444065_notif_agg_error_non_fatal23_sts_b2d40317_notif_agg_error_non_fatal24_sts_f683d156_notif_agg_error_non_fatal25_sts_d230131e_notif_agg_error_non_fatal26_sts_151712ef_notif_agg_error_non_fatal27_sts_47032eac_notif_agg_error_non_fatal28_sts_3f7a4f3f_notif_agg_error_non_fatal29_sts_48f1fd41_notif_agg_error_non_fatal2_sts_a4970c79_notif_agg_error_non_fatal30_sts_01dd78e0_notif_agg_error_non_fatal31_sts_31f7f819_notif_agg_error_non_fatal3_sts_338aeee3_notif_agg_error_non_fatal4_sts_e4042c21_notif_agg_error_non_fatal5_sts_a127b4e1_notif_agg_error_non_fatal6_sts_529605e3_notif_agg_error_non_fatal7_sts_4bd45005_notif_agg_error_non_fatal8_sts_8310de42_notif_agg_error_non_fatal9_sts_d954a7c3_bit_cg notif_agg_error_non_fatal5_sts_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_t_notif_agg_error_non_fatal0_sts_153b1f81_notif_agg_error_non_fatal10_sts_9bebb60c_notif_agg_error_non_fatal11_sts_8f4fbe62_notif_agg_error_non_fatal12_sts_8fdbfe78_notif_agg_error_non_fatal13_sts_fa5cd768_notif_agg_error_non_fatal14_sts_516359a7_notif_agg_error_non_fatal15_sts_0e9d571f_notif_agg_error_non_fatal16_sts_b79f75d3_notif_agg_error_non_fatal17_sts_0c18cbf4_notif_agg_error_non_fatal18_sts_83d64a1f_notif_agg_error_non_fatal19_sts_346fbbcc_notif_agg_error_non_fatal1_sts_35748ee2_notif_agg_error_non_fatal20_sts_5362c56e_notif_agg_error_non_fatal21_sts_aeabef1a_notif_agg_error_non_fatal22_sts_3a444065_notif_agg_error_non_fatal23_sts_b2d40317_notif_agg_error_non_fatal24_sts_f683d156_notif_agg_error_non_fatal25_sts_d230131e_notif_agg_error_non_fatal26_sts_151712ef_notif_agg_error_non_fatal27_sts_47032eac_notif_agg_error_non_fatal28_sts_3f7a4f3f_notif_agg_error_non_fatal29_sts_48f1fd41_notif_agg_error_non_fatal2_sts_a4970c79_notif_agg_error_non_fatal30_sts_01dd78e0_notif_agg_error_non_fatal31_sts_31f7f819_notif_agg_error_non_fatal3_sts_338aeee3_notif_agg_error_non_fatal4_sts_e4042c21_notif_agg_error_non_fatal5_sts_a127b4e1_notif_agg_error_non_fatal6_sts_529605e3_notif_agg_error_non_fatal7_sts_4bd45005_notif_agg_error_non_fatal8_sts_8310de42_notif_agg_error_non_fatal9_sts_d954a7c3_bit_cg notif_agg_error_non_fatal4_sts_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_t_notif_agg_error_non_fatal0_sts_153b1f81_notif_agg_error_non_fatal10_sts_9bebb60c_notif_agg_error_non_fatal11_sts_8f4fbe62_notif_agg_error_non_fatal12_sts_8fdbfe78_notif_agg_error_non_fatal13_sts_fa5cd768_notif_agg_error_non_fatal14_sts_516359a7_notif_agg_error_non_fatal15_sts_0e9d571f_notif_agg_error_non_fatal16_sts_b79f75d3_notif_agg_error_non_fatal17_sts_0c18cbf4_notif_agg_error_non_fatal18_sts_83d64a1f_notif_agg_error_non_fatal19_sts_346fbbcc_notif_agg_error_non_fatal1_sts_35748ee2_notif_agg_error_non_fatal20_sts_5362c56e_notif_agg_error_non_fatal21_sts_aeabef1a_notif_agg_error_non_fatal22_sts_3a444065_notif_agg_error_non_fatal23_sts_b2d40317_notif_agg_error_non_fatal24_sts_f683d156_notif_agg_error_non_fatal25_sts_d230131e_notif_agg_error_non_fatal26_sts_151712ef_notif_agg_error_non_fatal27_sts_47032eac_notif_agg_error_non_fatal28_sts_3f7a4f3f_notif_agg_error_non_fatal29_sts_48f1fd41_notif_agg_error_non_fatal2_sts_a4970c79_notif_agg_error_non_fatal30_sts_01dd78e0_notif_agg_error_non_fatal31_sts_31f7f819_notif_agg_error_non_fatal3_sts_338aeee3_notif_agg_error_non_fatal4_sts_e4042c21_notif_agg_error_non_fatal5_sts_a127b4e1_notif_agg_error_non_fatal6_sts_529605e3_notif_agg_error_non_fatal7_sts_4bd45005_notif_agg_error_non_fatal8_sts_8310de42_notif_agg_error_non_fatal9_sts_d954a7c3_bit_cg notif_agg_error_non_fatal3_sts_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_t_notif_agg_error_non_fatal0_sts_153b1f81_notif_agg_error_non_fatal10_sts_9bebb60c_notif_agg_error_non_fatal11_sts_8f4fbe62_notif_agg_error_non_fatal12_sts_8fdbfe78_notif_agg_error_non_fatal13_sts_fa5cd768_notif_agg_error_non_fatal14_sts_516359a7_notif_agg_error_non_fatal15_sts_0e9d571f_notif_agg_error_non_fatal16_sts_b79f75d3_notif_agg_error_non_fatal17_sts_0c18cbf4_notif_agg_error_non_fatal18_sts_83d64a1f_notif_agg_error_non_fatal19_sts_346fbbcc_notif_agg_error_non_fatal1_sts_35748ee2_notif_agg_error_non_fatal20_sts_5362c56e_notif_agg_error_non_fatal21_sts_aeabef1a_notif_agg_error_non_fatal22_sts_3a444065_notif_agg_error_non_fatal23_sts_b2d40317_notif_agg_error_non_fatal24_sts_f683d156_notif_agg_error_non_fatal25_sts_d230131e_notif_agg_error_non_fatal26_sts_151712ef_notif_agg_error_non_fatal27_sts_47032eac_notif_agg_error_non_fatal28_sts_3f7a4f3f_notif_agg_error_non_fatal29_sts_48f1fd41_notif_agg_error_non_fatal2_sts_a4970c79_notif_agg_error_non_fatal30_sts_01dd78e0_notif_agg_error_non_fatal31_sts_31f7f819_notif_agg_error_non_fatal3_sts_338aeee3_notif_agg_error_non_fatal4_sts_e4042c21_notif_agg_error_non_fatal5_sts_a127b4e1_notif_agg_error_non_fatal6_sts_529605e3_notif_agg_error_non_fatal7_sts_4bd45005_notif_agg_error_non_fatal8_sts_8310de42_notif_agg_error_non_fatal9_sts_d954a7c3_bit_cg notif_agg_error_non_fatal2_sts_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_t_notif_agg_error_non_fatal0_sts_153b1f81_notif_agg_error_non_fatal10_sts_9bebb60c_notif_agg_error_non_fatal11_sts_8f4fbe62_notif_agg_error_non_fatal12_sts_8fdbfe78_notif_agg_error_non_fatal13_sts_fa5cd768_notif_agg_error_non_fatal14_sts_516359a7_notif_agg_error_non_fatal15_sts_0e9d571f_notif_agg_error_non_fatal16_sts_b79f75d3_notif_agg_error_non_fatal17_sts_0c18cbf4_notif_agg_error_non_fatal18_sts_83d64a1f_notif_agg_error_non_fatal19_sts_346fbbcc_notif_agg_error_non_fatal1_sts_35748ee2_notif_agg_error_non_fatal20_sts_5362c56e_notif_agg_error_non_fatal21_sts_aeabef1a_notif_agg_error_non_fatal22_sts_3a444065_notif_agg_error_non_fatal23_sts_b2d40317_notif_agg_error_non_fatal24_sts_f683d156_notif_agg_error_non_fatal25_sts_d230131e_notif_agg_error_non_fatal26_sts_151712ef_notif_agg_error_non_fatal27_sts_47032eac_notif_agg_error_non_fatal28_sts_3f7a4f3f_notif_agg_error_non_fatal29_sts_48f1fd41_notif_agg_error_non_fatal2_sts_a4970c79_notif_agg_error_non_fatal30_sts_01dd78e0_notif_agg_error_non_fatal31_sts_31f7f819_notif_agg_error_non_fatal3_sts_338aeee3_notif_agg_error_non_fatal4_sts_e4042c21_notif_agg_error_non_fatal5_sts_a127b4e1_notif_agg_error_non_fatal6_sts_529605e3_notif_agg_error_non_fatal7_sts_4bd45005_notif_agg_error_non_fatal8_sts_8310de42_notif_agg_error_non_fatal9_sts_d954a7c3_bit_cg notif_agg_error_non_fatal1_sts_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_t_notif_agg_error_non_fatal0_sts_153b1f81_notif_agg_error_non_fatal10_sts_9bebb60c_notif_agg_error_non_fatal11_sts_8f4fbe62_notif_agg_error_non_fatal12_sts_8fdbfe78_notif_agg_error_non_fatal13_sts_fa5cd768_notif_agg_error_non_fatal14_sts_516359a7_notif_agg_error_non_fatal15_sts_0e9d571f_notif_agg_error_non_fatal16_sts_b79f75d3_notif_agg_error_non_fatal17_sts_0c18cbf4_notif_agg_error_non_fatal18_sts_83d64a1f_notif_agg_error_non_fatal19_sts_346fbbcc_notif_agg_error_non_fatal1_sts_35748ee2_notif_agg_error_non_fatal20_sts_5362c56e_notif_agg_error_non_fatal21_sts_aeabef1a_notif_agg_error_non_fatal22_sts_3a444065_notif_agg_error_non_fatal23_sts_b2d40317_notif_agg_error_non_fatal24_sts_f683d156_notif_agg_error_non_fatal25_sts_d230131e_notif_agg_error_non_fatal26_sts_151712ef_notif_agg_error_non_fatal27_sts_47032eac_notif_agg_error_non_fatal28_sts_3f7a4f3f_notif_agg_error_non_fatal29_sts_48f1fd41_notif_agg_error_non_fatal2_sts_a4970c79_notif_agg_error_non_fatal30_sts_01dd78e0_notif_agg_error_non_fatal31_sts_31f7f819_notif_agg_error_non_fatal3_sts_338aeee3_notif_agg_error_non_fatal4_sts_e4042c21_notif_agg_error_non_fatal5_sts_a127b4e1_notif_agg_error_non_fatal6_sts_529605e3_notif_agg_error_non_fatal7_sts_4bd45005_notif_agg_error_non_fatal8_sts_8310de42_notif_agg_error_non_fatal9_sts_d954a7c3_bit_cg notif_agg_error_non_fatal0_sts_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_t_notif_agg_error_non_fatal0_sts_153b1f81_notif_agg_error_non_fatal10_sts_9bebb60c_notif_agg_error_non_fatal11_sts_8f4fbe62_notif_agg_error_non_fatal12_sts_8fdbfe78_notif_agg_error_non_fatal13_sts_fa5cd768_notif_agg_error_non_fatal14_sts_516359a7_notif_agg_error_non_fatal15_sts_0e9d571f_notif_agg_error_non_fatal16_sts_b79f75d3_notif_agg_error_non_fatal17_sts_0c18cbf4_notif_agg_error_non_fatal18_sts_83d64a1f_notif_agg_error_non_fatal19_sts_346fbbcc_notif_agg_error_non_fatal1_sts_35748ee2_notif_agg_error_non_fatal20_sts_5362c56e_notif_agg_error_non_fatal21_sts_aeabef1a_notif_agg_error_non_fatal22_sts_3a444065_notif_agg_error_non_fatal23_sts_b2d40317_notif_agg_error_non_fatal24_sts_f683d156_notif_agg_error_non_fatal25_sts_d230131e_notif_agg_error_non_fatal26_sts_151712ef_notif_agg_error_non_fatal27_sts_47032eac_notif_agg_error_non_fatal28_sts_3f7a4f3f_notif_agg_error_non_fatal29_sts_48f1fd41_notif_agg_error_non_fatal2_sts_a4970c79_notif_agg_error_non_fatal30_sts_01dd78e0_notif_agg_error_non_fatal31_sts_31f7f819_notif_agg_error_non_fatal3_sts_338aeee3_notif_agg_error_non_fatal4_sts_e4042c21_notif_agg_error_non_fatal5_sts_a127b4e1_notif_agg_error_non_fatal6_sts_529605e3_notif_agg_error_non_fatal7_sts_4bd45005_notif_agg_error_non_fatal8_sts_8310de42_notif_agg_error_non_fatal9_sts_d954a7c3_fld_cg fld_cg;
        rand uvm_reg_field notif_agg_error_non_fatal31_sts;
        rand uvm_reg_field notif_agg_error_non_fatal30_sts;
        rand uvm_reg_field notif_agg_error_non_fatal29_sts;
        rand uvm_reg_field notif_agg_error_non_fatal28_sts;
        rand uvm_reg_field notif_agg_error_non_fatal27_sts;
        rand uvm_reg_field notif_agg_error_non_fatal26_sts;
        rand uvm_reg_field notif_agg_error_non_fatal25_sts;
        rand uvm_reg_field notif_agg_error_non_fatal24_sts;
        rand uvm_reg_field notif_agg_error_non_fatal23_sts;
        rand uvm_reg_field notif_agg_error_non_fatal22_sts;
        rand uvm_reg_field notif_agg_error_non_fatal21_sts;
        rand uvm_reg_field notif_agg_error_non_fatal20_sts;
        rand uvm_reg_field notif_agg_error_non_fatal19_sts;
        rand uvm_reg_field notif_agg_error_non_fatal18_sts;
        rand uvm_reg_field notif_agg_error_non_fatal17_sts;
        rand uvm_reg_field notif_agg_error_non_fatal16_sts;
        rand uvm_reg_field notif_agg_error_non_fatal15_sts;
        rand uvm_reg_field notif_agg_error_non_fatal14_sts;
        rand uvm_reg_field notif_agg_error_non_fatal13_sts;
        rand uvm_reg_field notif_agg_error_non_fatal12_sts;
        rand uvm_reg_field notif_agg_error_non_fatal11_sts;
        rand uvm_reg_field notif_agg_error_non_fatal10_sts;
        rand uvm_reg_field notif_agg_error_non_fatal9_sts;
        rand uvm_reg_field notif_agg_error_non_fatal8_sts;
        rand uvm_reg_field notif_agg_error_non_fatal7_sts;
        rand uvm_reg_field notif_agg_error_non_fatal6_sts;
        rand uvm_reg_field notif_agg_error_non_fatal5_sts;
        rand uvm_reg_field notif_agg_error_non_fatal4_sts;
        rand uvm_reg_field notif_agg_error_non_fatal3_sts;
        rand uvm_reg_field notif_agg_error_non_fatal2_sts;
        rand uvm_reg_field notif_agg_error_non_fatal1_sts;
        rand uvm_reg_field notif_agg_error_non_fatal0_sts;

        function new(string name = "mci_reg__intr_block_t__notif1_intr_t_notif_agg_error_non_fatal0_sts_153b1f81_notif_agg_error_non_fatal10_sts_9bebb60c_notif_agg_error_non_fatal11_sts_8f4fbe62_notif_agg_error_non_fatal12_sts_8fdbfe78_notif_agg_error_non_fatal13_sts_fa5cd768_notif_agg_error_non_fatal14_sts_516359a7_notif_agg_error_non_fatal15_sts_0e9d571f_notif_agg_error_non_fatal16_sts_b79f75d3_notif_agg_error_non_fatal17_sts_0c18cbf4_notif_agg_error_non_fatal18_sts_83d64a1f_notif_agg_error_non_fatal19_sts_346fbbcc_notif_agg_error_non_fatal1_sts_35748ee2_notif_agg_error_non_fatal20_sts_5362c56e_notif_agg_error_non_fatal21_sts_aeabef1a_notif_agg_error_non_fatal22_sts_3a444065_notif_agg_error_non_fatal23_sts_b2d40317_notif_agg_error_non_fatal24_sts_f683d156_notif_agg_error_non_fatal25_sts_d230131e_notif_agg_error_non_fatal26_sts_151712ef_notif_agg_error_non_fatal27_sts_47032eac_notif_agg_error_non_fatal28_sts_3f7a4f3f_notif_agg_error_non_fatal29_sts_48f1fd41_notif_agg_error_non_fatal2_sts_a4970c79_notif_agg_error_non_fatal30_sts_01dd78e0_notif_agg_error_non_fatal31_sts_31f7f819_notif_agg_error_non_fatal3_sts_338aeee3_notif_agg_error_non_fatal4_sts_e4042c21_notif_agg_error_non_fatal5_sts_a127b4e1_notif_agg_error_non_fatal6_sts_529605e3_notif_agg_error_non_fatal7_sts_4bd45005_notif_agg_error_non_fatal8_sts_8310de42_notif_agg_error_non_fatal9_sts_d954a7c3");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.notif_agg_error_non_fatal31_sts = new("notif_agg_error_non_fatal31_sts");
            this.notif_agg_error_non_fatal31_sts.configure(this, 1, 0, "W1C", 1, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal30_sts = new("notif_agg_error_non_fatal30_sts");
            this.notif_agg_error_non_fatal30_sts.configure(this, 1, 1, "W1C", 1, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal29_sts = new("notif_agg_error_non_fatal29_sts");
            this.notif_agg_error_non_fatal29_sts.configure(this, 1, 2, "W1C", 1, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal28_sts = new("notif_agg_error_non_fatal28_sts");
            this.notif_agg_error_non_fatal28_sts.configure(this, 1, 3, "W1C", 1, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal27_sts = new("notif_agg_error_non_fatal27_sts");
            this.notif_agg_error_non_fatal27_sts.configure(this, 1, 4, "W1C", 1, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal26_sts = new("notif_agg_error_non_fatal26_sts");
            this.notif_agg_error_non_fatal26_sts.configure(this, 1, 5, "W1C", 1, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal25_sts = new("notif_agg_error_non_fatal25_sts");
            this.notif_agg_error_non_fatal25_sts.configure(this, 1, 6, "W1C", 1, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal24_sts = new("notif_agg_error_non_fatal24_sts");
            this.notif_agg_error_non_fatal24_sts.configure(this, 1, 7, "W1C", 1, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal23_sts = new("notif_agg_error_non_fatal23_sts");
            this.notif_agg_error_non_fatal23_sts.configure(this, 1, 8, "W1C", 1, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal22_sts = new("notif_agg_error_non_fatal22_sts");
            this.notif_agg_error_non_fatal22_sts.configure(this, 1, 9, "W1C", 1, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal21_sts = new("notif_agg_error_non_fatal21_sts");
            this.notif_agg_error_non_fatal21_sts.configure(this, 1, 10, "W1C", 1, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal20_sts = new("notif_agg_error_non_fatal20_sts");
            this.notif_agg_error_non_fatal20_sts.configure(this, 1, 11, "W1C", 1, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal19_sts = new("notif_agg_error_non_fatal19_sts");
            this.notif_agg_error_non_fatal19_sts.configure(this, 1, 12, "W1C", 1, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal18_sts = new("notif_agg_error_non_fatal18_sts");
            this.notif_agg_error_non_fatal18_sts.configure(this, 1, 13, "W1C", 1, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal17_sts = new("notif_agg_error_non_fatal17_sts");
            this.notif_agg_error_non_fatal17_sts.configure(this, 1, 14, "W1C", 1, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal16_sts = new("notif_agg_error_non_fatal16_sts");
            this.notif_agg_error_non_fatal16_sts.configure(this, 1, 15, "W1C", 1, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal15_sts = new("notif_agg_error_non_fatal15_sts");
            this.notif_agg_error_non_fatal15_sts.configure(this, 1, 16, "W1C", 1, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal14_sts = new("notif_agg_error_non_fatal14_sts");
            this.notif_agg_error_non_fatal14_sts.configure(this, 1, 17, "W1C", 1, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal13_sts = new("notif_agg_error_non_fatal13_sts");
            this.notif_agg_error_non_fatal13_sts.configure(this, 1, 18, "W1C", 1, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal12_sts = new("notif_agg_error_non_fatal12_sts");
            this.notif_agg_error_non_fatal12_sts.configure(this, 1, 19, "W1C", 1, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal11_sts = new("notif_agg_error_non_fatal11_sts");
            this.notif_agg_error_non_fatal11_sts.configure(this, 1, 20, "W1C", 1, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal10_sts = new("notif_agg_error_non_fatal10_sts");
            this.notif_agg_error_non_fatal10_sts.configure(this, 1, 21, "W1C", 1, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal9_sts = new("notif_agg_error_non_fatal9_sts");
            this.notif_agg_error_non_fatal9_sts.configure(this, 1, 22, "W1C", 1, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal8_sts = new("notif_agg_error_non_fatal8_sts");
            this.notif_agg_error_non_fatal8_sts.configure(this, 1, 23, "W1C", 1, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal7_sts = new("notif_agg_error_non_fatal7_sts");
            this.notif_agg_error_non_fatal7_sts.configure(this, 1, 24, "W1C", 1, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal6_sts = new("notif_agg_error_non_fatal6_sts");
            this.notif_agg_error_non_fatal6_sts.configure(this, 1, 25, "W1C", 1, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal5_sts = new("notif_agg_error_non_fatal5_sts");
            this.notif_agg_error_non_fatal5_sts.configure(this, 1, 26, "W1C", 1, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal4_sts = new("notif_agg_error_non_fatal4_sts");
            this.notif_agg_error_non_fatal4_sts.configure(this, 1, 27, "W1C", 1, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal3_sts = new("notif_agg_error_non_fatal3_sts");
            this.notif_agg_error_non_fatal3_sts.configure(this, 1, 28, "W1C", 1, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal2_sts = new("notif_agg_error_non_fatal2_sts");
            this.notif_agg_error_non_fatal2_sts.configure(this, 1, 29, "W1C", 1, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal1_sts = new("notif_agg_error_non_fatal1_sts");
            this.notif_agg_error_non_fatal1_sts.configure(this, 1, 30, "W1C", 1, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal0_sts = new("notif_agg_error_non_fatal0_sts");
            this.notif_agg_error_non_fatal0_sts.configure(this, 1, 31, "W1C", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(notif_agg_error_non_fatal31_sts_bit_cg[bt]) notif_agg_error_non_fatal31_sts_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal30_sts_bit_cg[bt]) notif_agg_error_non_fatal30_sts_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal29_sts_bit_cg[bt]) notif_agg_error_non_fatal29_sts_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal28_sts_bit_cg[bt]) notif_agg_error_non_fatal28_sts_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal27_sts_bit_cg[bt]) notif_agg_error_non_fatal27_sts_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal26_sts_bit_cg[bt]) notif_agg_error_non_fatal26_sts_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal25_sts_bit_cg[bt]) notif_agg_error_non_fatal25_sts_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal24_sts_bit_cg[bt]) notif_agg_error_non_fatal24_sts_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal23_sts_bit_cg[bt]) notif_agg_error_non_fatal23_sts_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal22_sts_bit_cg[bt]) notif_agg_error_non_fatal22_sts_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal21_sts_bit_cg[bt]) notif_agg_error_non_fatal21_sts_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal20_sts_bit_cg[bt]) notif_agg_error_non_fatal20_sts_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal19_sts_bit_cg[bt]) notif_agg_error_non_fatal19_sts_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal18_sts_bit_cg[bt]) notif_agg_error_non_fatal18_sts_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal17_sts_bit_cg[bt]) notif_agg_error_non_fatal17_sts_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal16_sts_bit_cg[bt]) notif_agg_error_non_fatal16_sts_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal15_sts_bit_cg[bt]) notif_agg_error_non_fatal15_sts_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal14_sts_bit_cg[bt]) notif_agg_error_non_fatal14_sts_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal13_sts_bit_cg[bt]) notif_agg_error_non_fatal13_sts_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal12_sts_bit_cg[bt]) notif_agg_error_non_fatal12_sts_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal11_sts_bit_cg[bt]) notif_agg_error_non_fatal11_sts_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal10_sts_bit_cg[bt]) notif_agg_error_non_fatal10_sts_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal9_sts_bit_cg[bt]) notif_agg_error_non_fatal9_sts_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal8_sts_bit_cg[bt]) notif_agg_error_non_fatal8_sts_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal7_sts_bit_cg[bt]) notif_agg_error_non_fatal7_sts_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal6_sts_bit_cg[bt]) notif_agg_error_non_fatal6_sts_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal5_sts_bit_cg[bt]) notif_agg_error_non_fatal5_sts_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal4_sts_bit_cg[bt]) notif_agg_error_non_fatal4_sts_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal3_sts_bit_cg[bt]) notif_agg_error_non_fatal3_sts_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal2_sts_bit_cg[bt]) notif_agg_error_non_fatal2_sts_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal1_sts_bit_cg[bt]) notif_agg_error_non_fatal1_sts_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal0_sts_bit_cg[bt]) notif_agg_error_non_fatal0_sts_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__notif1_intr_t_notif_agg_error_non_fatal0_sts_153b1f81_notif_agg_error_non_fatal10_sts_9bebb60c_notif_agg_error_non_fatal11_sts_8f4fbe62_notif_agg_error_non_fatal12_sts_8fdbfe78_notif_agg_error_non_fatal13_sts_fa5cd768_notif_agg_error_non_fatal14_sts_516359a7_notif_agg_error_non_fatal15_sts_0e9d571f_notif_agg_error_non_fatal16_sts_b79f75d3_notif_agg_error_non_fatal17_sts_0c18cbf4_notif_agg_error_non_fatal18_sts_83d64a1f_notif_agg_error_non_fatal19_sts_346fbbcc_notif_agg_error_non_fatal1_sts_35748ee2_notif_agg_error_non_fatal20_sts_5362c56e_notif_agg_error_non_fatal21_sts_aeabef1a_notif_agg_error_non_fatal22_sts_3a444065_notif_agg_error_non_fatal23_sts_b2d40317_notif_agg_error_non_fatal24_sts_f683d156_notif_agg_error_non_fatal25_sts_d230131e_notif_agg_error_non_fatal26_sts_151712ef_notif_agg_error_non_fatal27_sts_47032eac_notif_agg_error_non_fatal28_sts_3f7a4f3f_notif_agg_error_non_fatal29_sts_48f1fd41_notif_agg_error_non_fatal2_sts_a4970c79_notif_agg_error_non_fatal30_sts_01dd78e0_notif_agg_error_non_fatal31_sts_31f7f819_notif_agg_error_non_fatal3_sts_338aeee3_notif_agg_error_non_fatal4_sts_e4042c21_notif_agg_error_non_fatal5_sts_a127b4e1_notif_agg_error_non_fatal6_sts_529605e3_notif_agg_error_non_fatal7_sts_4bd45005_notif_agg_error_non_fatal8_sts_8310de42_notif_agg_error_non_fatal9_sts_d954a7c3

    // Reg - mci_reg::intr_block_t::error0_intr_trig_t
    class mci_reg__intr_block_t__error0_intr_trig_t extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__error0_intr_trig_t_bit_cg error_wdt_timer1_timeout_trig_bit_cg[1];
        mci_reg__intr_block_t__error0_intr_trig_t_bit_cg error_wdt_timer2_timeout_trig_bit_cg[1];
        mci_reg__intr_block_t__error0_intr_trig_t_fld_cg fld_cg;
        rand uvm_reg_field error_wdt_timer1_timeout_trig;
        rand uvm_reg_field error_wdt_timer2_timeout_trig;

        function new(string name = "mci_reg__intr_block_t__error0_intr_trig_t");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.error_wdt_timer1_timeout_trig = new("error_wdt_timer1_timeout_trig");
            this.error_wdt_timer1_timeout_trig.configure(this, 1, 0, "W1S", 0, 'h0, 1, 1, 0);
            this.error_wdt_timer2_timeout_trig = new("error_wdt_timer2_timeout_trig");
            this.error_wdt_timer2_timeout_trig.configure(this, 1, 1, "W1S", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(error_wdt_timer1_timeout_trig_bit_cg[bt]) error_wdt_timer1_timeout_trig_bit_cg[bt] = new();
                foreach(error_wdt_timer2_timeout_trig_bit_cg[bt]) error_wdt_timer2_timeout_trig_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__error0_intr_trig_t

    // Reg - mci_reg::intr_block_t::error1_intr_trig_t
    class mci_reg__intr_block_t__error1_intr_trig_t extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__error1_intr_trig_t_bit_cg error_agg_error_fatal31_trig_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_trig_t_bit_cg error_agg_error_fatal30_trig_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_trig_t_bit_cg error_agg_error_fatal29_trig_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_trig_t_bit_cg error_agg_error_fatal28_trig_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_trig_t_bit_cg error_agg_error_fatal27_trig_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_trig_t_bit_cg error_agg_error_fatal26_trig_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_trig_t_bit_cg error_agg_error_fatal25_trig_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_trig_t_bit_cg error_agg_error_fatal24_trig_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_trig_t_bit_cg error_agg_error_fatal23_trig_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_trig_t_bit_cg error_agg_error_fatal22_trig_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_trig_t_bit_cg error_agg_error_fatal21_trig_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_trig_t_bit_cg error_agg_error_fatal20_trig_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_trig_t_bit_cg error_agg_error_fatal19_trig_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_trig_t_bit_cg error_agg_error_fatal18_trig_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_trig_t_bit_cg error_agg_error_fatal17_trig_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_trig_t_bit_cg error_agg_error_fatal16_trig_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_trig_t_bit_cg error_agg_error_fatal15_trig_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_trig_t_bit_cg error_agg_error_fatal14_trig_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_trig_t_bit_cg error_agg_error_fatal13_trig_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_trig_t_bit_cg error_agg_error_fatal12_trig_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_trig_t_bit_cg error_agg_error_fatal11_trig_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_trig_t_bit_cg error_agg_error_fatal10_trig_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_trig_t_bit_cg error_agg_error_fatal9_trig_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_trig_t_bit_cg error_agg_error_fatal8_trig_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_trig_t_bit_cg error_agg_error_fatal7_trig_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_trig_t_bit_cg error_agg_error_fatal6_trig_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_trig_t_bit_cg error_agg_error_fatal5_trig_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_trig_t_bit_cg error_agg_error_fatal4_trig_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_trig_t_bit_cg error_agg_error_fatal3_trig_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_trig_t_bit_cg error_agg_error_fatal2_trig_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_trig_t_bit_cg error_agg_error_fatal1_trig_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_trig_t_bit_cg error_agg_error_fatal0_trig_bit_cg[1];
        mci_reg__intr_block_t__error1_intr_trig_t_fld_cg fld_cg;
        rand uvm_reg_field error_agg_error_fatal31_trig;
        rand uvm_reg_field error_agg_error_fatal30_trig;
        rand uvm_reg_field error_agg_error_fatal29_trig;
        rand uvm_reg_field error_agg_error_fatal28_trig;
        rand uvm_reg_field error_agg_error_fatal27_trig;
        rand uvm_reg_field error_agg_error_fatal26_trig;
        rand uvm_reg_field error_agg_error_fatal25_trig;
        rand uvm_reg_field error_agg_error_fatal24_trig;
        rand uvm_reg_field error_agg_error_fatal23_trig;
        rand uvm_reg_field error_agg_error_fatal22_trig;
        rand uvm_reg_field error_agg_error_fatal21_trig;
        rand uvm_reg_field error_agg_error_fatal20_trig;
        rand uvm_reg_field error_agg_error_fatal19_trig;
        rand uvm_reg_field error_agg_error_fatal18_trig;
        rand uvm_reg_field error_agg_error_fatal17_trig;
        rand uvm_reg_field error_agg_error_fatal16_trig;
        rand uvm_reg_field error_agg_error_fatal15_trig;
        rand uvm_reg_field error_agg_error_fatal14_trig;
        rand uvm_reg_field error_agg_error_fatal13_trig;
        rand uvm_reg_field error_agg_error_fatal12_trig;
        rand uvm_reg_field error_agg_error_fatal11_trig;
        rand uvm_reg_field error_agg_error_fatal10_trig;
        rand uvm_reg_field error_agg_error_fatal9_trig;
        rand uvm_reg_field error_agg_error_fatal8_trig;
        rand uvm_reg_field error_agg_error_fatal7_trig;
        rand uvm_reg_field error_agg_error_fatal6_trig;
        rand uvm_reg_field error_agg_error_fatal5_trig;
        rand uvm_reg_field error_agg_error_fatal4_trig;
        rand uvm_reg_field error_agg_error_fatal3_trig;
        rand uvm_reg_field error_agg_error_fatal2_trig;
        rand uvm_reg_field error_agg_error_fatal1_trig;
        rand uvm_reg_field error_agg_error_fatal0_trig;

        function new(string name = "mci_reg__intr_block_t__error1_intr_trig_t");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.error_agg_error_fatal31_trig = new("error_agg_error_fatal31_trig");
            this.error_agg_error_fatal31_trig.configure(this, 1, 0, "W1S", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal30_trig = new("error_agg_error_fatal30_trig");
            this.error_agg_error_fatal30_trig.configure(this, 1, 1, "W1S", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal29_trig = new("error_agg_error_fatal29_trig");
            this.error_agg_error_fatal29_trig.configure(this, 1, 2, "W1S", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal28_trig = new("error_agg_error_fatal28_trig");
            this.error_agg_error_fatal28_trig.configure(this, 1, 3, "W1S", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal27_trig = new("error_agg_error_fatal27_trig");
            this.error_agg_error_fatal27_trig.configure(this, 1, 4, "W1S", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal26_trig = new("error_agg_error_fatal26_trig");
            this.error_agg_error_fatal26_trig.configure(this, 1, 5, "W1S", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal25_trig = new("error_agg_error_fatal25_trig");
            this.error_agg_error_fatal25_trig.configure(this, 1, 6, "W1S", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal24_trig = new("error_agg_error_fatal24_trig");
            this.error_agg_error_fatal24_trig.configure(this, 1, 7, "W1S", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal23_trig = new("error_agg_error_fatal23_trig");
            this.error_agg_error_fatal23_trig.configure(this, 1, 8, "W1S", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal22_trig = new("error_agg_error_fatal22_trig");
            this.error_agg_error_fatal22_trig.configure(this, 1, 9, "W1S", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal21_trig = new("error_agg_error_fatal21_trig");
            this.error_agg_error_fatal21_trig.configure(this, 1, 10, "W1S", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal20_trig = new("error_agg_error_fatal20_trig");
            this.error_agg_error_fatal20_trig.configure(this, 1, 11, "W1S", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal19_trig = new("error_agg_error_fatal19_trig");
            this.error_agg_error_fatal19_trig.configure(this, 1, 12, "W1S", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal18_trig = new("error_agg_error_fatal18_trig");
            this.error_agg_error_fatal18_trig.configure(this, 1, 13, "W1S", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal17_trig = new("error_agg_error_fatal17_trig");
            this.error_agg_error_fatal17_trig.configure(this, 1, 14, "W1S", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal16_trig = new("error_agg_error_fatal16_trig");
            this.error_agg_error_fatal16_trig.configure(this, 1, 15, "W1S", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal15_trig = new("error_agg_error_fatal15_trig");
            this.error_agg_error_fatal15_trig.configure(this, 1, 16, "W1S", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal14_trig = new("error_agg_error_fatal14_trig");
            this.error_agg_error_fatal14_trig.configure(this, 1, 17, "W1S", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal13_trig = new("error_agg_error_fatal13_trig");
            this.error_agg_error_fatal13_trig.configure(this, 1, 18, "W1S", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal12_trig = new("error_agg_error_fatal12_trig");
            this.error_agg_error_fatal12_trig.configure(this, 1, 19, "W1S", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal11_trig = new("error_agg_error_fatal11_trig");
            this.error_agg_error_fatal11_trig.configure(this, 1, 20, "W1S", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal10_trig = new("error_agg_error_fatal10_trig");
            this.error_agg_error_fatal10_trig.configure(this, 1, 21, "W1S", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal9_trig = new("error_agg_error_fatal9_trig");
            this.error_agg_error_fatal9_trig.configure(this, 1, 22, "W1S", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal8_trig = new("error_agg_error_fatal8_trig");
            this.error_agg_error_fatal8_trig.configure(this, 1, 23, "W1S", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal7_trig = new("error_agg_error_fatal7_trig");
            this.error_agg_error_fatal7_trig.configure(this, 1, 24, "W1S", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal6_trig = new("error_agg_error_fatal6_trig");
            this.error_agg_error_fatal6_trig.configure(this, 1, 25, "W1S", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal5_trig = new("error_agg_error_fatal5_trig");
            this.error_agg_error_fatal5_trig.configure(this, 1, 26, "W1S", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal4_trig = new("error_agg_error_fatal4_trig");
            this.error_agg_error_fatal4_trig.configure(this, 1, 27, "W1S", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal3_trig = new("error_agg_error_fatal3_trig");
            this.error_agg_error_fatal3_trig.configure(this, 1, 28, "W1S", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal2_trig = new("error_agg_error_fatal2_trig");
            this.error_agg_error_fatal2_trig.configure(this, 1, 29, "W1S", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal1_trig = new("error_agg_error_fatal1_trig");
            this.error_agg_error_fatal1_trig.configure(this, 1, 30, "W1S", 0, 'h0, 1, 1, 0);
            this.error_agg_error_fatal0_trig = new("error_agg_error_fatal0_trig");
            this.error_agg_error_fatal0_trig.configure(this, 1, 31, "W1S", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(error_agg_error_fatal31_trig_bit_cg[bt]) error_agg_error_fatal31_trig_bit_cg[bt] = new();
                foreach(error_agg_error_fatal30_trig_bit_cg[bt]) error_agg_error_fatal30_trig_bit_cg[bt] = new();
                foreach(error_agg_error_fatal29_trig_bit_cg[bt]) error_agg_error_fatal29_trig_bit_cg[bt] = new();
                foreach(error_agg_error_fatal28_trig_bit_cg[bt]) error_agg_error_fatal28_trig_bit_cg[bt] = new();
                foreach(error_agg_error_fatal27_trig_bit_cg[bt]) error_agg_error_fatal27_trig_bit_cg[bt] = new();
                foreach(error_agg_error_fatal26_trig_bit_cg[bt]) error_agg_error_fatal26_trig_bit_cg[bt] = new();
                foreach(error_agg_error_fatal25_trig_bit_cg[bt]) error_agg_error_fatal25_trig_bit_cg[bt] = new();
                foreach(error_agg_error_fatal24_trig_bit_cg[bt]) error_agg_error_fatal24_trig_bit_cg[bt] = new();
                foreach(error_agg_error_fatal23_trig_bit_cg[bt]) error_agg_error_fatal23_trig_bit_cg[bt] = new();
                foreach(error_agg_error_fatal22_trig_bit_cg[bt]) error_agg_error_fatal22_trig_bit_cg[bt] = new();
                foreach(error_agg_error_fatal21_trig_bit_cg[bt]) error_agg_error_fatal21_trig_bit_cg[bt] = new();
                foreach(error_agg_error_fatal20_trig_bit_cg[bt]) error_agg_error_fatal20_trig_bit_cg[bt] = new();
                foreach(error_agg_error_fatal19_trig_bit_cg[bt]) error_agg_error_fatal19_trig_bit_cg[bt] = new();
                foreach(error_agg_error_fatal18_trig_bit_cg[bt]) error_agg_error_fatal18_trig_bit_cg[bt] = new();
                foreach(error_agg_error_fatal17_trig_bit_cg[bt]) error_agg_error_fatal17_trig_bit_cg[bt] = new();
                foreach(error_agg_error_fatal16_trig_bit_cg[bt]) error_agg_error_fatal16_trig_bit_cg[bt] = new();
                foreach(error_agg_error_fatal15_trig_bit_cg[bt]) error_agg_error_fatal15_trig_bit_cg[bt] = new();
                foreach(error_agg_error_fatal14_trig_bit_cg[bt]) error_agg_error_fatal14_trig_bit_cg[bt] = new();
                foreach(error_agg_error_fatal13_trig_bit_cg[bt]) error_agg_error_fatal13_trig_bit_cg[bt] = new();
                foreach(error_agg_error_fatal12_trig_bit_cg[bt]) error_agg_error_fatal12_trig_bit_cg[bt] = new();
                foreach(error_agg_error_fatal11_trig_bit_cg[bt]) error_agg_error_fatal11_trig_bit_cg[bt] = new();
                foreach(error_agg_error_fatal10_trig_bit_cg[bt]) error_agg_error_fatal10_trig_bit_cg[bt] = new();
                foreach(error_agg_error_fatal9_trig_bit_cg[bt]) error_agg_error_fatal9_trig_bit_cg[bt] = new();
                foreach(error_agg_error_fatal8_trig_bit_cg[bt]) error_agg_error_fatal8_trig_bit_cg[bt] = new();
                foreach(error_agg_error_fatal7_trig_bit_cg[bt]) error_agg_error_fatal7_trig_bit_cg[bt] = new();
                foreach(error_agg_error_fatal6_trig_bit_cg[bt]) error_agg_error_fatal6_trig_bit_cg[bt] = new();
                foreach(error_agg_error_fatal5_trig_bit_cg[bt]) error_agg_error_fatal5_trig_bit_cg[bt] = new();
                foreach(error_agg_error_fatal4_trig_bit_cg[bt]) error_agg_error_fatal4_trig_bit_cg[bt] = new();
                foreach(error_agg_error_fatal3_trig_bit_cg[bt]) error_agg_error_fatal3_trig_bit_cg[bt] = new();
                foreach(error_agg_error_fatal2_trig_bit_cg[bt]) error_agg_error_fatal2_trig_bit_cg[bt] = new();
                foreach(error_agg_error_fatal1_trig_bit_cg[bt]) error_agg_error_fatal1_trig_bit_cg[bt] = new();
                foreach(error_agg_error_fatal0_trig_bit_cg[bt]) error_agg_error_fatal0_trig_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__error1_intr_trig_t

    // Reg - mci_reg::intr_block_t::notif0_intr_trig_t
    class mci_reg__intr_block_t__notif0_intr_trig_t extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__notif0_intr_trig_t_bit_cg notif_mcu_sram_ecc_cor_trig_bit_cg[1];
        mci_reg__intr_block_t__notif0_intr_trig_t_bit_cg notif_clpra_mcu_reset_req_trig_bit_cg[1];
        mci_reg__intr_block_t__notif0_intr_trig_t_fld_cg fld_cg;
        rand uvm_reg_field notif_mcu_sram_ecc_cor_trig;
        rand uvm_reg_field notif_clpra_mcu_reset_req_trig;

        function new(string name = "mci_reg__intr_block_t__notif0_intr_trig_t");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.notif_mcu_sram_ecc_cor_trig = new("notif_mcu_sram_ecc_cor_trig");
            this.notif_mcu_sram_ecc_cor_trig.configure(this, 1, 0, "W1S", 0, 'h0, 1, 1, 0);
            this.notif_clpra_mcu_reset_req_trig = new("notif_clpra_mcu_reset_req_trig");
            this.notif_clpra_mcu_reset_req_trig.configure(this, 1, 1, "W1S", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(notif_mcu_sram_ecc_cor_trig_bit_cg[bt]) notif_mcu_sram_ecc_cor_trig_bit_cg[bt] = new();
                foreach(notif_clpra_mcu_reset_req_trig_bit_cg[bt]) notif_clpra_mcu_reset_req_trig_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__notif0_intr_trig_t

    // Reg - mci_reg::intr_block_t::notif1_intr_trig_t
    class mci_reg__intr_block_t__notif1_intr_trig_t extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__notif1_intr_trig_t_bit_cg notif_agg_error_non_fatal31_trig_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_trig_t_bit_cg notif_agg_error_non_fatal30_trig_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_trig_t_bit_cg notif_agg_error_non_fatal29_trig_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_trig_t_bit_cg notif_agg_error_non_fatal28_trig_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_trig_t_bit_cg notif_agg_error_non_fatal27_trig_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_trig_t_bit_cg notif_agg_error_non_fatal26_trig_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_trig_t_bit_cg notif_agg_error_non_fatal25_trig_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_trig_t_bit_cg notif_agg_error_non_fatal24_trig_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_trig_t_bit_cg notif_agg_error_non_fatal23_trig_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_trig_t_bit_cg notif_agg_error_non_fatal22_trig_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_trig_t_bit_cg notif_agg_error_non_fatal21_trig_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_trig_t_bit_cg notif_agg_error_non_fatal20_trig_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_trig_t_bit_cg notif_agg_error_non_fatal19_trig_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_trig_t_bit_cg notif_agg_error_non_fatal18_trig_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_trig_t_bit_cg notif_agg_error_non_fatal17_trig_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_trig_t_bit_cg notif_agg_error_non_fatal16_trig_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_trig_t_bit_cg notif_agg_error_non_fatal15_trig_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_trig_t_bit_cg notif_agg_error_non_fatal14_trig_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_trig_t_bit_cg notif_agg_error_non_fatal13_trig_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_trig_t_bit_cg notif_agg_error_non_fatal12_trig_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_trig_t_bit_cg notif_agg_error_non_fatal11_trig_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_trig_t_bit_cg notif_agg_error_non_fatal10_trig_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_trig_t_bit_cg notif_agg_error_non_fatal9_trig_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_trig_t_bit_cg notif_agg_error_non_fatal8_trig_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_trig_t_bit_cg notif_agg_error_non_fatal7_trig_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_trig_t_bit_cg notif_agg_error_non_fatal6_trig_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_trig_t_bit_cg notif_agg_error_non_fatal5_trig_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_trig_t_bit_cg notif_agg_error_non_fatal4_trig_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_trig_t_bit_cg notif_agg_error_non_fatal3_trig_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_trig_t_bit_cg notif_agg_error_non_fatal2_trig_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_trig_t_bit_cg notif_agg_error_non_fatal1_trig_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_trig_t_bit_cg notif_agg_error_non_fatal0_trig_bit_cg[1];
        mci_reg__intr_block_t__notif1_intr_trig_t_fld_cg fld_cg;
        rand uvm_reg_field notif_agg_error_non_fatal31_trig;
        rand uvm_reg_field notif_agg_error_non_fatal30_trig;
        rand uvm_reg_field notif_agg_error_non_fatal29_trig;
        rand uvm_reg_field notif_agg_error_non_fatal28_trig;
        rand uvm_reg_field notif_agg_error_non_fatal27_trig;
        rand uvm_reg_field notif_agg_error_non_fatal26_trig;
        rand uvm_reg_field notif_agg_error_non_fatal25_trig;
        rand uvm_reg_field notif_agg_error_non_fatal24_trig;
        rand uvm_reg_field notif_agg_error_non_fatal23_trig;
        rand uvm_reg_field notif_agg_error_non_fatal22_trig;
        rand uvm_reg_field notif_agg_error_non_fatal21_trig;
        rand uvm_reg_field notif_agg_error_non_fatal20_trig;
        rand uvm_reg_field notif_agg_error_non_fatal19_trig;
        rand uvm_reg_field notif_agg_error_non_fatal18_trig;
        rand uvm_reg_field notif_agg_error_non_fatal17_trig;
        rand uvm_reg_field notif_agg_error_non_fatal16_trig;
        rand uvm_reg_field notif_agg_error_non_fatal15_trig;
        rand uvm_reg_field notif_agg_error_non_fatal14_trig;
        rand uvm_reg_field notif_agg_error_non_fatal13_trig;
        rand uvm_reg_field notif_agg_error_non_fatal12_trig;
        rand uvm_reg_field notif_agg_error_non_fatal11_trig;
        rand uvm_reg_field notif_agg_error_non_fatal10_trig;
        rand uvm_reg_field notif_agg_error_non_fatal9_trig;
        rand uvm_reg_field notif_agg_error_non_fatal8_trig;
        rand uvm_reg_field notif_agg_error_non_fatal7_trig;
        rand uvm_reg_field notif_agg_error_non_fatal6_trig;
        rand uvm_reg_field notif_agg_error_non_fatal5_trig;
        rand uvm_reg_field notif_agg_error_non_fatal4_trig;
        rand uvm_reg_field notif_agg_error_non_fatal3_trig;
        rand uvm_reg_field notif_agg_error_non_fatal2_trig;
        rand uvm_reg_field notif_agg_error_non_fatal1_trig;
        rand uvm_reg_field notif_agg_error_non_fatal0_trig;

        function new(string name = "mci_reg__intr_block_t__notif1_intr_trig_t");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.notif_agg_error_non_fatal31_trig = new("notif_agg_error_non_fatal31_trig");
            this.notif_agg_error_non_fatal31_trig.configure(this, 1, 0, "W1S", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal30_trig = new("notif_agg_error_non_fatal30_trig");
            this.notif_agg_error_non_fatal30_trig.configure(this, 1, 1, "W1S", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal29_trig = new("notif_agg_error_non_fatal29_trig");
            this.notif_agg_error_non_fatal29_trig.configure(this, 1, 2, "W1S", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal28_trig = new("notif_agg_error_non_fatal28_trig");
            this.notif_agg_error_non_fatal28_trig.configure(this, 1, 3, "W1S", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal27_trig = new("notif_agg_error_non_fatal27_trig");
            this.notif_agg_error_non_fatal27_trig.configure(this, 1, 4, "W1S", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal26_trig = new("notif_agg_error_non_fatal26_trig");
            this.notif_agg_error_non_fatal26_trig.configure(this, 1, 5, "W1S", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal25_trig = new("notif_agg_error_non_fatal25_trig");
            this.notif_agg_error_non_fatal25_trig.configure(this, 1, 6, "W1S", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal24_trig = new("notif_agg_error_non_fatal24_trig");
            this.notif_agg_error_non_fatal24_trig.configure(this, 1, 7, "W1S", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal23_trig = new("notif_agg_error_non_fatal23_trig");
            this.notif_agg_error_non_fatal23_trig.configure(this, 1, 8, "W1S", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal22_trig = new("notif_agg_error_non_fatal22_trig");
            this.notif_agg_error_non_fatal22_trig.configure(this, 1, 9, "W1S", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal21_trig = new("notif_agg_error_non_fatal21_trig");
            this.notif_agg_error_non_fatal21_trig.configure(this, 1, 10, "W1S", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal20_trig = new("notif_agg_error_non_fatal20_trig");
            this.notif_agg_error_non_fatal20_trig.configure(this, 1, 11, "W1S", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal19_trig = new("notif_agg_error_non_fatal19_trig");
            this.notif_agg_error_non_fatal19_trig.configure(this, 1, 12, "W1S", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal18_trig = new("notif_agg_error_non_fatal18_trig");
            this.notif_agg_error_non_fatal18_trig.configure(this, 1, 13, "W1S", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal17_trig = new("notif_agg_error_non_fatal17_trig");
            this.notif_agg_error_non_fatal17_trig.configure(this, 1, 14, "W1S", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal16_trig = new("notif_agg_error_non_fatal16_trig");
            this.notif_agg_error_non_fatal16_trig.configure(this, 1, 15, "W1S", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal15_trig = new("notif_agg_error_non_fatal15_trig");
            this.notif_agg_error_non_fatal15_trig.configure(this, 1, 16, "W1S", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal14_trig = new("notif_agg_error_non_fatal14_trig");
            this.notif_agg_error_non_fatal14_trig.configure(this, 1, 17, "W1S", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal13_trig = new("notif_agg_error_non_fatal13_trig");
            this.notif_agg_error_non_fatal13_trig.configure(this, 1, 18, "W1S", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal12_trig = new("notif_agg_error_non_fatal12_trig");
            this.notif_agg_error_non_fatal12_trig.configure(this, 1, 19, "W1S", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal11_trig = new("notif_agg_error_non_fatal11_trig");
            this.notif_agg_error_non_fatal11_trig.configure(this, 1, 20, "W1S", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal10_trig = new("notif_agg_error_non_fatal10_trig");
            this.notif_agg_error_non_fatal10_trig.configure(this, 1, 21, "W1S", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal9_trig = new("notif_agg_error_non_fatal9_trig");
            this.notif_agg_error_non_fatal9_trig.configure(this, 1, 22, "W1S", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal8_trig = new("notif_agg_error_non_fatal8_trig");
            this.notif_agg_error_non_fatal8_trig.configure(this, 1, 23, "W1S", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal7_trig = new("notif_agg_error_non_fatal7_trig");
            this.notif_agg_error_non_fatal7_trig.configure(this, 1, 24, "W1S", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal6_trig = new("notif_agg_error_non_fatal6_trig");
            this.notif_agg_error_non_fatal6_trig.configure(this, 1, 25, "W1S", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal5_trig = new("notif_agg_error_non_fatal5_trig");
            this.notif_agg_error_non_fatal5_trig.configure(this, 1, 26, "W1S", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal4_trig = new("notif_agg_error_non_fatal4_trig");
            this.notif_agg_error_non_fatal4_trig.configure(this, 1, 27, "W1S", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal3_trig = new("notif_agg_error_non_fatal3_trig");
            this.notif_agg_error_non_fatal3_trig.configure(this, 1, 28, "W1S", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal2_trig = new("notif_agg_error_non_fatal2_trig");
            this.notif_agg_error_non_fatal2_trig.configure(this, 1, 29, "W1S", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal1_trig = new("notif_agg_error_non_fatal1_trig");
            this.notif_agg_error_non_fatal1_trig.configure(this, 1, 30, "W1S", 0, 'h0, 1, 1, 0);
            this.notif_agg_error_non_fatal0_trig = new("notif_agg_error_non_fatal0_trig");
            this.notif_agg_error_non_fatal0_trig.configure(this, 1, 31, "W1S", 0, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(notif_agg_error_non_fatal31_trig_bit_cg[bt]) notif_agg_error_non_fatal31_trig_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal30_trig_bit_cg[bt]) notif_agg_error_non_fatal30_trig_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal29_trig_bit_cg[bt]) notif_agg_error_non_fatal29_trig_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal28_trig_bit_cg[bt]) notif_agg_error_non_fatal28_trig_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal27_trig_bit_cg[bt]) notif_agg_error_non_fatal27_trig_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal26_trig_bit_cg[bt]) notif_agg_error_non_fatal26_trig_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal25_trig_bit_cg[bt]) notif_agg_error_non_fatal25_trig_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal24_trig_bit_cg[bt]) notif_agg_error_non_fatal24_trig_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal23_trig_bit_cg[bt]) notif_agg_error_non_fatal23_trig_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal22_trig_bit_cg[bt]) notif_agg_error_non_fatal22_trig_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal21_trig_bit_cg[bt]) notif_agg_error_non_fatal21_trig_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal20_trig_bit_cg[bt]) notif_agg_error_non_fatal20_trig_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal19_trig_bit_cg[bt]) notif_agg_error_non_fatal19_trig_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal18_trig_bit_cg[bt]) notif_agg_error_non_fatal18_trig_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal17_trig_bit_cg[bt]) notif_agg_error_non_fatal17_trig_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal16_trig_bit_cg[bt]) notif_agg_error_non_fatal16_trig_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal15_trig_bit_cg[bt]) notif_agg_error_non_fatal15_trig_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal14_trig_bit_cg[bt]) notif_agg_error_non_fatal14_trig_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal13_trig_bit_cg[bt]) notif_agg_error_non_fatal13_trig_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal12_trig_bit_cg[bt]) notif_agg_error_non_fatal12_trig_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal11_trig_bit_cg[bt]) notif_agg_error_non_fatal11_trig_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal10_trig_bit_cg[bt]) notif_agg_error_non_fatal10_trig_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal9_trig_bit_cg[bt]) notif_agg_error_non_fatal9_trig_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal8_trig_bit_cg[bt]) notif_agg_error_non_fatal8_trig_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal7_trig_bit_cg[bt]) notif_agg_error_non_fatal7_trig_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal6_trig_bit_cg[bt]) notif_agg_error_non_fatal6_trig_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal5_trig_bit_cg[bt]) notif_agg_error_non_fatal5_trig_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal4_trig_bit_cg[bt]) notif_agg_error_non_fatal4_trig_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal3_trig_bit_cg[bt]) notif_agg_error_non_fatal3_trig_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal2_trig_bit_cg[bt]) notif_agg_error_non_fatal2_trig_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal1_trig_bit_cg[bt]) notif_agg_error_non_fatal1_trig_bit_cg[bt] = new();
                foreach(notif_agg_error_non_fatal0_trig_bit_cg[bt]) notif_agg_error_non_fatal0_trig_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__notif1_intr_trig_t

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_8575f7c3
    class mci_reg__intr_block_t__intr_count_t_cnt_8575f7c3 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_8575f7c3_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_8575f7c3_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_8575f7c3");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_8575f7c3

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_c6c5aac2
    class mci_reg__intr_block_t__intr_count_t_cnt_c6c5aac2 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_c6c5aac2_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_c6c5aac2_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_c6c5aac2");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_c6c5aac2

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_cc6839d2
    class mci_reg__intr_block_t__intr_count_t_cnt_cc6839d2 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_cc6839d2_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_cc6839d2_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_cc6839d2");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_cc6839d2

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_e85c8d3f
    class mci_reg__intr_block_t__intr_count_t_cnt_e85c8d3f extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_e85c8d3f_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_e85c8d3f_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_e85c8d3f");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_e85c8d3f

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_173b981b
    class mci_reg__intr_block_t__intr_count_t_cnt_173b981b extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_173b981b_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_173b981b_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_173b981b");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_173b981b

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_ad70eca0
    class mci_reg__intr_block_t__intr_count_t_cnt_ad70eca0 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_ad70eca0_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_ad70eca0_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_ad70eca0");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_ad70eca0

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_9c63ebbb
    class mci_reg__intr_block_t__intr_count_t_cnt_9c63ebbb extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_9c63ebbb_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_9c63ebbb_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_9c63ebbb");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_9c63ebbb

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_bdb11bdf
    class mci_reg__intr_block_t__intr_count_t_cnt_bdb11bdf extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_bdb11bdf_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_bdb11bdf_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_bdb11bdf");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_bdb11bdf

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_285c9356
    class mci_reg__intr_block_t__intr_count_t_cnt_285c9356 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_285c9356_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_285c9356_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_285c9356");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_285c9356

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_19ffb576
    class mci_reg__intr_block_t__intr_count_t_cnt_19ffb576 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_19ffb576_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_19ffb576_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_19ffb576");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_19ffb576

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_0cf58ec0
    class mci_reg__intr_block_t__intr_count_t_cnt_0cf58ec0 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_0cf58ec0_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_0cf58ec0_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_0cf58ec0");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_0cf58ec0

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_dacb9e87
    class mci_reg__intr_block_t__intr_count_t_cnt_dacb9e87 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_dacb9e87_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_dacb9e87_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_dacb9e87");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_dacb9e87

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_3015e2c4
    class mci_reg__intr_block_t__intr_count_t_cnt_3015e2c4 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_3015e2c4_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_3015e2c4_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_3015e2c4");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_3015e2c4

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_e5e45c3e
    class mci_reg__intr_block_t__intr_count_t_cnt_e5e45c3e extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_e5e45c3e_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_e5e45c3e_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_e5e45c3e");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_e5e45c3e

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_34d3db59
    class mci_reg__intr_block_t__intr_count_t_cnt_34d3db59 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_34d3db59_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_34d3db59_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_34d3db59");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_34d3db59

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_6514ef70
    class mci_reg__intr_block_t__intr_count_t_cnt_6514ef70 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_6514ef70_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_6514ef70_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_6514ef70");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_6514ef70

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_3f94bf0e
    class mci_reg__intr_block_t__intr_count_t_cnt_3f94bf0e extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_3f94bf0e_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_3f94bf0e_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_3f94bf0e");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_3f94bf0e

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_46df496a
    class mci_reg__intr_block_t__intr_count_t_cnt_46df496a extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_46df496a_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_46df496a_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_46df496a");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_46df496a

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_1e873d29
    class mci_reg__intr_block_t__intr_count_t_cnt_1e873d29 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_1e873d29_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_1e873d29_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_1e873d29");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_1e873d29

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_afb84a88
    class mci_reg__intr_block_t__intr_count_t_cnt_afb84a88 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_afb84a88_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_afb84a88_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_afb84a88");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_afb84a88

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_c6327078
    class mci_reg__intr_block_t__intr_count_t_cnt_c6327078 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_c6327078_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_c6327078_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_c6327078");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_c6327078

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_e49096ba
    class mci_reg__intr_block_t__intr_count_t_cnt_e49096ba extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_e49096ba_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_e49096ba_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_e49096ba");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_e49096ba

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_543b5a79
    class mci_reg__intr_block_t__intr_count_t_cnt_543b5a79 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_543b5a79_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_543b5a79_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_543b5a79");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_543b5a79

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_166aef9f
    class mci_reg__intr_block_t__intr_count_t_cnt_166aef9f extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_166aef9f_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_166aef9f_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_166aef9f");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_166aef9f

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_970ffbe4
    class mci_reg__intr_block_t__intr_count_t_cnt_970ffbe4 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_970ffbe4_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_970ffbe4_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_970ffbe4");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_970ffbe4

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_2c6710e8
    class mci_reg__intr_block_t__intr_count_t_cnt_2c6710e8 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_2c6710e8_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_2c6710e8_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_2c6710e8");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_2c6710e8

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_38ef91b9
    class mci_reg__intr_block_t__intr_count_t_cnt_38ef91b9 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_38ef91b9_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_38ef91b9_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_38ef91b9");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_38ef91b9

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_d47914ef
    class mci_reg__intr_block_t__intr_count_t_cnt_d47914ef extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_d47914ef_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_d47914ef_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_d47914ef");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_d47914ef

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_0e6d7fe8
    class mci_reg__intr_block_t__intr_count_t_cnt_0e6d7fe8 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_0e6d7fe8_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_0e6d7fe8_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_0e6d7fe8");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_0e6d7fe8

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_f5e2a5f9
    class mci_reg__intr_block_t__intr_count_t_cnt_f5e2a5f9 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_f5e2a5f9_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_f5e2a5f9_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_f5e2a5f9");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_f5e2a5f9

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_85aa0701
    class mci_reg__intr_block_t__intr_count_t_cnt_85aa0701 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_85aa0701_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_85aa0701_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_85aa0701");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_85aa0701

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_230ee14d
    class mci_reg__intr_block_t__intr_count_t_cnt_230ee14d extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_230ee14d_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_230ee14d_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_230ee14d");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_230ee14d

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_a729f814
    class mci_reg__intr_block_t__intr_count_t_cnt_a729f814 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_a729f814_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_a729f814_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_a729f814");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_a729f814

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_896729f1
    class mci_reg__intr_block_t__intr_count_t_cnt_896729f1 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_896729f1_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_896729f1_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_896729f1");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_896729f1

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_9b47838c
    class mci_reg__intr_block_t__intr_count_t_cnt_9b47838c extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_9b47838c_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_9b47838c_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_9b47838c");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_9b47838c

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_0ef015b9
    class mci_reg__intr_block_t__intr_count_t_cnt_0ef015b9 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_0ef015b9_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_0ef015b9_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_0ef015b9");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_0ef015b9

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_8c9c92fc
    class mci_reg__intr_block_t__intr_count_t_cnt_8c9c92fc extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_8c9c92fc_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_8c9c92fc_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_8c9c92fc");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_8c9c92fc

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_21a01ace
    class mci_reg__intr_block_t__intr_count_t_cnt_21a01ace extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_21a01ace_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_21a01ace_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_21a01ace");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_21a01ace

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_2eb23480
    class mci_reg__intr_block_t__intr_count_t_cnt_2eb23480 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_2eb23480_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_2eb23480_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_2eb23480");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_2eb23480

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_bcd65b0c
    class mci_reg__intr_block_t__intr_count_t_cnt_bcd65b0c extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_bcd65b0c_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_bcd65b0c_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_bcd65b0c");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_bcd65b0c

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_75e50de1
    class mci_reg__intr_block_t__intr_count_t_cnt_75e50de1 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_75e50de1_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_75e50de1_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_75e50de1");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_75e50de1

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_e14378f5
    class mci_reg__intr_block_t__intr_count_t_cnt_e14378f5 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_e14378f5_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_e14378f5_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_e14378f5");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_e14378f5

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_d7e481f0
    class mci_reg__intr_block_t__intr_count_t_cnt_d7e481f0 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_d7e481f0_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_d7e481f0_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_d7e481f0");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_d7e481f0

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_57ce756e
    class mci_reg__intr_block_t__intr_count_t_cnt_57ce756e extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_57ce756e_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_57ce756e_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_57ce756e");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_57ce756e

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_7c08ad02
    class mci_reg__intr_block_t__intr_count_t_cnt_7c08ad02 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_7c08ad02_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_7c08ad02_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_7c08ad02");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_7c08ad02

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_9f26fa46
    class mci_reg__intr_block_t__intr_count_t_cnt_9f26fa46 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_9f26fa46_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_9f26fa46_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_9f26fa46");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_9f26fa46

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_2d857802
    class mci_reg__intr_block_t__intr_count_t_cnt_2d857802 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_2d857802_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_2d857802_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_2d857802");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_2d857802

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_a33acd57
    class mci_reg__intr_block_t__intr_count_t_cnt_a33acd57 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_a33acd57_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_a33acd57_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_a33acd57");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_a33acd57

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_6b0b8b72
    class mci_reg__intr_block_t__intr_count_t_cnt_6b0b8b72 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_6b0b8b72_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_6b0b8b72_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_6b0b8b72");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_6b0b8b72

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_814509ca
    class mci_reg__intr_block_t__intr_count_t_cnt_814509ca extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_814509ca_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_814509ca_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_814509ca");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_814509ca

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_6c105212
    class mci_reg__intr_block_t__intr_count_t_cnt_6c105212 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_6c105212_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_6c105212_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_6c105212");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_6c105212

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_a91d29fa
    class mci_reg__intr_block_t__intr_count_t_cnt_a91d29fa extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_a91d29fa_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_a91d29fa_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_a91d29fa");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_a91d29fa

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_053cf766
    class mci_reg__intr_block_t__intr_count_t_cnt_053cf766 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_053cf766_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_053cf766_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_053cf766");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_053cf766

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_dd50a72c
    class mci_reg__intr_block_t__intr_count_t_cnt_dd50a72c extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_dd50a72c_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_dd50a72c_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_dd50a72c");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_dd50a72c

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_c256fff6
    class mci_reg__intr_block_t__intr_count_t_cnt_c256fff6 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_c256fff6_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_c256fff6_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_c256fff6");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_c256fff6

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_80025684
    class mci_reg__intr_block_t__intr_count_t_cnt_80025684 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_80025684_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_80025684_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_80025684");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_80025684

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_b88fb3da
    class mci_reg__intr_block_t__intr_count_t_cnt_b88fb3da extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_b88fb3da_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_b88fb3da_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_b88fb3da");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_b88fb3da

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_c225cba5
    class mci_reg__intr_block_t__intr_count_t_cnt_c225cba5 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_c225cba5_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_c225cba5_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_c225cba5");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_c225cba5

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_b0594ed5
    class mci_reg__intr_block_t__intr_count_t_cnt_b0594ed5 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_b0594ed5_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_b0594ed5_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_b0594ed5");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_b0594ed5

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_00b48774
    class mci_reg__intr_block_t__intr_count_t_cnt_00b48774 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_00b48774_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_00b48774_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_00b48774");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_00b48774

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_aba426c3
    class mci_reg__intr_block_t__intr_count_t_cnt_aba426c3 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_aba426c3_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_aba426c3_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_aba426c3");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_aba426c3

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_cb69dcdb
    class mci_reg__intr_block_t__intr_count_t_cnt_cb69dcdb extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_cb69dcdb_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_cb69dcdb_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_cb69dcdb");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_cb69dcdb

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_c101eb8f
    class mci_reg__intr_block_t__intr_count_t_cnt_c101eb8f extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_c101eb8f_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_c101eb8f_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_c101eb8f");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_c101eb8f

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_f5c7867e
    class mci_reg__intr_block_t__intr_count_t_cnt_f5c7867e extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_f5c7867e_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_f5c7867e_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_f5c7867e");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_f5c7867e

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_3a6a25f3
    class mci_reg__intr_block_t__intr_count_t_cnt_3a6a25f3 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_3a6a25f3_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_3a6a25f3_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_3a6a25f3");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_3a6a25f3

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_0d5ca59f
    class mci_reg__intr_block_t__intr_count_t_cnt_0d5ca59f extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_0d5ca59f_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_0d5ca59f_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_0d5ca59f");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_0d5ca59f

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_f0bd1785
    class mci_reg__intr_block_t__intr_count_t_cnt_f0bd1785 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_f0bd1785_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_f0bd1785_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_f0bd1785");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_f0bd1785

    // Reg - mci_reg::intr_block_t::intr_count_t_cnt_e2db60b9
    class mci_reg__intr_block_t__intr_count_t_cnt_e2db60b9 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_t_cnt_e2db60b9_bit_cg cnt_bit_cg[32];
        mci_reg__intr_block_t__intr_count_t_cnt_e2db60b9_fld_cg fld_cg;
        rand uvm_reg_field cnt;

        function new(string name = "mci_reg__intr_block_t__intr_count_t_cnt_e2db60b9");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.cnt = new("cnt");
            this.cnt.configure(this, 32, 0, "RW", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(cnt_bit_cg[bt]) cnt_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_t_cnt_e2db60b9

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_74acd18e
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_74acd18e extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_74acd18e_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_74acd18e_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_74acd18e");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_74acd18e

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_28374d24
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_28374d24 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_28374d24_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_28374d24_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_28374d24");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_28374d24

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_6360e3d6
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_6360e3d6 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_6360e3d6_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_6360e3d6_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_6360e3d6");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_6360e3d6

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_633a69b2
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_633a69b2 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_633a69b2_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_633a69b2_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_633a69b2");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_633a69b2

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_14a3e211
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_14a3e211 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_14a3e211_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_14a3e211_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_14a3e211");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_14a3e211

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_b1e11d04
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_b1e11d04 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_b1e11d04_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_b1e11d04_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_b1e11d04");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_b1e11d04

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_13c3bb0e
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_13c3bb0e extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_13c3bb0e_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_13c3bb0e_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_13c3bb0e");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_13c3bb0e

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_ce63ca01
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_ce63ca01 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_ce63ca01_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_ce63ca01_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_ce63ca01");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_ce63ca01

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_0ad5f5e5
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_0ad5f5e5 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_0ad5f5e5_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_0ad5f5e5_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_0ad5f5e5");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_0ad5f5e5

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_ccb7556e
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_ccb7556e extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_ccb7556e_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_ccb7556e_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_ccb7556e");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_ccb7556e

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_faa59db2
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_faa59db2 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_faa59db2_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_faa59db2_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_faa59db2");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_faa59db2

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_64b788d2
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_64b788d2 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_64b788d2_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_64b788d2_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_64b788d2");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_64b788d2

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_07c841e3
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_07c841e3 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_07c841e3_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_07c841e3_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_07c841e3");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_07c841e3

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_51c2124e
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_51c2124e extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_51c2124e_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_51c2124e_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_51c2124e");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_51c2124e

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_f5ffe320
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_f5ffe320 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_f5ffe320_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_f5ffe320_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_f5ffe320");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_f5ffe320

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_022dbe36
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_022dbe36 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_022dbe36_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_022dbe36_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_022dbe36");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_022dbe36

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_039b3e0f
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_039b3e0f extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_039b3e0f_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_039b3e0f_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_039b3e0f");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_039b3e0f

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_fd2f42e6
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_fd2f42e6 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_fd2f42e6_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_fd2f42e6_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_fd2f42e6");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_fd2f42e6

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_5fcabcf1
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_5fcabcf1 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_5fcabcf1_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_5fcabcf1_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_5fcabcf1");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_5fcabcf1

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_ea5dc7c6
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_ea5dc7c6 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_ea5dc7c6_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_ea5dc7c6_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_ea5dc7c6");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_ea5dc7c6

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_b41e4d59
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_b41e4d59 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_b41e4d59_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_b41e4d59_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_b41e4d59");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_b41e4d59

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_1caa6eda
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_1caa6eda extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_1caa6eda_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_1caa6eda_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_1caa6eda");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_1caa6eda

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_66a4d7e8
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_66a4d7e8 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_66a4d7e8_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_66a4d7e8_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_66a4d7e8");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_66a4d7e8

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_08e7fce4
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_08e7fce4 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_08e7fce4_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_08e7fce4_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_08e7fce4");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_08e7fce4

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_55d70652
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_55d70652 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_55d70652_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_55d70652_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_55d70652");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_55d70652

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_0d9d2b21
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_0d9d2b21 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_0d9d2b21_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_0d9d2b21_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_0d9d2b21");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_0d9d2b21

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_e57ba7f1
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_e57ba7f1 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_e57ba7f1_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_e57ba7f1_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_e57ba7f1");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_e57ba7f1

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_e224923f
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_e224923f extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_e224923f_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_e224923f_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_e224923f");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_e224923f

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_f3cde110
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_f3cde110 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_f3cde110_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_f3cde110_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_f3cde110");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_f3cde110

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_d93bd8ce
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_d93bd8ce extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_d93bd8ce_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_d93bd8ce_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_d93bd8ce");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_d93bd8ce

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_cde9364d
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_cde9364d extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_cde9364d_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_cde9364d_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_cde9364d");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_cde9364d

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_43211e33
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_43211e33 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_43211e33_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_43211e33_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_43211e33");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_43211e33

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_25a13b9f
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_25a13b9f extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_25a13b9f_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_25a13b9f_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_25a13b9f");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_25a13b9f

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_43abecb1
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_43abecb1 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_43abecb1_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_43abecb1_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_43abecb1");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_43abecb1

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_c24554e4
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_c24554e4 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_c24554e4_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_c24554e4_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_c24554e4");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_c24554e4

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_3bafbbba
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_3bafbbba extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_3bafbbba_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_3bafbbba_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_3bafbbba");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_3bafbbba

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_1907ed9d
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_1907ed9d extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_1907ed9d_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_1907ed9d_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_1907ed9d");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_1907ed9d

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_8961fa6e
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_8961fa6e extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_8961fa6e_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_8961fa6e_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_8961fa6e");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_8961fa6e

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_fe81e5d8
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_fe81e5d8 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_fe81e5d8_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_fe81e5d8_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_fe81e5d8");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_fe81e5d8

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_7bba0154
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_7bba0154 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_7bba0154_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_7bba0154_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_7bba0154");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_7bba0154

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_ab7dd9d8
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_ab7dd9d8 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_ab7dd9d8_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_ab7dd9d8_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_ab7dd9d8");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_ab7dd9d8

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_cc04f1be
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_cc04f1be extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_cc04f1be_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_cc04f1be_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_cc04f1be");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_cc04f1be

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_fc55bcdc
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_fc55bcdc extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_fc55bcdc_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_fc55bcdc_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_fc55bcdc");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_fc55bcdc

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_b7a5d6e8
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_b7a5d6e8 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_b7a5d6e8_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_b7a5d6e8_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_b7a5d6e8");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_b7a5d6e8

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_15791c55
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_15791c55 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_15791c55_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_15791c55_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_15791c55");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_15791c55

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_aa2c240e
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_aa2c240e extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_aa2c240e_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_aa2c240e_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_aa2c240e");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_aa2c240e

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_8ee829eb
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_8ee829eb extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_8ee829eb_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_8ee829eb_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_8ee829eb");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_8ee829eb

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_c8fadcf1
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_c8fadcf1 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_c8fadcf1_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_c8fadcf1_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_c8fadcf1");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_c8fadcf1

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_da30f263
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_da30f263 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_da30f263_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_da30f263_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_da30f263");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_da30f263

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_4d7978ea
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_4d7978ea extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_4d7978ea_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_4d7978ea_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_4d7978ea");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_4d7978ea

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_82eedd27
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_82eedd27 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_82eedd27_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_82eedd27_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_82eedd27");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_82eedd27

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_8da87fd8
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_8da87fd8 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_8da87fd8_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_8da87fd8_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_8da87fd8");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_8da87fd8

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_76576605
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_76576605 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_76576605_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_76576605_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_76576605");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_76576605

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_62e3bbd7
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_62e3bbd7 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_62e3bbd7_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_62e3bbd7_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_62e3bbd7");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_62e3bbd7

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_9f5615ea
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_9f5615ea extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_9f5615ea_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_9f5615ea_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_9f5615ea");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_9f5615ea

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_dfcf4fa2
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_dfcf4fa2 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_dfcf4fa2_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_dfcf4fa2_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_dfcf4fa2");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_dfcf4fa2

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_e65aef10
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_e65aef10 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_e65aef10_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_e65aef10_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_e65aef10");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_e65aef10

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_205dab58
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_205dab58 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_205dab58_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_205dab58_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_205dab58");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_205dab58

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_4a95f125
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_4a95f125 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_4a95f125_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_4a95f125_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_4a95f125");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_4a95f125

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_34303832
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_34303832 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_34303832_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_34303832_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_34303832");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_34303832

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_8f4e2fa9
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_8f4e2fa9 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_8f4e2fa9_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_8f4e2fa9_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_8f4e2fa9");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_8f4e2fa9

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_fe99756f
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_fe99756f extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_fe99756f_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_fe99756f_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_fe99756f");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_fe99756f

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_ec918ac5
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_ec918ac5 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_ec918ac5_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_ec918ac5_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_ec918ac5");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_ec918ac5

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_3159d8db
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_3159d8db extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_3159d8db_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_3159d8db_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_3159d8db");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_3159d8db

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_71f656a5
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_71f656a5 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_71f656a5_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_71f656a5_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_71f656a5");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_71f656a5

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_d0af2f85
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_d0af2f85 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_d0af2f85_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_d0af2f85_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_d0af2f85");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_d0af2f85

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_3d88c5b9
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_3d88c5b9 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_3d88c5b9_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_3d88c5b9_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_3d88c5b9");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_3d88c5b9

    // Reg - mci_reg::intr_block_t::intr_count_incr_t_pulse_c43b8bc4
    class mci_reg__intr_block_t__intr_count_incr_t_pulse_c43b8bc4 extends uvm_reg;
        protected uvm_reg_data_t m_current;
        protected uvm_reg_data_t m_data;
        protected bit            m_is_read;

        mci_reg__intr_block_t__intr_count_incr_t_pulse_c43b8bc4_bit_cg pulse_bit_cg[1];
        mci_reg__intr_block_t__intr_count_incr_t_pulse_c43b8bc4_fld_cg fld_cg;
        rand uvm_reg_field pulse;

        function new(string name = "mci_reg__intr_block_t__intr_count_incr_t_pulse_c43b8bc4");
            super.new(name, 32, build_coverage(UVM_CVR_ALL));
        endfunction : new
        extern virtual function void sample_values();
        extern protected virtual function void sample(uvm_reg_data_t  data,
                                                      uvm_reg_data_t  byte_en,
                                                      bit             is_read,
                                                      uvm_reg_map     map);

        virtual function void build();
            this.pulse = new("pulse");
            this.pulse.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            if (has_coverage(UVM_CVR_REG_BITS)) begin
                foreach(pulse_bit_cg[bt]) pulse_bit_cg[bt] = new();
            end
            if (has_coverage(UVM_CVR_FIELD_VALS))
                fld_cg = new();
        endfunction : build
    endclass : mci_reg__intr_block_t__intr_count_incr_t_pulse_c43b8bc4

    // Regfile - mci_reg::intr_block_t
    class mci_reg__intr_block_t extends uvm_reg_block;
        rand mci_reg__intr_block_t__global_intr_en_t global_intr_en_r;
        rand mci_reg__intr_block_t__error0_intr_en_t error0_intr_en_r;
        rand mci_reg__intr_block_t__error1_intr_en_t error1_intr_en_r;
        rand mci_reg__intr_block_t__notif0_intr_en_t notif0_intr_en_r;
        rand mci_reg__intr_block_t__notif1_intr_en_t notif1_intr_en_r;
        rand mci_reg__intr_block_t__global_intr_t_agg_sts0_9d4fcb80_agg_sts1_dd15d6db error_global_intr_r;
        rand mci_reg__intr_block_t__global_intr_t_agg_sts0_fbbcc271_agg_sts1_5df57496 notif_global_intr_r;
        rand mci_reg__intr_block_t__error0_intr_t_error_wdt_timer1_timeout_sts_d5484b74_error_wdt_timer2_timeout_sts_275950a2 error0_internal_intr_r;
        rand mci_reg__intr_block_t__error1_intr_t_error_agg_error_fatal0_sts_fa132a82_error_agg_error_fatal10_sts_6f865c89_error_agg_error_fatal11_sts_fa6208a0_error_agg_error_fatal12_sts_721d3a75_error_agg_error_fatal13_sts_5c3990f4_error_agg_error_fatal14_sts_a694518f_error_agg_error_fatal15_sts_9f83da34_error_agg_error_fatal16_sts_d2008075_error_agg_error_fatal17_sts_c4477fd6_error_agg_error_fatal18_sts_7e56b5c7_error_agg_error_fatal19_sts_d910ce2f_error_agg_error_fatal1_sts_a502c972_error_agg_error_fatal20_sts_1c366f71_error_agg_error_fatal21_sts_3ffab23c_error_agg_error_fatal22_sts_cf97fe95_error_agg_error_fatal23_sts_b038dc4b_error_agg_error_fatal24_sts_46a7f9f2_error_agg_error_fatal25_sts_d3847056_error_agg_error_fatal26_sts_07ce5573_error_agg_error_fatal27_sts_686337e8_error_agg_error_fatal28_sts_47915955_error_agg_error_fatal29_sts_748fd418_error_agg_error_fatal2_sts_1eed1d52_error_agg_error_fatal30_sts_56c415d2_error_agg_error_fatal31_sts_9c4937bc_error_agg_error_fatal3_sts_7910568d_error_agg_error_fatal4_sts_b4f21204_error_agg_error_fatal5_sts_799bf567_error_agg_error_fatal6_sts_554d4d0d_error_agg_error_fatal7_sts_5e5cb629_error_agg_error_fatal8_sts_f823a735_error_agg_error_fatal9_sts_63fe0bbb error1_internal_intr_r;
        rand mci_reg__intr_block_t__notif0_intr_t_notif_clpra_mcu_reset_req_sts_aadf4417_notif_mcu_sram_ecc_cor_sts_95e5c2eb notif0_internal_intr_r;
        rand mci_reg__intr_block_t__notif1_intr_t_notif_agg_error_non_fatal0_sts_153b1f81_notif_agg_error_non_fatal10_sts_9bebb60c_notif_agg_error_non_fatal11_sts_8f4fbe62_notif_agg_error_non_fatal12_sts_8fdbfe78_notif_agg_error_non_fatal13_sts_fa5cd768_notif_agg_error_non_fatal14_sts_516359a7_notif_agg_error_non_fatal15_sts_0e9d571f_notif_agg_error_non_fatal16_sts_b79f75d3_notif_agg_error_non_fatal17_sts_0c18cbf4_notif_agg_error_non_fatal18_sts_83d64a1f_notif_agg_error_non_fatal19_sts_346fbbcc_notif_agg_error_non_fatal1_sts_35748ee2_notif_agg_error_non_fatal20_sts_5362c56e_notif_agg_error_non_fatal21_sts_aeabef1a_notif_agg_error_non_fatal22_sts_3a444065_notif_agg_error_non_fatal23_sts_b2d40317_notif_agg_error_non_fatal24_sts_f683d156_notif_agg_error_non_fatal25_sts_d230131e_notif_agg_error_non_fatal26_sts_151712ef_notif_agg_error_non_fatal27_sts_47032eac_notif_agg_error_non_fatal28_sts_3f7a4f3f_notif_agg_error_non_fatal29_sts_48f1fd41_notif_agg_error_non_fatal2_sts_a4970c79_notif_agg_error_non_fatal30_sts_01dd78e0_notif_agg_error_non_fatal31_sts_31f7f819_notif_agg_error_non_fatal3_sts_338aeee3_notif_agg_error_non_fatal4_sts_e4042c21_notif_agg_error_non_fatal5_sts_a127b4e1_notif_agg_error_non_fatal6_sts_529605e3_notif_agg_error_non_fatal7_sts_4bd45005_notif_agg_error_non_fatal8_sts_8310de42_notif_agg_error_non_fatal9_sts_d954a7c3 notif1_internal_intr_r;
        rand mci_reg__intr_block_t__error0_intr_trig_t error0_intr_trig_r;
        rand mci_reg__intr_block_t__error1_intr_trig_t error1_intr_trig_r;
        rand mci_reg__intr_block_t__notif0_intr_trig_t notif0_intr_trig_r;
        rand mci_reg__intr_block_t__notif1_intr_trig_t notif1_intr_trig_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_8575f7c3 error_wdt_timer1_timeout_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_c6c5aac2 error_wdt_timer2_timeout_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_cc6839d2 error_agg_error_fatal0_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_e85c8d3f error_agg_error_fatal1_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_173b981b error_agg_error_fatal2_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_ad70eca0 error_agg_error_fatal3_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_9c63ebbb error_agg_error_fatal4_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_bdb11bdf error_agg_error_fatal5_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_285c9356 error_agg_error_fatal6_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_19ffb576 error_agg_error_fatal7_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_0cf58ec0 error_agg_error_fatal8_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_dacb9e87 error_agg_error_fatal9_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_3015e2c4 error_agg_error_fatal10_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_e5e45c3e error_agg_error_fatal11_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_34d3db59 error_agg_error_fatal12_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_6514ef70 error_agg_error_fatal13_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_3f94bf0e error_agg_error_fatal14_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_46df496a error_agg_error_fatal15_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_1e873d29 error_agg_error_fatal16_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_afb84a88 error_agg_error_fatal17_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_c6327078 error_agg_error_fatal18_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_e49096ba error_agg_error_fatal19_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_543b5a79 error_agg_error_fatal20_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_166aef9f error_agg_error_fatal21_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_970ffbe4 error_agg_error_fatal22_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_2c6710e8 error_agg_error_fatal23_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_38ef91b9 error_agg_error_fatal24_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_d47914ef error_agg_error_fatal25_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_0e6d7fe8 error_agg_error_fatal26_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_f5e2a5f9 error_agg_error_fatal27_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_85aa0701 error_agg_error_fatal28_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_230ee14d error_agg_error_fatal29_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_a729f814 error_agg_error_fatal30_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_896729f1 error_agg_error_fatal31_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_9b47838c notif_mcu_sram_ecc_cor_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_0ef015b9 notif_clpra_mcu_reset_req_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_8c9c92fc notif_agg_error_non_fatal0_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_21a01ace notif_agg_error_non_fatal1_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_2eb23480 notif_agg_error_non_fatal2_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_bcd65b0c notif_agg_error_non_fatal3_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_75e50de1 notif_agg_error_non_fatal4_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_e14378f5 notif_agg_error_non_fatal5_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_d7e481f0 notif_agg_error_non_fatal6_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_57ce756e notif_agg_error_non_fatal7_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_7c08ad02 notif_agg_error_non_fatal8_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_9f26fa46 notif_agg_error_non_fatal9_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_2d857802 notif_agg_error_non_fatal10_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_a33acd57 notif_agg_error_non_fatal11_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_6b0b8b72 notif_agg_error_non_fatal12_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_814509ca notif_agg_error_non_fatal13_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_6c105212 notif_agg_error_non_fatal14_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_a91d29fa notif_agg_error_non_fatal15_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_053cf766 notif_agg_error_non_fatal16_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_dd50a72c notif_agg_error_non_fatal17_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_c256fff6 notif_agg_error_non_fatal18_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_80025684 notif_agg_error_non_fatal19_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_b88fb3da notif_agg_error_non_fatal20_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_c225cba5 notif_agg_error_non_fatal21_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_b0594ed5 notif_agg_error_non_fatal22_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_00b48774 notif_agg_error_non_fatal23_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_aba426c3 notif_agg_error_non_fatal24_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_cb69dcdb notif_agg_error_non_fatal25_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_c101eb8f notif_agg_error_non_fatal26_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_f5c7867e notif_agg_error_non_fatal27_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_3a6a25f3 notif_agg_error_non_fatal28_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_0d5ca59f notif_agg_error_non_fatal29_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_f0bd1785 notif_agg_error_non_fatal30_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_t_cnt_e2db60b9 notif_agg_error_non_fatal31_intr_count_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_74acd18e error_wdt_timer1_timeout_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_28374d24 error_wdt_timer2_timeout_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_6360e3d6 error_agg_error_fatal0_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_633a69b2 error_agg_error_fatal1_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_14a3e211 error_agg_error_fatal2_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_b1e11d04 error_agg_error_fatal3_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_13c3bb0e error_agg_error_fatal4_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_ce63ca01 error_agg_error_fatal5_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_0ad5f5e5 error_agg_error_fatal6_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_ccb7556e error_agg_error_fatal7_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_faa59db2 error_agg_error_fatal8_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_64b788d2 error_agg_error_fatal9_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_07c841e3 error_agg_error_fatal10_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_51c2124e error_agg_error_fatal11_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_f5ffe320 error_agg_error_fatal12_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_022dbe36 error_agg_error_fatal13_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_039b3e0f error_agg_error_fatal14_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_fd2f42e6 error_agg_error_fatal15_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_5fcabcf1 error_agg_error_fatal16_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_ea5dc7c6 error_agg_error_fatal17_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_b41e4d59 error_agg_error_fatal18_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_1caa6eda error_agg_error_fatal19_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_66a4d7e8 error_agg_error_fatal20_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_08e7fce4 error_agg_error_fatal21_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_55d70652 error_agg_error_fatal22_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_0d9d2b21 error_agg_error_fatal23_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_e57ba7f1 error_agg_error_fatal24_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_e224923f error_agg_error_fatal25_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_f3cde110 error_agg_error_fatal26_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_d93bd8ce error_agg_error_fatal27_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_cde9364d error_agg_error_fatal28_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_43211e33 error_agg_error_fatal29_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_25a13b9f error_agg_error_fatal30_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_43abecb1 error_agg_error_fatal31_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_c24554e4 notif_mcu_sram_ecc_cor_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_3bafbbba notif_clpra_mcu_reset_req_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_1907ed9d notif_agg_error_non_fatal0_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_8961fa6e notif_agg_error_non_fatal1_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_fe81e5d8 notif_agg_error_non_fatal2_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_7bba0154 notif_agg_error_non_fatal3_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_ab7dd9d8 notif_agg_error_non_fatal4_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_cc04f1be notif_agg_error_non_fatal5_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_fc55bcdc notif_agg_error_non_fatal6_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_b7a5d6e8 notif_agg_error_non_fatal7_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_15791c55 notif_agg_error_non_fatal8_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_aa2c240e notif_agg_error_non_fatal9_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_8ee829eb notif_agg_error_non_fatal10_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_c8fadcf1 notif_agg_error_non_fatal11_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_da30f263 notif_agg_error_non_fatal12_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_4d7978ea notif_agg_error_non_fatal13_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_82eedd27 notif_agg_error_non_fatal14_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_8da87fd8 notif_agg_error_non_fatal15_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_76576605 notif_agg_error_non_fatal16_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_62e3bbd7 notif_agg_error_non_fatal17_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_9f5615ea notif_agg_error_non_fatal18_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_dfcf4fa2 notif_agg_error_non_fatal19_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_e65aef10 notif_agg_error_non_fatal20_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_205dab58 notif_agg_error_non_fatal21_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_4a95f125 notif_agg_error_non_fatal22_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_34303832 notif_agg_error_non_fatal23_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_8f4e2fa9 notif_agg_error_non_fatal24_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_fe99756f notif_agg_error_non_fatal25_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_ec918ac5 notif_agg_error_non_fatal26_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_3159d8db notif_agg_error_non_fatal27_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_71f656a5 notif_agg_error_non_fatal28_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_d0af2f85 notif_agg_error_non_fatal29_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_3d88c5b9 notif_agg_error_non_fatal30_intr_count_incr_r;
        rand mci_reg__intr_block_t__intr_count_incr_t_pulse_c43b8bc4 notif_agg_error_non_fatal31_intr_count_incr_r;

        function new(string name = "mci_reg__intr_block_t");
            super.new(name);
        endfunction : new

        virtual function void build();
            this.default_map = create_map("reg_map", 0, 4, UVM_LITTLE_ENDIAN);
            this.global_intr_en_r = new("global_intr_en_r");
            this.global_intr_en_r.configure(this);

            this.global_intr_en_r.build();
            this.default_map.add_reg(this.global_intr_en_r, 'h0);
            this.error0_intr_en_r = new("error0_intr_en_r");
            this.error0_intr_en_r.configure(this);

            this.error0_intr_en_r.build();
            this.default_map.add_reg(this.error0_intr_en_r, 'h4);
            this.error1_intr_en_r = new("error1_intr_en_r");
            this.error1_intr_en_r.configure(this);

            this.error1_intr_en_r.build();
            this.default_map.add_reg(this.error1_intr_en_r, 'h8);
            this.notif0_intr_en_r = new("notif0_intr_en_r");
            this.notif0_intr_en_r.configure(this);

            this.notif0_intr_en_r.build();
            this.default_map.add_reg(this.notif0_intr_en_r, 'hc);
            this.notif1_intr_en_r = new("notif1_intr_en_r");
            this.notif1_intr_en_r.configure(this);

            this.notif1_intr_en_r.build();
            this.default_map.add_reg(this.notif1_intr_en_r, 'h10);
            this.error_global_intr_r = new("error_global_intr_r");
            this.error_global_intr_r.configure(this);

            this.error_global_intr_r.build();
            this.default_map.add_reg(this.error_global_intr_r, 'h14);
            this.notif_global_intr_r = new("notif_global_intr_r");
            this.notif_global_intr_r.configure(this);

            this.notif_global_intr_r.build();
            this.default_map.add_reg(this.notif_global_intr_r, 'h18);
            this.error0_internal_intr_r = new("error0_internal_intr_r");
            this.error0_internal_intr_r.configure(this);

            this.error0_internal_intr_r.build();
            this.default_map.add_reg(this.error0_internal_intr_r, 'h1c);
            this.error1_internal_intr_r = new("error1_internal_intr_r");
            this.error1_internal_intr_r.configure(this);

            this.error1_internal_intr_r.build();
            this.default_map.add_reg(this.error1_internal_intr_r, 'h20);
            this.notif0_internal_intr_r = new("notif0_internal_intr_r");
            this.notif0_internal_intr_r.configure(this);

            this.notif0_internal_intr_r.build();
            this.default_map.add_reg(this.notif0_internal_intr_r, 'h24);
            this.notif1_internal_intr_r = new("notif1_internal_intr_r");
            this.notif1_internal_intr_r.configure(this);

            this.notif1_internal_intr_r.build();
            this.default_map.add_reg(this.notif1_internal_intr_r, 'h28);
            this.error0_intr_trig_r = new("error0_intr_trig_r");
            this.error0_intr_trig_r.configure(this);

            this.error0_intr_trig_r.build();
            this.default_map.add_reg(this.error0_intr_trig_r, 'h2c);
            this.error1_intr_trig_r = new("error1_intr_trig_r");
            this.error1_intr_trig_r.configure(this);

            this.error1_intr_trig_r.build();
            this.default_map.add_reg(this.error1_intr_trig_r, 'h30);
            this.notif0_intr_trig_r = new("notif0_intr_trig_r");
            this.notif0_intr_trig_r.configure(this);

            this.notif0_intr_trig_r.build();
            this.default_map.add_reg(this.notif0_intr_trig_r, 'h34);
            this.notif1_intr_trig_r = new("notif1_intr_trig_r");
            this.notif1_intr_trig_r.configure(this);

            this.notif1_intr_trig_r.build();
            this.default_map.add_reg(this.notif1_intr_trig_r, 'h38);
            this.error_wdt_timer1_timeout_intr_count_r = new("error_wdt_timer1_timeout_intr_count_r");
            this.error_wdt_timer1_timeout_intr_count_r.configure(this);

            this.error_wdt_timer1_timeout_intr_count_r.build();
            this.default_map.add_reg(this.error_wdt_timer1_timeout_intr_count_r, 'h100);
            this.error_wdt_timer2_timeout_intr_count_r = new("error_wdt_timer2_timeout_intr_count_r");
            this.error_wdt_timer2_timeout_intr_count_r.configure(this);

            this.error_wdt_timer2_timeout_intr_count_r.build();
            this.default_map.add_reg(this.error_wdt_timer2_timeout_intr_count_r, 'h104);
            this.error_agg_error_fatal0_intr_count_r = new("error_agg_error_fatal0_intr_count_r");
            this.error_agg_error_fatal0_intr_count_r.configure(this);

            this.error_agg_error_fatal0_intr_count_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal0_intr_count_r, 'h108);
            this.error_agg_error_fatal1_intr_count_r = new("error_agg_error_fatal1_intr_count_r");
            this.error_agg_error_fatal1_intr_count_r.configure(this);

            this.error_agg_error_fatal1_intr_count_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal1_intr_count_r, 'h10c);
            this.error_agg_error_fatal2_intr_count_r = new("error_agg_error_fatal2_intr_count_r");
            this.error_agg_error_fatal2_intr_count_r.configure(this);

            this.error_agg_error_fatal2_intr_count_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal2_intr_count_r, 'h110);
            this.error_agg_error_fatal3_intr_count_r = new("error_agg_error_fatal3_intr_count_r");
            this.error_agg_error_fatal3_intr_count_r.configure(this);

            this.error_agg_error_fatal3_intr_count_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal3_intr_count_r, 'h114);
            this.error_agg_error_fatal4_intr_count_r = new("error_agg_error_fatal4_intr_count_r");
            this.error_agg_error_fatal4_intr_count_r.configure(this);

            this.error_agg_error_fatal4_intr_count_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal4_intr_count_r, 'h118);
            this.error_agg_error_fatal5_intr_count_r = new("error_agg_error_fatal5_intr_count_r");
            this.error_agg_error_fatal5_intr_count_r.configure(this);

            this.error_agg_error_fatal5_intr_count_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal5_intr_count_r, 'h11c);
            this.error_agg_error_fatal6_intr_count_r = new("error_agg_error_fatal6_intr_count_r");
            this.error_agg_error_fatal6_intr_count_r.configure(this);

            this.error_agg_error_fatal6_intr_count_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal6_intr_count_r, 'h120);
            this.error_agg_error_fatal7_intr_count_r = new("error_agg_error_fatal7_intr_count_r");
            this.error_agg_error_fatal7_intr_count_r.configure(this);

            this.error_agg_error_fatal7_intr_count_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal7_intr_count_r, 'h124);
            this.error_agg_error_fatal8_intr_count_r = new("error_agg_error_fatal8_intr_count_r");
            this.error_agg_error_fatal8_intr_count_r.configure(this);

            this.error_agg_error_fatal8_intr_count_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal8_intr_count_r, 'h128);
            this.error_agg_error_fatal9_intr_count_r = new("error_agg_error_fatal9_intr_count_r");
            this.error_agg_error_fatal9_intr_count_r.configure(this);

            this.error_agg_error_fatal9_intr_count_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal9_intr_count_r, 'h12c);
            this.error_agg_error_fatal10_intr_count_r = new("error_agg_error_fatal10_intr_count_r");
            this.error_agg_error_fatal10_intr_count_r.configure(this);

            this.error_agg_error_fatal10_intr_count_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal10_intr_count_r, 'h130);
            this.error_agg_error_fatal11_intr_count_r = new("error_agg_error_fatal11_intr_count_r");
            this.error_agg_error_fatal11_intr_count_r.configure(this);

            this.error_agg_error_fatal11_intr_count_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal11_intr_count_r, 'h134);
            this.error_agg_error_fatal12_intr_count_r = new("error_agg_error_fatal12_intr_count_r");
            this.error_agg_error_fatal12_intr_count_r.configure(this);

            this.error_agg_error_fatal12_intr_count_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal12_intr_count_r, 'h138);
            this.error_agg_error_fatal13_intr_count_r = new("error_agg_error_fatal13_intr_count_r");
            this.error_agg_error_fatal13_intr_count_r.configure(this);

            this.error_agg_error_fatal13_intr_count_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal13_intr_count_r, 'h13c);
            this.error_agg_error_fatal14_intr_count_r = new("error_agg_error_fatal14_intr_count_r");
            this.error_agg_error_fatal14_intr_count_r.configure(this);

            this.error_agg_error_fatal14_intr_count_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal14_intr_count_r, 'h140);
            this.error_agg_error_fatal15_intr_count_r = new("error_agg_error_fatal15_intr_count_r");
            this.error_agg_error_fatal15_intr_count_r.configure(this);

            this.error_agg_error_fatal15_intr_count_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal15_intr_count_r, 'h144);
            this.error_agg_error_fatal16_intr_count_r = new("error_agg_error_fatal16_intr_count_r");
            this.error_agg_error_fatal16_intr_count_r.configure(this);

            this.error_agg_error_fatal16_intr_count_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal16_intr_count_r, 'h148);
            this.error_agg_error_fatal17_intr_count_r = new("error_agg_error_fatal17_intr_count_r");
            this.error_agg_error_fatal17_intr_count_r.configure(this);

            this.error_agg_error_fatal17_intr_count_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal17_intr_count_r, 'h14c);
            this.error_agg_error_fatal18_intr_count_r = new("error_agg_error_fatal18_intr_count_r");
            this.error_agg_error_fatal18_intr_count_r.configure(this);

            this.error_agg_error_fatal18_intr_count_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal18_intr_count_r, 'h150);
            this.error_agg_error_fatal19_intr_count_r = new("error_agg_error_fatal19_intr_count_r");
            this.error_agg_error_fatal19_intr_count_r.configure(this);

            this.error_agg_error_fatal19_intr_count_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal19_intr_count_r, 'h154);
            this.error_agg_error_fatal20_intr_count_r = new("error_agg_error_fatal20_intr_count_r");
            this.error_agg_error_fatal20_intr_count_r.configure(this);

            this.error_agg_error_fatal20_intr_count_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal20_intr_count_r, 'h158);
            this.error_agg_error_fatal21_intr_count_r = new("error_agg_error_fatal21_intr_count_r");
            this.error_agg_error_fatal21_intr_count_r.configure(this);

            this.error_agg_error_fatal21_intr_count_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal21_intr_count_r, 'h15c);
            this.error_agg_error_fatal22_intr_count_r = new("error_agg_error_fatal22_intr_count_r");
            this.error_agg_error_fatal22_intr_count_r.configure(this);

            this.error_agg_error_fatal22_intr_count_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal22_intr_count_r, 'h160);
            this.error_agg_error_fatal23_intr_count_r = new("error_agg_error_fatal23_intr_count_r");
            this.error_agg_error_fatal23_intr_count_r.configure(this);

            this.error_agg_error_fatal23_intr_count_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal23_intr_count_r, 'h164);
            this.error_agg_error_fatal24_intr_count_r = new("error_agg_error_fatal24_intr_count_r");
            this.error_agg_error_fatal24_intr_count_r.configure(this);

            this.error_agg_error_fatal24_intr_count_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal24_intr_count_r, 'h168);
            this.error_agg_error_fatal25_intr_count_r = new("error_agg_error_fatal25_intr_count_r");
            this.error_agg_error_fatal25_intr_count_r.configure(this);

            this.error_agg_error_fatal25_intr_count_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal25_intr_count_r, 'h16c);
            this.error_agg_error_fatal26_intr_count_r = new("error_agg_error_fatal26_intr_count_r");
            this.error_agg_error_fatal26_intr_count_r.configure(this);

            this.error_agg_error_fatal26_intr_count_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal26_intr_count_r, 'h170);
            this.error_agg_error_fatal27_intr_count_r = new("error_agg_error_fatal27_intr_count_r");
            this.error_agg_error_fatal27_intr_count_r.configure(this);

            this.error_agg_error_fatal27_intr_count_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal27_intr_count_r, 'h174);
            this.error_agg_error_fatal28_intr_count_r = new("error_agg_error_fatal28_intr_count_r");
            this.error_agg_error_fatal28_intr_count_r.configure(this);

            this.error_agg_error_fatal28_intr_count_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal28_intr_count_r, 'h178);
            this.error_agg_error_fatal29_intr_count_r = new("error_agg_error_fatal29_intr_count_r");
            this.error_agg_error_fatal29_intr_count_r.configure(this);

            this.error_agg_error_fatal29_intr_count_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal29_intr_count_r, 'h17c);
            this.error_agg_error_fatal30_intr_count_r = new("error_agg_error_fatal30_intr_count_r");
            this.error_agg_error_fatal30_intr_count_r.configure(this);

            this.error_agg_error_fatal30_intr_count_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal30_intr_count_r, 'h180);
            this.error_agg_error_fatal31_intr_count_r = new("error_agg_error_fatal31_intr_count_r");
            this.error_agg_error_fatal31_intr_count_r.configure(this);

            this.error_agg_error_fatal31_intr_count_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal31_intr_count_r, 'h184);
            this.notif_mcu_sram_ecc_cor_intr_count_r = new("notif_mcu_sram_ecc_cor_intr_count_r");
            this.notif_mcu_sram_ecc_cor_intr_count_r.configure(this);

            this.notif_mcu_sram_ecc_cor_intr_count_r.build();
            this.default_map.add_reg(this.notif_mcu_sram_ecc_cor_intr_count_r, 'h200);
            this.notif_clpra_mcu_reset_req_intr_count_r = new("notif_clpra_mcu_reset_req_intr_count_r");
            this.notif_clpra_mcu_reset_req_intr_count_r.configure(this);

            this.notif_clpra_mcu_reset_req_intr_count_r.build();
            this.default_map.add_reg(this.notif_clpra_mcu_reset_req_intr_count_r, 'h204);
            this.notif_agg_error_non_fatal0_intr_count_r = new("notif_agg_error_non_fatal0_intr_count_r");
            this.notif_agg_error_non_fatal0_intr_count_r.configure(this);

            this.notif_agg_error_non_fatal0_intr_count_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal0_intr_count_r, 'h208);
            this.notif_agg_error_non_fatal1_intr_count_r = new("notif_agg_error_non_fatal1_intr_count_r");
            this.notif_agg_error_non_fatal1_intr_count_r.configure(this);

            this.notif_agg_error_non_fatal1_intr_count_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal1_intr_count_r, 'h20c);
            this.notif_agg_error_non_fatal2_intr_count_r = new("notif_agg_error_non_fatal2_intr_count_r");
            this.notif_agg_error_non_fatal2_intr_count_r.configure(this);

            this.notif_agg_error_non_fatal2_intr_count_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal2_intr_count_r, 'h210);
            this.notif_agg_error_non_fatal3_intr_count_r = new("notif_agg_error_non_fatal3_intr_count_r");
            this.notif_agg_error_non_fatal3_intr_count_r.configure(this);

            this.notif_agg_error_non_fatal3_intr_count_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal3_intr_count_r, 'h214);
            this.notif_agg_error_non_fatal4_intr_count_r = new("notif_agg_error_non_fatal4_intr_count_r");
            this.notif_agg_error_non_fatal4_intr_count_r.configure(this);

            this.notif_agg_error_non_fatal4_intr_count_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal4_intr_count_r, 'h218);
            this.notif_agg_error_non_fatal5_intr_count_r = new("notif_agg_error_non_fatal5_intr_count_r");
            this.notif_agg_error_non_fatal5_intr_count_r.configure(this);

            this.notif_agg_error_non_fatal5_intr_count_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal5_intr_count_r, 'h21c);
            this.notif_agg_error_non_fatal6_intr_count_r = new("notif_agg_error_non_fatal6_intr_count_r");
            this.notif_agg_error_non_fatal6_intr_count_r.configure(this);

            this.notif_agg_error_non_fatal6_intr_count_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal6_intr_count_r, 'h220);
            this.notif_agg_error_non_fatal7_intr_count_r = new("notif_agg_error_non_fatal7_intr_count_r");
            this.notif_agg_error_non_fatal7_intr_count_r.configure(this);

            this.notif_agg_error_non_fatal7_intr_count_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal7_intr_count_r, 'h224);
            this.notif_agg_error_non_fatal8_intr_count_r = new("notif_agg_error_non_fatal8_intr_count_r");
            this.notif_agg_error_non_fatal8_intr_count_r.configure(this);

            this.notif_agg_error_non_fatal8_intr_count_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal8_intr_count_r, 'h228);
            this.notif_agg_error_non_fatal9_intr_count_r = new("notif_agg_error_non_fatal9_intr_count_r");
            this.notif_agg_error_non_fatal9_intr_count_r.configure(this);

            this.notif_agg_error_non_fatal9_intr_count_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal9_intr_count_r, 'h22c);
            this.notif_agg_error_non_fatal10_intr_count_r = new("notif_agg_error_non_fatal10_intr_count_r");
            this.notif_agg_error_non_fatal10_intr_count_r.configure(this);

            this.notif_agg_error_non_fatal10_intr_count_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal10_intr_count_r, 'h230);
            this.notif_agg_error_non_fatal11_intr_count_r = new("notif_agg_error_non_fatal11_intr_count_r");
            this.notif_agg_error_non_fatal11_intr_count_r.configure(this);

            this.notif_agg_error_non_fatal11_intr_count_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal11_intr_count_r, 'h234);
            this.notif_agg_error_non_fatal12_intr_count_r = new("notif_agg_error_non_fatal12_intr_count_r");
            this.notif_agg_error_non_fatal12_intr_count_r.configure(this);

            this.notif_agg_error_non_fatal12_intr_count_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal12_intr_count_r, 'h238);
            this.notif_agg_error_non_fatal13_intr_count_r = new("notif_agg_error_non_fatal13_intr_count_r");
            this.notif_agg_error_non_fatal13_intr_count_r.configure(this);

            this.notif_agg_error_non_fatal13_intr_count_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal13_intr_count_r, 'h23c);
            this.notif_agg_error_non_fatal14_intr_count_r = new("notif_agg_error_non_fatal14_intr_count_r");
            this.notif_agg_error_non_fatal14_intr_count_r.configure(this);

            this.notif_agg_error_non_fatal14_intr_count_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal14_intr_count_r, 'h240);
            this.notif_agg_error_non_fatal15_intr_count_r = new("notif_agg_error_non_fatal15_intr_count_r");
            this.notif_agg_error_non_fatal15_intr_count_r.configure(this);

            this.notif_agg_error_non_fatal15_intr_count_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal15_intr_count_r, 'h244);
            this.notif_agg_error_non_fatal16_intr_count_r = new("notif_agg_error_non_fatal16_intr_count_r");
            this.notif_agg_error_non_fatal16_intr_count_r.configure(this);

            this.notif_agg_error_non_fatal16_intr_count_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal16_intr_count_r, 'h248);
            this.notif_agg_error_non_fatal17_intr_count_r = new("notif_agg_error_non_fatal17_intr_count_r");
            this.notif_agg_error_non_fatal17_intr_count_r.configure(this);

            this.notif_agg_error_non_fatal17_intr_count_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal17_intr_count_r, 'h24c);
            this.notif_agg_error_non_fatal18_intr_count_r = new("notif_agg_error_non_fatal18_intr_count_r");
            this.notif_agg_error_non_fatal18_intr_count_r.configure(this);

            this.notif_agg_error_non_fatal18_intr_count_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal18_intr_count_r, 'h250);
            this.notif_agg_error_non_fatal19_intr_count_r = new("notif_agg_error_non_fatal19_intr_count_r");
            this.notif_agg_error_non_fatal19_intr_count_r.configure(this);

            this.notif_agg_error_non_fatal19_intr_count_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal19_intr_count_r, 'h254);
            this.notif_agg_error_non_fatal20_intr_count_r = new("notif_agg_error_non_fatal20_intr_count_r");
            this.notif_agg_error_non_fatal20_intr_count_r.configure(this);

            this.notif_agg_error_non_fatal20_intr_count_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal20_intr_count_r, 'h258);
            this.notif_agg_error_non_fatal21_intr_count_r = new("notif_agg_error_non_fatal21_intr_count_r");
            this.notif_agg_error_non_fatal21_intr_count_r.configure(this);

            this.notif_agg_error_non_fatal21_intr_count_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal21_intr_count_r, 'h25c);
            this.notif_agg_error_non_fatal22_intr_count_r = new("notif_agg_error_non_fatal22_intr_count_r");
            this.notif_agg_error_non_fatal22_intr_count_r.configure(this);

            this.notif_agg_error_non_fatal22_intr_count_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal22_intr_count_r, 'h260);
            this.notif_agg_error_non_fatal23_intr_count_r = new("notif_agg_error_non_fatal23_intr_count_r");
            this.notif_agg_error_non_fatal23_intr_count_r.configure(this);

            this.notif_agg_error_non_fatal23_intr_count_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal23_intr_count_r, 'h264);
            this.notif_agg_error_non_fatal24_intr_count_r = new("notif_agg_error_non_fatal24_intr_count_r");
            this.notif_agg_error_non_fatal24_intr_count_r.configure(this);

            this.notif_agg_error_non_fatal24_intr_count_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal24_intr_count_r, 'h268);
            this.notif_agg_error_non_fatal25_intr_count_r = new("notif_agg_error_non_fatal25_intr_count_r");
            this.notif_agg_error_non_fatal25_intr_count_r.configure(this);

            this.notif_agg_error_non_fatal25_intr_count_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal25_intr_count_r, 'h26c);
            this.notif_agg_error_non_fatal26_intr_count_r = new("notif_agg_error_non_fatal26_intr_count_r");
            this.notif_agg_error_non_fatal26_intr_count_r.configure(this);

            this.notif_agg_error_non_fatal26_intr_count_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal26_intr_count_r, 'h270);
            this.notif_agg_error_non_fatal27_intr_count_r = new("notif_agg_error_non_fatal27_intr_count_r");
            this.notif_agg_error_non_fatal27_intr_count_r.configure(this);

            this.notif_agg_error_non_fatal27_intr_count_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal27_intr_count_r, 'h274);
            this.notif_agg_error_non_fatal28_intr_count_r = new("notif_agg_error_non_fatal28_intr_count_r");
            this.notif_agg_error_non_fatal28_intr_count_r.configure(this);

            this.notif_agg_error_non_fatal28_intr_count_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal28_intr_count_r, 'h278);
            this.notif_agg_error_non_fatal29_intr_count_r = new("notif_agg_error_non_fatal29_intr_count_r");
            this.notif_agg_error_non_fatal29_intr_count_r.configure(this);

            this.notif_agg_error_non_fatal29_intr_count_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal29_intr_count_r, 'h27c);
            this.notif_agg_error_non_fatal30_intr_count_r = new("notif_agg_error_non_fatal30_intr_count_r");
            this.notif_agg_error_non_fatal30_intr_count_r.configure(this);

            this.notif_agg_error_non_fatal30_intr_count_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal30_intr_count_r, 'h280);
            this.notif_agg_error_non_fatal31_intr_count_r = new("notif_agg_error_non_fatal31_intr_count_r");
            this.notif_agg_error_non_fatal31_intr_count_r.configure(this);

            this.notif_agg_error_non_fatal31_intr_count_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal31_intr_count_r, 'h284);
            this.error_wdt_timer1_timeout_intr_count_incr_r = new("error_wdt_timer1_timeout_intr_count_incr_r");
            this.error_wdt_timer1_timeout_intr_count_incr_r.configure(this);

            this.error_wdt_timer1_timeout_intr_count_incr_r.build();
            this.default_map.add_reg(this.error_wdt_timer1_timeout_intr_count_incr_r, 'h300);
            this.error_wdt_timer2_timeout_intr_count_incr_r = new("error_wdt_timer2_timeout_intr_count_incr_r");
            this.error_wdt_timer2_timeout_intr_count_incr_r.configure(this);

            this.error_wdt_timer2_timeout_intr_count_incr_r.build();
            this.default_map.add_reg(this.error_wdt_timer2_timeout_intr_count_incr_r, 'h304);
            this.error_agg_error_fatal0_intr_count_incr_r = new("error_agg_error_fatal0_intr_count_incr_r");
            this.error_agg_error_fatal0_intr_count_incr_r.configure(this);

            this.error_agg_error_fatal0_intr_count_incr_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal0_intr_count_incr_r, 'h308);
            this.error_agg_error_fatal1_intr_count_incr_r = new("error_agg_error_fatal1_intr_count_incr_r");
            this.error_agg_error_fatal1_intr_count_incr_r.configure(this);

            this.error_agg_error_fatal1_intr_count_incr_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal1_intr_count_incr_r, 'h30c);
            this.error_agg_error_fatal2_intr_count_incr_r = new("error_agg_error_fatal2_intr_count_incr_r");
            this.error_agg_error_fatal2_intr_count_incr_r.configure(this);

            this.error_agg_error_fatal2_intr_count_incr_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal2_intr_count_incr_r, 'h310);
            this.error_agg_error_fatal3_intr_count_incr_r = new("error_agg_error_fatal3_intr_count_incr_r");
            this.error_agg_error_fatal3_intr_count_incr_r.configure(this);

            this.error_agg_error_fatal3_intr_count_incr_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal3_intr_count_incr_r, 'h314);
            this.error_agg_error_fatal4_intr_count_incr_r = new("error_agg_error_fatal4_intr_count_incr_r");
            this.error_agg_error_fatal4_intr_count_incr_r.configure(this);

            this.error_agg_error_fatal4_intr_count_incr_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal4_intr_count_incr_r, 'h318);
            this.error_agg_error_fatal5_intr_count_incr_r = new("error_agg_error_fatal5_intr_count_incr_r");
            this.error_agg_error_fatal5_intr_count_incr_r.configure(this);

            this.error_agg_error_fatal5_intr_count_incr_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal5_intr_count_incr_r, 'h31c);
            this.error_agg_error_fatal6_intr_count_incr_r = new("error_agg_error_fatal6_intr_count_incr_r");
            this.error_agg_error_fatal6_intr_count_incr_r.configure(this);

            this.error_agg_error_fatal6_intr_count_incr_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal6_intr_count_incr_r, 'h320);
            this.error_agg_error_fatal7_intr_count_incr_r = new("error_agg_error_fatal7_intr_count_incr_r");
            this.error_agg_error_fatal7_intr_count_incr_r.configure(this);

            this.error_agg_error_fatal7_intr_count_incr_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal7_intr_count_incr_r, 'h324);
            this.error_agg_error_fatal8_intr_count_incr_r = new("error_agg_error_fatal8_intr_count_incr_r");
            this.error_agg_error_fatal8_intr_count_incr_r.configure(this);

            this.error_agg_error_fatal8_intr_count_incr_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal8_intr_count_incr_r, 'h328);
            this.error_agg_error_fatal9_intr_count_incr_r = new("error_agg_error_fatal9_intr_count_incr_r");
            this.error_agg_error_fatal9_intr_count_incr_r.configure(this);

            this.error_agg_error_fatal9_intr_count_incr_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal9_intr_count_incr_r, 'h32c);
            this.error_agg_error_fatal10_intr_count_incr_r = new("error_agg_error_fatal10_intr_count_incr_r");
            this.error_agg_error_fatal10_intr_count_incr_r.configure(this);

            this.error_agg_error_fatal10_intr_count_incr_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal10_intr_count_incr_r, 'h330);
            this.error_agg_error_fatal11_intr_count_incr_r = new("error_agg_error_fatal11_intr_count_incr_r");
            this.error_agg_error_fatal11_intr_count_incr_r.configure(this);

            this.error_agg_error_fatal11_intr_count_incr_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal11_intr_count_incr_r, 'h334);
            this.error_agg_error_fatal12_intr_count_incr_r = new("error_agg_error_fatal12_intr_count_incr_r");
            this.error_agg_error_fatal12_intr_count_incr_r.configure(this);

            this.error_agg_error_fatal12_intr_count_incr_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal12_intr_count_incr_r, 'h338);
            this.error_agg_error_fatal13_intr_count_incr_r = new("error_agg_error_fatal13_intr_count_incr_r");
            this.error_agg_error_fatal13_intr_count_incr_r.configure(this);

            this.error_agg_error_fatal13_intr_count_incr_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal13_intr_count_incr_r, 'h33c);
            this.error_agg_error_fatal14_intr_count_incr_r = new("error_agg_error_fatal14_intr_count_incr_r");
            this.error_agg_error_fatal14_intr_count_incr_r.configure(this);

            this.error_agg_error_fatal14_intr_count_incr_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal14_intr_count_incr_r, 'h340);
            this.error_agg_error_fatal15_intr_count_incr_r = new("error_agg_error_fatal15_intr_count_incr_r");
            this.error_agg_error_fatal15_intr_count_incr_r.configure(this);

            this.error_agg_error_fatal15_intr_count_incr_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal15_intr_count_incr_r, 'h344);
            this.error_agg_error_fatal16_intr_count_incr_r = new("error_agg_error_fatal16_intr_count_incr_r");
            this.error_agg_error_fatal16_intr_count_incr_r.configure(this);

            this.error_agg_error_fatal16_intr_count_incr_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal16_intr_count_incr_r, 'h348);
            this.error_agg_error_fatal17_intr_count_incr_r = new("error_agg_error_fatal17_intr_count_incr_r");
            this.error_agg_error_fatal17_intr_count_incr_r.configure(this);

            this.error_agg_error_fatal17_intr_count_incr_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal17_intr_count_incr_r, 'h34c);
            this.error_agg_error_fatal18_intr_count_incr_r = new("error_agg_error_fatal18_intr_count_incr_r");
            this.error_agg_error_fatal18_intr_count_incr_r.configure(this);

            this.error_agg_error_fatal18_intr_count_incr_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal18_intr_count_incr_r, 'h350);
            this.error_agg_error_fatal19_intr_count_incr_r = new("error_agg_error_fatal19_intr_count_incr_r");
            this.error_agg_error_fatal19_intr_count_incr_r.configure(this);

            this.error_agg_error_fatal19_intr_count_incr_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal19_intr_count_incr_r, 'h354);
            this.error_agg_error_fatal20_intr_count_incr_r = new("error_agg_error_fatal20_intr_count_incr_r");
            this.error_agg_error_fatal20_intr_count_incr_r.configure(this);

            this.error_agg_error_fatal20_intr_count_incr_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal20_intr_count_incr_r, 'h358);
            this.error_agg_error_fatal21_intr_count_incr_r = new("error_agg_error_fatal21_intr_count_incr_r");
            this.error_agg_error_fatal21_intr_count_incr_r.configure(this);

            this.error_agg_error_fatal21_intr_count_incr_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal21_intr_count_incr_r, 'h35c);
            this.error_agg_error_fatal22_intr_count_incr_r = new("error_agg_error_fatal22_intr_count_incr_r");
            this.error_agg_error_fatal22_intr_count_incr_r.configure(this);

            this.error_agg_error_fatal22_intr_count_incr_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal22_intr_count_incr_r, 'h360);
            this.error_agg_error_fatal23_intr_count_incr_r = new("error_agg_error_fatal23_intr_count_incr_r");
            this.error_agg_error_fatal23_intr_count_incr_r.configure(this);

            this.error_agg_error_fatal23_intr_count_incr_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal23_intr_count_incr_r, 'h364);
            this.error_agg_error_fatal24_intr_count_incr_r = new("error_agg_error_fatal24_intr_count_incr_r");
            this.error_agg_error_fatal24_intr_count_incr_r.configure(this);

            this.error_agg_error_fatal24_intr_count_incr_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal24_intr_count_incr_r, 'h368);
            this.error_agg_error_fatal25_intr_count_incr_r = new("error_agg_error_fatal25_intr_count_incr_r");
            this.error_agg_error_fatal25_intr_count_incr_r.configure(this);

            this.error_agg_error_fatal25_intr_count_incr_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal25_intr_count_incr_r, 'h36c);
            this.error_agg_error_fatal26_intr_count_incr_r = new("error_agg_error_fatal26_intr_count_incr_r");
            this.error_agg_error_fatal26_intr_count_incr_r.configure(this);

            this.error_agg_error_fatal26_intr_count_incr_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal26_intr_count_incr_r, 'h370);
            this.error_agg_error_fatal27_intr_count_incr_r = new("error_agg_error_fatal27_intr_count_incr_r");
            this.error_agg_error_fatal27_intr_count_incr_r.configure(this);

            this.error_agg_error_fatal27_intr_count_incr_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal27_intr_count_incr_r, 'h374);
            this.error_agg_error_fatal28_intr_count_incr_r = new("error_agg_error_fatal28_intr_count_incr_r");
            this.error_agg_error_fatal28_intr_count_incr_r.configure(this);

            this.error_agg_error_fatal28_intr_count_incr_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal28_intr_count_incr_r, 'h378);
            this.error_agg_error_fatal29_intr_count_incr_r = new("error_agg_error_fatal29_intr_count_incr_r");
            this.error_agg_error_fatal29_intr_count_incr_r.configure(this);

            this.error_agg_error_fatal29_intr_count_incr_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal29_intr_count_incr_r, 'h37c);
            this.error_agg_error_fatal30_intr_count_incr_r = new("error_agg_error_fatal30_intr_count_incr_r");
            this.error_agg_error_fatal30_intr_count_incr_r.configure(this);

            this.error_agg_error_fatal30_intr_count_incr_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal30_intr_count_incr_r, 'h380);
            this.error_agg_error_fatal31_intr_count_incr_r = new("error_agg_error_fatal31_intr_count_incr_r");
            this.error_agg_error_fatal31_intr_count_incr_r.configure(this);

            this.error_agg_error_fatal31_intr_count_incr_r.build();
            this.default_map.add_reg(this.error_agg_error_fatal31_intr_count_incr_r, 'h384);
            this.notif_mcu_sram_ecc_cor_intr_count_incr_r = new("notif_mcu_sram_ecc_cor_intr_count_incr_r");
            this.notif_mcu_sram_ecc_cor_intr_count_incr_r.configure(this);

            this.notif_mcu_sram_ecc_cor_intr_count_incr_r.build();
            this.default_map.add_reg(this.notif_mcu_sram_ecc_cor_intr_count_incr_r, 'h388);
            this.notif_clpra_mcu_reset_req_intr_count_incr_r = new("notif_clpra_mcu_reset_req_intr_count_incr_r");
            this.notif_clpra_mcu_reset_req_intr_count_incr_r.configure(this);

            this.notif_clpra_mcu_reset_req_intr_count_incr_r.build();
            this.default_map.add_reg(this.notif_clpra_mcu_reset_req_intr_count_incr_r, 'h38c);
            this.notif_agg_error_non_fatal0_intr_count_incr_r = new("notif_agg_error_non_fatal0_intr_count_incr_r");
            this.notif_agg_error_non_fatal0_intr_count_incr_r.configure(this);

            this.notif_agg_error_non_fatal0_intr_count_incr_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal0_intr_count_incr_r, 'h390);
            this.notif_agg_error_non_fatal1_intr_count_incr_r = new("notif_agg_error_non_fatal1_intr_count_incr_r");
            this.notif_agg_error_non_fatal1_intr_count_incr_r.configure(this);

            this.notif_agg_error_non_fatal1_intr_count_incr_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal1_intr_count_incr_r, 'h394);
            this.notif_agg_error_non_fatal2_intr_count_incr_r = new("notif_agg_error_non_fatal2_intr_count_incr_r");
            this.notif_agg_error_non_fatal2_intr_count_incr_r.configure(this);

            this.notif_agg_error_non_fatal2_intr_count_incr_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal2_intr_count_incr_r, 'h398);
            this.notif_agg_error_non_fatal3_intr_count_incr_r = new("notif_agg_error_non_fatal3_intr_count_incr_r");
            this.notif_agg_error_non_fatal3_intr_count_incr_r.configure(this);

            this.notif_agg_error_non_fatal3_intr_count_incr_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal3_intr_count_incr_r, 'h39c);
            this.notif_agg_error_non_fatal4_intr_count_incr_r = new("notif_agg_error_non_fatal4_intr_count_incr_r");
            this.notif_agg_error_non_fatal4_intr_count_incr_r.configure(this);

            this.notif_agg_error_non_fatal4_intr_count_incr_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal4_intr_count_incr_r, 'h3a0);
            this.notif_agg_error_non_fatal5_intr_count_incr_r = new("notif_agg_error_non_fatal5_intr_count_incr_r");
            this.notif_agg_error_non_fatal5_intr_count_incr_r.configure(this);

            this.notif_agg_error_non_fatal5_intr_count_incr_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal5_intr_count_incr_r, 'h3a4);
            this.notif_agg_error_non_fatal6_intr_count_incr_r = new("notif_agg_error_non_fatal6_intr_count_incr_r");
            this.notif_agg_error_non_fatal6_intr_count_incr_r.configure(this);

            this.notif_agg_error_non_fatal6_intr_count_incr_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal6_intr_count_incr_r, 'h3a8);
            this.notif_agg_error_non_fatal7_intr_count_incr_r = new("notif_agg_error_non_fatal7_intr_count_incr_r");
            this.notif_agg_error_non_fatal7_intr_count_incr_r.configure(this);

            this.notif_agg_error_non_fatal7_intr_count_incr_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal7_intr_count_incr_r, 'h3ac);
            this.notif_agg_error_non_fatal8_intr_count_incr_r = new("notif_agg_error_non_fatal8_intr_count_incr_r");
            this.notif_agg_error_non_fatal8_intr_count_incr_r.configure(this);

            this.notif_agg_error_non_fatal8_intr_count_incr_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal8_intr_count_incr_r, 'h3b0);
            this.notif_agg_error_non_fatal9_intr_count_incr_r = new("notif_agg_error_non_fatal9_intr_count_incr_r");
            this.notif_agg_error_non_fatal9_intr_count_incr_r.configure(this);

            this.notif_agg_error_non_fatal9_intr_count_incr_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal9_intr_count_incr_r, 'h3b4);
            this.notif_agg_error_non_fatal10_intr_count_incr_r = new("notif_agg_error_non_fatal10_intr_count_incr_r");
            this.notif_agg_error_non_fatal10_intr_count_incr_r.configure(this);

            this.notif_agg_error_non_fatal10_intr_count_incr_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal10_intr_count_incr_r, 'h3b8);
            this.notif_agg_error_non_fatal11_intr_count_incr_r = new("notif_agg_error_non_fatal11_intr_count_incr_r");
            this.notif_agg_error_non_fatal11_intr_count_incr_r.configure(this);

            this.notif_agg_error_non_fatal11_intr_count_incr_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal11_intr_count_incr_r, 'h3bc);
            this.notif_agg_error_non_fatal12_intr_count_incr_r = new("notif_agg_error_non_fatal12_intr_count_incr_r");
            this.notif_agg_error_non_fatal12_intr_count_incr_r.configure(this);

            this.notif_agg_error_non_fatal12_intr_count_incr_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal12_intr_count_incr_r, 'h3c0);
            this.notif_agg_error_non_fatal13_intr_count_incr_r = new("notif_agg_error_non_fatal13_intr_count_incr_r");
            this.notif_agg_error_non_fatal13_intr_count_incr_r.configure(this);

            this.notif_agg_error_non_fatal13_intr_count_incr_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal13_intr_count_incr_r, 'h3c4);
            this.notif_agg_error_non_fatal14_intr_count_incr_r = new("notif_agg_error_non_fatal14_intr_count_incr_r");
            this.notif_agg_error_non_fatal14_intr_count_incr_r.configure(this);

            this.notif_agg_error_non_fatal14_intr_count_incr_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal14_intr_count_incr_r, 'h3c8);
            this.notif_agg_error_non_fatal15_intr_count_incr_r = new("notif_agg_error_non_fatal15_intr_count_incr_r");
            this.notif_agg_error_non_fatal15_intr_count_incr_r.configure(this);

            this.notif_agg_error_non_fatal15_intr_count_incr_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal15_intr_count_incr_r, 'h3cc);
            this.notif_agg_error_non_fatal16_intr_count_incr_r = new("notif_agg_error_non_fatal16_intr_count_incr_r");
            this.notif_agg_error_non_fatal16_intr_count_incr_r.configure(this);

            this.notif_agg_error_non_fatal16_intr_count_incr_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal16_intr_count_incr_r, 'h3d0);
            this.notif_agg_error_non_fatal17_intr_count_incr_r = new("notif_agg_error_non_fatal17_intr_count_incr_r");
            this.notif_agg_error_non_fatal17_intr_count_incr_r.configure(this);

            this.notif_agg_error_non_fatal17_intr_count_incr_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal17_intr_count_incr_r, 'h3d4);
            this.notif_agg_error_non_fatal18_intr_count_incr_r = new("notif_agg_error_non_fatal18_intr_count_incr_r");
            this.notif_agg_error_non_fatal18_intr_count_incr_r.configure(this);

            this.notif_agg_error_non_fatal18_intr_count_incr_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal18_intr_count_incr_r, 'h3d8);
            this.notif_agg_error_non_fatal19_intr_count_incr_r = new("notif_agg_error_non_fatal19_intr_count_incr_r");
            this.notif_agg_error_non_fatal19_intr_count_incr_r.configure(this);

            this.notif_agg_error_non_fatal19_intr_count_incr_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal19_intr_count_incr_r, 'h3dc);
            this.notif_agg_error_non_fatal20_intr_count_incr_r = new("notif_agg_error_non_fatal20_intr_count_incr_r");
            this.notif_agg_error_non_fatal20_intr_count_incr_r.configure(this);

            this.notif_agg_error_non_fatal20_intr_count_incr_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal20_intr_count_incr_r, 'h3e0);
            this.notif_agg_error_non_fatal21_intr_count_incr_r = new("notif_agg_error_non_fatal21_intr_count_incr_r");
            this.notif_agg_error_non_fatal21_intr_count_incr_r.configure(this);

            this.notif_agg_error_non_fatal21_intr_count_incr_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal21_intr_count_incr_r, 'h3e4);
            this.notif_agg_error_non_fatal22_intr_count_incr_r = new("notif_agg_error_non_fatal22_intr_count_incr_r");
            this.notif_agg_error_non_fatal22_intr_count_incr_r.configure(this);

            this.notif_agg_error_non_fatal22_intr_count_incr_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal22_intr_count_incr_r, 'h3e8);
            this.notif_agg_error_non_fatal23_intr_count_incr_r = new("notif_agg_error_non_fatal23_intr_count_incr_r");
            this.notif_agg_error_non_fatal23_intr_count_incr_r.configure(this);

            this.notif_agg_error_non_fatal23_intr_count_incr_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal23_intr_count_incr_r, 'h3ec);
            this.notif_agg_error_non_fatal24_intr_count_incr_r = new("notif_agg_error_non_fatal24_intr_count_incr_r");
            this.notif_agg_error_non_fatal24_intr_count_incr_r.configure(this);

            this.notif_agg_error_non_fatal24_intr_count_incr_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal24_intr_count_incr_r, 'h3f0);
            this.notif_agg_error_non_fatal25_intr_count_incr_r = new("notif_agg_error_non_fatal25_intr_count_incr_r");
            this.notif_agg_error_non_fatal25_intr_count_incr_r.configure(this);

            this.notif_agg_error_non_fatal25_intr_count_incr_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal25_intr_count_incr_r, 'h3f4);
            this.notif_agg_error_non_fatal26_intr_count_incr_r = new("notif_agg_error_non_fatal26_intr_count_incr_r");
            this.notif_agg_error_non_fatal26_intr_count_incr_r.configure(this);

            this.notif_agg_error_non_fatal26_intr_count_incr_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal26_intr_count_incr_r, 'h3f8);
            this.notif_agg_error_non_fatal27_intr_count_incr_r = new("notif_agg_error_non_fatal27_intr_count_incr_r");
            this.notif_agg_error_non_fatal27_intr_count_incr_r.configure(this);

            this.notif_agg_error_non_fatal27_intr_count_incr_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal27_intr_count_incr_r, 'h3fc);
            this.notif_agg_error_non_fatal28_intr_count_incr_r = new("notif_agg_error_non_fatal28_intr_count_incr_r");
            this.notif_agg_error_non_fatal28_intr_count_incr_r.configure(this);

            this.notif_agg_error_non_fatal28_intr_count_incr_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal28_intr_count_incr_r, 'h400);
            this.notif_agg_error_non_fatal29_intr_count_incr_r = new("notif_agg_error_non_fatal29_intr_count_incr_r");
            this.notif_agg_error_non_fatal29_intr_count_incr_r.configure(this);

            this.notif_agg_error_non_fatal29_intr_count_incr_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal29_intr_count_incr_r, 'h404);
            this.notif_agg_error_non_fatal30_intr_count_incr_r = new("notif_agg_error_non_fatal30_intr_count_incr_r");
            this.notif_agg_error_non_fatal30_intr_count_incr_r.configure(this);

            this.notif_agg_error_non_fatal30_intr_count_incr_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal30_intr_count_incr_r, 'h408);
            this.notif_agg_error_non_fatal31_intr_count_incr_r = new("notif_agg_error_non_fatal31_intr_count_incr_r");
            this.notif_agg_error_non_fatal31_intr_count_incr_r.configure(this);

            this.notif_agg_error_non_fatal31_intr_count_incr_r.build();
            this.default_map.add_reg(this.notif_agg_error_non_fatal31_intr_count_incr_r, 'h40c);
        endfunction : build
    endclass : mci_reg__intr_block_t

    // Addrmap - mci_reg
    class mci_reg extends uvm_reg_block;
        rand mci_reg__CAPABILITIES CAPABILITIES;
        rand mci_reg__HW_REV_ID HW_REV_ID;
        rand mci_reg__FW_REV_ID FW_REV_ID[2];
        rand mci_reg__HW_CONFIG HW_CONFIG;
        rand mci_reg__BOOT_STATUS BOOT_STATUS;
        rand mci_reg__FLOW_STATUS FLOW_STATUS;
        rand mci_reg__RESET_REASON RESET_REASON;
        rand mci_reg__RESET_STATUS RESET_STATUS;
        rand mci_reg__HW_ERROR_FATAL HW_ERROR_FATAL;
        rand mci_reg__AGG_ERROR_FATAL AGG_ERROR_FATAL;
        rand mci_reg__HW_ERROR_NON_FATAL HW_ERROR_NON_FATAL;
        rand mci_reg__AGG_ERROR_NON_FATAL AGG_ERROR_NON_FATAL;
        rand mci_reg__FW_ERROR_FATAL FW_ERROR_FATAL;
        rand mci_reg__FW_ERROR_NON_FATAL FW_ERROR_NON_FATAL;
        rand mci_reg__HW_ERROR_ENC HW_ERROR_ENC;
        rand mci_reg__FW_ERROR_ENC FW_ERROR_ENC;
        rand mci_reg__FW_EXTENDED_ERROR_INFO FW_EXTENDED_ERROR_INFO[8];
        rand mci_reg__internal_hw_error_fatal_mask internal_hw_error_fatal_mask;
        rand mci_reg__internal_hw_error_non_fatal_mask internal_hw_error_non_fatal_mask;
        rand mci_reg__internal_agg_error_fatal_mask internal_agg_error_fatal_mask;
        rand mci_reg__internal_agg_error_non_fatal_mask internal_agg_error_non_fatal_mask;
        rand mci_reg__internal_fw_error_fatal_mask internal_fw_error_fatal_mask;
        rand mci_reg__internal_fw_error_non_fatal_mask internal_fw_error_non_fatal_mask;
        rand mci_reg__WDT_TIMER1_EN WDT_TIMER1_EN;
        rand mci_reg__WDT_TIMER1_CTRL WDT_TIMER1_CTRL;
        rand mci_reg__WDT_TIMER1_TIMEOUT_PERIOD WDT_TIMER1_TIMEOUT_PERIOD[2];
        rand mci_reg__WDT_TIMER2_EN WDT_TIMER2_EN;
        rand mci_reg__WDT_TIMER2_CTRL WDT_TIMER2_CTRL;
        rand mci_reg__WDT_TIMER2_TIMEOUT_PERIOD WDT_TIMER2_TIMEOUT_PERIOD[2];
        rand mci_reg__WDT_STATUS WDT_STATUS;
        rand mci_reg__WDT_CFG WDT_CFG[2];
        rand mci_reg__MCU_TIMER_CONFIG MCU_TIMER_CONFIG;
        rand mci_reg__MCU_RV_MTIME_L MCU_RV_MTIME_L;
        rand mci_reg__MCU_RV_MTIME_H MCU_RV_MTIME_H;
        rand mci_reg__MCU_RV_MTIMECMP_L MCU_RV_MTIMECMP_L;
        rand mci_reg__MCU_RV_MTIMECMP_H MCU_RV_MTIMECMP_H;
        rand mci_reg__RESET_REQUEST RESET_REQUEST;
        rand mci_reg__CALIPTRA_BOOT_GO CALIPTRA_BOOT_GO;
        rand mci_reg__FW_SRAM_EXEC_REGION_SIZE FW_SRAM_EXEC_REGION_SIZE;
        rand mci_reg__MCU_NMI_VECTOR MCU_NMI_VECTOR;
        rand mci_reg__MCU_RESET_VECTOR MCU_RESET_VECTOR;
        rand mci_reg__MBOX0_VALID_AXI_ID MBOX0_VALID_AXI_ID[5];
        rand mci_reg__MBOX0_VALID_AXI_ID_LOCK MBOX0_VALID_AXI_ID_LOCK[5];
        rand mci_reg__MBOX1_VALID_AXI_ID MBOX1_VALID_AXI_ID[5];
        rand mci_reg__MBOX1_VALID_AXI_ID_LOCK MBOX1_VALID_AXI_ID_LOCK[5];
        rand mci_reg__GENERIC_INPUT_WIRES GENERIC_INPUT_WIRES[2];
        rand mci_reg__GENERIC_OUTPUT_WIRES GENERIC_OUTPUT_WIRES[2];
        rand mci_reg__DEBUG_IN DEBUG_IN;
        rand mci_reg__DEBUG_OUT DEBUG_OUT;
        rand mci_reg__FUSE_WR_DONE FUSE_WR_DONE;
        rand mci_reg__PROD_DEBUG_UNLOCK_PK_HASH_REG PROD_DEBUG_UNLOCK_PK_HASH_REG[8][12];
        rand mci_reg__STICKY_DATA_VAULT_CTRL STICKY_DATA_VAULT_CTRL[10];
        rand mci_reg__STICKY_DATA_VAULT_ENTRY STICKY_DATA_VAULT_ENTRY[10][12];
        rand mci_reg__DATA_VAULT_CTRL DATA_VAULT_CTRL[10];
        rand mci_reg__DATA_VAULT_ENTRY DATA_VAULT_ENTRY[10][12];
        rand mci_reg__STICKY_LOCKABLE_SCRATCH_REG_CTRL STICKY_LOCKABLE_SCRATCH_REG_CTRL[8];
        rand mci_reg__STICKY_LOCKABLE_SCRATCH_REG STICKY_LOCKABLE_SCRATCH_REG[8];
        rand mci_reg__LOCKABLE_SCRATCH_REG_CTRL LOCKABLE_SCRATCH_REG_CTRL[10];
        rand mci_reg__LOCKABLE_SCRATCH_REG LOCKABLE_SCRATCH_REG[10];
        rand mci_reg__NON_STICKY_GENERIC_SCRATCH_REG NON_STICKY_GENERIC_SCRATCH_REG[8];
        rand mci_reg__intr_block_t intr_block_rf;

        function new(string name = "mci_reg");
            super.new(name);
        endfunction : new

        virtual function void build();
            this.default_map = create_map("reg_map", 0, 4, UVM_LITTLE_ENDIAN);
            this.CAPABILITIES = new("CAPABILITIES");
            this.CAPABILITIES.configure(this);

            this.CAPABILITIES.build();
            this.default_map.add_reg(this.CAPABILITIES, 'h0);
            this.HW_REV_ID = new("HW_REV_ID");
            this.HW_REV_ID.configure(this);

            this.HW_REV_ID.build();
            this.default_map.add_reg(this.HW_REV_ID, 'h4);
            foreach(this.FW_REV_ID[i0]) begin
                this.FW_REV_ID[i0] = new($sformatf("FW_REV_ID[%0d]", i0));
                this.FW_REV_ID[i0].configure(this);
                
                this.FW_REV_ID[i0].build();
                this.default_map.add_reg(this.FW_REV_ID[i0], 'h8 + i0*'h4);
            end
            this.HW_CONFIG = new("HW_CONFIG");
            this.HW_CONFIG.configure(this);

            this.HW_CONFIG.build();
            this.default_map.add_reg(this.HW_CONFIG, 'h10);
            this.BOOT_STATUS = new("BOOT_STATUS");
            this.BOOT_STATUS.configure(this);

            this.BOOT_STATUS.build();
            this.default_map.add_reg(this.BOOT_STATUS, 'h20);
            this.FLOW_STATUS = new("FLOW_STATUS");
            this.FLOW_STATUS.configure(this);

            this.FLOW_STATUS.build();
            this.default_map.add_reg(this.FLOW_STATUS, 'h24);
            this.RESET_REASON = new("RESET_REASON");
            this.RESET_REASON.configure(this);

            this.RESET_REASON.build();
            this.default_map.add_reg(this.RESET_REASON, 'h28);
            this.RESET_STATUS = new("RESET_STATUS");
            this.RESET_STATUS.configure(this);

            this.RESET_STATUS.build();
            this.default_map.add_reg(this.RESET_STATUS, 'h2c);
            this.HW_ERROR_FATAL = new("HW_ERROR_FATAL");
            this.HW_ERROR_FATAL.configure(this);

            this.HW_ERROR_FATAL.build();
            this.default_map.add_reg(this.HW_ERROR_FATAL, 'h40);
            this.AGG_ERROR_FATAL = new("AGG_ERROR_FATAL");
            this.AGG_ERROR_FATAL.configure(this);

            this.AGG_ERROR_FATAL.build();
            this.default_map.add_reg(this.AGG_ERROR_FATAL, 'h44);
            this.HW_ERROR_NON_FATAL = new("HW_ERROR_NON_FATAL");
            this.HW_ERROR_NON_FATAL.configure(this);

            this.HW_ERROR_NON_FATAL.build();
            this.default_map.add_reg(this.HW_ERROR_NON_FATAL, 'h48);
            this.AGG_ERROR_NON_FATAL = new("AGG_ERROR_NON_FATAL");
            this.AGG_ERROR_NON_FATAL.configure(this);

            this.AGG_ERROR_NON_FATAL.build();
            this.default_map.add_reg(this.AGG_ERROR_NON_FATAL, 'h4c);
            this.FW_ERROR_FATAL = new("FW_ERROR_FATAL");
            this.FW_ERROR_FATAL.configure(this);

            this.FW_ERROR_FATAL.build();
            this.default_map.add_reg(this.FW_ERROR_FATAL, 'h50);
            this.FW_ERROR_NON_FATAL = new("FW_ERROR_NON_FATAL");
            this.FW_ERROR_NON_FATAL.configure(this);

            this.FW_ERROR_NON_FATAL.build();
            this.default_map.add_reg(this.FW_ERROR_NON_FATAL, 'h54);
            this.HW_ERROR_ENC = new("HW_ERROR_ENC");
            this.HW_ERROR_ENC.configure(this);

            this.HW_ERROR_ENC.build();
            this.default_map.add_reg(this.HW_ERROR_ENC, 'h58);
            this.FW_ERROR_ENC = new("FW_ERROR_ENC");
            this.FW_ERROR_ENC.configure(this);

            this.FW_ERROR_ENC.build();
            this.default_map.add_reg(this.FW_ERROR_ENC, 'h5c);
            foreach(this.FW_EXTENDED_ERROR_INFO[i0]) begin
                this.FW_EXTENDED_ERROR_INFO[i0] = new($sformatf("FW_EXTENDED_ERROR_INFO[%0d]", i0));
                this.FW_EXTENDED_ERROR_INFO[i0].configure(this);
                
                this.FW_EXTENDED_ERROR_INFO[i0].build();
                this.default_map.add_reg(this.FW_EXTENDED_ERROR_INFO[i0], 'h60 + i0*'h4);
            end
            this.internal_hw_error_fatal_mask = new("internal_hw_error_fatal_mask");
            this.internal_hw_error_fatal_mask.configure(this);

            this.internal_hw_error_fatal_mask.build();
            this.default_map.add_reg(this.internal_hw_error_fatal_mask, 'h80);
            this.internal_hw_error_non_fatal_mask = new("internal_hw_error_non_fatal_mask");
            this.internal_hw_error_non_fatal_mask.configure(this);

            this.internal_hw_error_non_fatal_mask.build();
            this.default_map.add_reg(this.internal_hw_error_non_fatal_mask, 'h84);
            this.internal_agg_error_fatal_mask = new("internal_agg_error_fatal_mask");
            this.internal_agg_error_fatal_mask.configure(this);

            this.internal_agg_error_fatal_mask.build();
            this.default_map.add_reg(this.internal_agg_error_fatal_mask, 'h88);
            this.internal_agg_error_non_fatal_mask = new("internal_agg_error_non_fatal_mask");
            this.internal_agg_error_non_fatal_mask.configure(this);

            this.internal_agg_error_non_fatal_mask.build();
            this.default_map.add_reg(this.internal_agg_error_non_fatal_mask, 'h8c);
            this.internal_fw_error_fatal_mask = new("internal_fw_error_fatal_mask");
            this.internal_fw_error_fatal_mask.configure(this);

            this.internal_fw_error_fatal_mask.build();
            this.default_map.add_reg(this.internal_fw_error_fatal_mask, 'h90);
            this.internal_fw_error_non_fatal_mask = new("internal_fw_error_non_fatal_mask");
            this.internal_fw_error_non_fatal_mask.configure(this);

            this.internal_fw_error_non_fatal_mask.build();
            this.default_map.add_reg(this.internal_fw_error_non_fatal_mask, 'h94);
            this.WDT_TIMER1_EN = new("WDT_TIMER1_EN");
            this.WDT_TIMER1_EN.configure(this);

            this.WDT_TIMER1_EN.build();
            this.default_map.add_reg(this.WDT_TIMER1_EN, 'ha0);
            this.WDT_TIMER1_CTRL = new("WDT_TIMER1_CTRL");
            this.WDT_TIMER1_CTRL.configure(this);

            this.WDT_TIMER1_CTRL.build();
            this.default_map.add_reg(this.WDT_TIMER1_CTRL, 'ha4);
            foreach(this.WDT_TIMER1_TIMEOUT_PERIOD[i0]) begin
                this.WDT_TIMER1_TIMEOUT_PERIOD[i0] = new($sformatf("WDT_TIMER1_TIMEOUT_PERIOD[%0d]", i0));
                this.WDT_TIMER1_TIMEOUT_PERIOD[i0].configure(this);
                
                this.WDT_TIMER1_TIMEOUT_PERIOD[i0].build();
                this.default_map.add_reg(this.WDT_TIMER1_TIMEOUT_PERIOD[i0], 'ha8 + i0*'h4);
            end
            this.WDT_TIMER2_EN = new("WDT_TIMER2_EN");
            this.WDT_TIMER2_EN.configure(this);

            this.WDT_TIMER2_EN.build();
            this.default_map.add_reg(this.WDT_TIMER2_EN, 'hb0);
            this.WDT_TIMER2_CTRL = new("WDT_TIMER2_CTRL");
            this.WDT_TIMER2_CTRL.configure(this);

            this.WDT_TIMER2_CTRL.build();
            this.default_map.add_reg(this.WDT_TIMER2_CTRL, 'hb4);
            foreach(this.WDT_TIMER2_TIMEOUT_PERIOD[i0]) begin
                this.WDT_TIMER2_TIMEOUT_PERIOD[i0] = new($sformatf("WDT_TIMER2_TIMEOUT_PERIOD[%0d]", i0));
                this.WDT_TIMER2_TIMEOUT_PERIOD[i0].configure(this);
                
                this.WDT_TIMER2_TIMEOUT_PERIOD[i0].build();
                this.default_map.add_reg(this.WDT_TIMER2_TIMEOUT_PERIOD[i0], 'hb8 + i0*'h4);
            end
            this.WDT_STATUS = new("WDT_STATUS");
            this.WDT_STATUS.configure(this);

            this.WDT_STATUS.build();
            this.default_map.add_reg(this.WDT_STATUS, 'hc0);
            foreach(this.WDT_CFG[i0]) begin
                this.WDT_CFG[i0] = new($sformatf("WDT_CFG[%0d]", i0));
                this.WDT_CFG[i0].configure(this);
                
                this.WDT_CFG[i0].build();
                this.default_map.add_reg(this.WDT_CFG[i0], 'hd0 + i0*'h4);
            end
            this.MCU_TIMER_CONFIG = new("MCU_TIMER_CONFIG");
            this.MCU_TIMER_CONFIG.configure(this);

            this.MCU_TIMER_CONFIG.build();
            this.default_map.add_reg(this.MCU_TIMER_CONFIG, 'he0);
            this.MCU_RV_MTIME_L = new("MCU_RV_MTIME_L");
            this.MCU_RV_MTIME_L.configure(this);

            this.MCU_RV_MTIME_L.build();
            this.default_map.add_reg(this.MCU_RV_MTIME_L, 'he4);
            this.MCU_RV_MTIME_H = new("MCU_RV_MTIME_H");
            this.MCU_RV_MTIME_H.configure(this);

            this.MCU_RV_MTIME_H.build();
            this.default_map.add_reg(this.MCU_RV_MTIME_H, 'he8);
            this.MCU_RV_MTIMECMP_L = new("MCU_RV_MTIMECMP_L");
            this.MCU_RV_MTIMECMP_L.configure(this);

            this.MCU_RV_MTIMECMP_L.build();
            this.default_map.add_reg(this.MCU_RV_MTIMECMP_L, 'hec);
            this.MCU_RV_MTIMECMP_H = new("MCU_RV_MTIMECMP_H");
            this.MCU_RV_MTIMECMP_H.configure(this);

            this.MCU_RV_MTIMECMP_H.build();
            this.default_map.add_reg(this.MCU_RV_MTIMECMP_H, 'hf0);
            this.RESET_REQUEST = new("RESET_REQUEST");
            this.RESET_REQUEST.configure(this);

            this.RESET_REQUEST.build();
            this.default_map.add_reg(this.RESET_REQUEST, 'h100);
            this.CALIPTRA_BOOT_GO = new("CALIPTRA_BOOT_GO");
            this.CALIPTRA_BOOT_GO.configure(this);

            this.CALIPTRA_BOOT_GO.build();
            this.default_map.add_reg(this.CALIPTRA_BOOT_GO, 'h104);
            this.FW_SRAM_EXEC_REGION_SIZE = new("FW_SRAM_EXEC_REGION_SIZE");
            this.FW_SRAM_EXEC_REGION_SIZE.configure(this);

            this.FW_SRAM_EXEC_REGION_SIZE.build();
            this.default_map.add_reg(this.FW_SRAM_EXEC_REGION_SIZE, 'h108);
            this.MCU_NMI_VECTOR = new("MCU_NMI_VECTOR");
            this.MCU_NMI_VECTOR.configure(this);

            this.MCU_NMI_VECTOR.build();
            this.default_map.add_reg(this.MCU_NMI_VECTOR, 'h10c);
            this.MCU_RESET_VECTOR = new("MCU_RESET_VECTOR");
            this.MCU_RESET_VECTOR.configure(this);

            this.MCU_RESET_VECTOR.build();
            this.default_map.add_reg(this.MCU_RESET_VECTOR, 'h110);
            foreach(this.MBOX0_VALID_AXI_ID[i0]) begin
                this.MBOX0_VALID_AXI_ID[i0] = new($sformatf("MBOX0_VALID_AXI_ID[%0d]", i0));
                this.MBOX0_VALID_AXI_ID[i0].configure(this);
                
                this.MBOX0_VALID_AXI_ID[i0].build();
                this.default_map.add_reg(this.MBOX0_VALID_AXI_ID[i0], 'h180 + i0*'h4);
            end
            foreach(this.MBOX0_VALID_AXI_ID_LOCK[i0]) begin
                this.MBOX0_VALID_AXI_ID_LOCK[i0] = new($sformatf("MBOX0_VALID_AXI_ID_LOCK[%0d]", i0));
                this.MBOX0_VALID_AXI_ID_LOCK[i0].configure(this);
                
                this.MBOX0_VALID_AXI_ID_LOCK[i0].build();
                this.default_map.add_reg(this.MBOX0_VALID_AXI_ID_LOCK[i0], 'h1a0 + i0*'h4);
            end
            foreach(this.MBOX1_VALID_AXI_ID[i0]) begin
                this.MBOX1_VALID_AXI_ID[i0] = new($sformatf("MBOX1_VALID_AXI_ID[%0d]", i0));
                this.MBOX1_VALID_AXI_ID[i0].configure(this);
                
                this.MBOX1_VALID_AXI_ID[i0].build();
                this.default_map.add_reg(this.MBOX1_VALID_AXI_ID[i0], 'h1c0 + i0*'h4);
            end
            foreach(this.MBOX1_VALID_AXI_ID_LOCK[i0]) begin
                this.MBOX1_VALID_AXI_ID_LOCK[i0] = new($sformatf("MBOX1_VALID_AXI_ID_LOCK[%0d]", i0));
                this.MBOX1_VALID_AXI_ID_LOCK[i0].configure(this);
                
                this.MBOX1_VALID_AXI_ID_LOCK[i0].build();
                this.default_map.add_reg(this.MBOX1_VALID_AXI_ID_LOCK[i0], 'h1e0 + i0*'h4);
            end
            foreach(this.GENERIC_INPUT_WIRES[i0]) begin
                this.GENERIC_INPUT_WIRES[i0] = new($sformatf("GENERIC_INPUT_WIRES[%0d]", i0));
                this.GENERIC_INPUT_WIRES[i0].configure(this);
                
                this.GENERIC_INPUT_WIRES[i0].build();
                this.default_map.add_reg(this.GENERIC_INPUT_WIRES[i0], 'h400 + i0*'h4);
            end
            foreach(this.GENERIC_OUTPUT_WIRES[i0]) begin
                this.GENERIC_OUTPUT_WIRES[i0] = new($sformatf("GENERIC_OUTPUT_WIRES[%0d]", i0));
                this.GENERIC_OUTPUT_WIRES[i0].configure(this);
                
                this.GENERIC_OUTPUT_WIRES[i0].build();
                this.default_map.add_reg(this.GENERIC_OUTPUT_WIRES[i0], 'h408 + i0*'h4);
            end
            this.DEBUG_IN = new("DEBUG_IN");
            this.DEBUG_IN.configure(this);

            this.DEBUG_IN.build();
            this.default_map.add_reg(this.DEBUG_IN, 'h410);
            this.DEBUG_OUT = new("DEBUG_OUT");
            this.DEBUG_OUT.configure(this);

            this.DEBUG_OUT.build();
            this.default_map.add_reg(this.DEBUG_OUT, 'h414);
            this.FUSE_WR_DONE = new("FUSE_WR_DONE");
            this.FUSE_WR_DONE.configure(this);

            this.FUSE_WR_DONE.build();
            this.default_map.add_reg(this.FUSE_WR_DONE, 'h440);
            foreach(this.PROD_DEBUG_UNLOCK_PK_HASH_REG[i0, i1]) begin
                this.PROD_DEBUG_UNLOCK_PK_HASH_REG[i0][i1] = new($sformatf("PROD_DEBUG_UNLOCK_PK_HASH_REG[%0d][%0d]", i0, i1));
                this.PROD_DEBUG_UNLOCK_PK_HASH_REG[i0][i1].configure(this);
                
                this.PROD_DEBUG_UNLOCK_PK_HASH_REG[i0][i1].build();
                this.default_map.add_reg(this.PROD_DEBUG_UNLOCK_PK_HASH_REG[i0][i1], 'h480 + i0*'h30 + i1*'h4);
            end
            foreach(this.STICKY_DATA_VAULT_CTRL[i0]) begin
                this.STICKY_DATA_VAULT_CTRL[i0] = new($sformatf("STICKY_DATA_VAULT_CTRL[%0d]", i0));
                this.STICKY_DATA_VAULT_CTRL[i0].configure(this);
                
                this.STICKY_DATA_VAULT_CTRL[i0].build();
                this.default_map.add_reg(this.STICKY_DATA_VAULT_CTRL[i0], 'h800 + i0*'h4);
            end
            foreach(this.STICKY_DATA_VAULT_ENTRY[i0, i1]) begin
                this.STICKY_DATA_VAULT_ENTRY[i0][i1] = new($sformatf("STICKY_DATA_VAULT_ENTRY[%0d][%0d]", i0, i1));
                this.STICKY_DATA_VAULT_ENTRY[i0][i1].configure(this);
                
                this.STICKY_DATA_VAULT_ENTRY[i0][i1].build();
                this.default_map.add_reg(this.STICKY_DATA_VAULT_ENTRY[i0][i1], 'h828 + i0*'h30 + i1*'h4);
            end
            foreach(this.DATA_VAULT_CTRL[i0]) begin
                this.DATA_VAULT_CTRL[i0] = new($sformatf("DATA_VAULT_CTRL[%0d]", i0));
                this.DATA_VAULT_CTRL[i0].configure(this);
                
                this.DATA_VAULT_CTRL[i0].build();
                this.default_map.add_reg(this.DATA_VAULT_CTRL[i0], 'ha08 + i0*'h4);
            end
            foreach(this.DATA_VAULT_ENTRY[i0, i1]) begin
                this.DATA_VAULT_ENTRY[i0][i1] = new($sformatf("DATA_VAULT_ENTRY[%0d][%0d]", i0, i1));
                this.DATA_VAULT_ENTRY[i0][i1].configure(this);
                
                this.DATA_VAULT_ENTRY[i0][i1].build();
                this.default_map.add_reg(this.DATA_VAULT_ENTRY[i0][i1], 'ha30 + i0*'h30 + i1*'h4);
            end
            foreach(this.STICKY_LOCKABLE_SCRATCH_REG_CTRL[i0]) begin
                this.STICKY_LOCKABLE_SCRATCH_REG_CTRL[i0] = new($sformatf("STICKY_LOCKABLE_SCRATCH_REG_CTRL[%0d]", i0));
                this.STICKY_LOCKABLE_SCRATCH_REG_CTRL[i0].configure(this);
                
                this.STICKY_LOCKABLE_SCRATCH_REG_CTRL[i0].build();
                this.default_map.add_reg(this.STICKY_LOCKABLE_SCRATCH_REG_CTRL[i0], 'hc10 + i0*'h4);
            end
            foreach(this.STICKY_LOCKABLE_SCRATCH_REG[i0]) begin
                this.STICKY_LOCKABLE_SCRATCH_REG[i0] = new($sformatf("STICKY_LOCKABLE_SCRATCH_REG[%0d]", i0));
                this.STICKY_LOCKABLE_SCRATCH_REG[i0].configure(this);
                
                this.STICKY_LOCKABLE_SCRATCH_REG[i0].build();
                this.default_map.add_reg(this.STICKY_LOCKABLE_SCRATCH_REG[i0], 'hc30 + i0*'h4);
            end
            foreach(this.LOCKABLE_SCRATCH_REG_CTRL[i0]) begin
                this.LOCKABLE_SCRATCH_REG_CTRL[i0] = new($sformatf("LOCKABLE_SCRATCH_REG_CTRL[%0d]", i0));
                this.LOCKABLE_SCRATCH_REG_CTRL[i0].configure(this);
                
                this.LOCKABLE_SCRATCH_REG_CTRL[i0].build();
                this.default_map.add_reg(this.LOCKABLE_SCRATCH_REG_CTRL[i0], 'hc50 + i0*'h4);
            end
            foreach(this.LOCKABLE_SCRATCH_REG[i0]) begin
                this.LOCKABLE_SCRATCH_REG[i0] = new($sformatf("LOCKABLE_SCRATCH_REG[%0d]", i0));
                this.LOCKABLE_SCRATCH_REG[i0].configure(this);
                
                this.LOCKABLE_SCRATCH_REG[i0].build();
                this.default_map.add_reg(this.LOCKABLE_SCRATCH_REG[i0], 'hc78 + i0*'h4);
            end
            foreach(this.NON_STICKY_GENERIC_SCRATCH_REG[i0]) begin
                this.NON_STICKY_GENERIC_SCRATCH_REG[i0] = new($sformatf("NON_STICKY_GENERIC_SCRATCH_REG[%0d]", i0));
                this.NON_STICKY_GENERIC_SCRATCH_REG[i0].configure(this);
                
                this.NON_STICKY_GENERIC_SCRATCH_REG[i0].build();
                this.default_map.add_reg(this.NON_STICKY_GENERIC_SCRATCH_REG[i0], 'hca0 + i0*'h4);
            end
            this.intr_block_rf = new("intr_block_rf");
            this.intr_block_rf.configure(this);
            this.intr_block_rf.build();
            this.default_map.add_submap(this.intr_block_rf.default_map, 'h1000);
        endfunction : build
    endclass : mci_reg

    `include "mci_reg_sample.svh"
endpackage: mci_reg_uvm
