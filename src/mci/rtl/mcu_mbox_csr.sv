// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module mcu_mbox_csr (
        input wire clk,
        input wire rst,

        input wire s_cpuif_req,
        input wire s_cpuif_req_is_wr,
        input wire [21:0] s_cpuif_addr,
        input wire [31:0] s_cpuif_wr_data,
        input wire [31:0] s_cpuif_wr_biten,
        output wire s_cpuif_req_stall_wr,
        output wire s_cpuif_req_stall_rd,
        output wire s_cpuif_rd_ack,
        output wire s_cpuif_rd_err,
        output wire [31:0] s_cpuif_rd_data,
        output wire s_cpuif_wr_ack,
        output wire s_cpuif_wr_err,

        input mcu_mbox_csr_pkg::mcu_mbox_csr__in_t hwif_in,
        output mcu_mbox_csr_pkg::mcu_mbox_csr__out_t hwif_out
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [21:0] cpuif_addr;
    logic [31:0] cpuif_wr_data;
    logic [31:0] cpuif_wr_biten;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [31:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;

    assign cpuif_req = s_cpuif_req;
    assign cpuif_req_is_wr = s_cpuif_req_is_wr;
    assign cpuif_addr = s_cpuif_addr;
    assign cpuif_wr_data = s_cpuif_wr_data;
    assign cpuif_wr_biten = s_cpuif_wr_biten;
    assign s_cpuif_req_stall_wr = cpuif_req_stall_wr;
    assign s_cpuif_req_stall_rd = cpuif_req_stall_rd;
    assign s_cpuif_rd_ack = cpuif_rd_ack;
    assign s_cpuif_rd_err = cpuif_rd_err;
    assign s_cpuif_rd_data = cpuif_rd_data;
    assign s_cpuif_wr_ack = cpuif_wr_ack;
    assign s_cpuif_wr_err = cpuif_wr_err;

    logic cpuif_req_masked;
    logic external_req;
    logic external_pending;
    logic external_wr_ack;
    logic external_rd_ack;
    always_ff @(posedge clk or negedge hwif_in.rst_b) begin
        if(~hwif_in.rst_b) begin
            external_pending <= '0;
        end else begin
            if(external_req & ~external_wr_ack & ~external_rd_ack) external_pending <= '1;
            else if(external_wr_ack | external_rd_ack) external_pending <= '0;
            assert(!external_wr_ack || (external_pending | external_req))
                else $error("An external wr_ack strobe was asserted when no external request was active");
            assert(!external_rd_ack || (external_pending | external_req))
                else $error("An external rd_ack strobe was asserted when no external request was active");
        end
    end

    // Read & write latencies are balanced. Stalls not required
    // except if external
    assign cpuif_req_stall_rd = external_pending;
    assign cpuif_req_stall_wr = external_pending;
    assign cpuif_req_masked = cpuif_req
                            & !(!cpuif_req_is_wr & cpuif_req_stall_rd)
                            & !(cpuif_req_is_wr & cpuif_req_stall_wr);

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    typedef struct packed{
        logic MBOX_SRAM;
        logic mbox_lock;
        logic mbox_user;
        logic mbox_target_user;
        logic mbox_target_user_valid;
        logic mbox_cmd;
        logic mbox_dlen;
        logic mbox_execute;
        logic mbox_target_status;
        logic mbox_cmd_status;
        logic mbox_hw_status;
    } decoded_reg_strb_t;
    decoded_reg_strb_t decoded_reg_strb;
    logic decoded_strb_is_external;

    logic [21:0] decoded_addr;

    logic decoded_req;
    logic decoded_req_is_wr;
    logic [31:0] decoded_wr_data;
    logic [31:0] decoded_wr_biten;

    always_comb begin
        automatic logic is_external;
        is_external = '0;
        decoded_reg_strb.MBOX_SRAM = cpuif_req_masked & (cpuif_addr >= 22'h0) & (cpuif_addr <= 22'h0 + 22'h1fffff);
        is_external |= cpuif_req_masked & (cpuif_addr >= 22'h0) & (cpuif_addr <= 22'h0 + 22'h1fffff);
        decoded_reg_strb.mbox_lock = cpuif_req_masked & (cpuif_addr == 22'h200000);
        decoded_reg_strb.mbox_user = cpuif_req_masked & (cpuif_addr == 22'h200004);
        decoded_reg_strb.mbox_target_user = cpuif_req_masked & (cpuif_addr == 22'h200008);
        decoded_reg_strb.mbox_target_user_valid = cpuif_req_masked & (cpuif_addr == 22'h20000c);
        decoded_reg_strb.mbox_cmd = cpuif_req_masked & (cpuif_addr == 22'h200010);
        decoded_reg_strb.mbox_dlen = cpuif_req_masked & (cpuif_addr == 22'h200014);
        decoded_reg_strb.mbox_execute = cpuif_req_masked & (cpuif_addr == 22'h200018);
        decoded_reg_strb.mbox_target_status = cpuif_req_masked & (cpuif_addr == 22'h20001c);
        decoded_reg_strb.mbox_cmd_status = cpuif_req_masked & (cpuif_addr == 22'h200020);
        decoded_reg_strb.mbox_hw_status = cpuif_req_masked & (cpuif_addr == 22'h200024);
        decoded_strb_is_external = is_external;
        external_req = is_external;
    end

    // Pass down signals to next stage
    assign decoded_addr = cpuif_addr;

    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;
    assign decoded_wr_biten = cpuif_wr_biten;

    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    typedef struct packed{
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } lock;
        } mbox_lock;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } user;
        } mbox_user;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } user;
        } mbox_target_user;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } valid;
        } mbox_target_user_valid;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } command;
        } mbox_cmd;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } length;
        } mbox_dlen;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } execute;
        } mbox_execute;
        struct packed{
            struct packed{
                logic [3:0] next;
                logic load_next;
            } status;
            struct packed{
                logic next;
                logic load_next;
            } done;
        } mbox_target_status;
        struct packed{
            struct packed{
                logic [3:0] next;
                logic load_next;
            } status;
        } mbox_cmd_status;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } ecc_single_error;
            struct packed{
                logic next;
                logic load_next;
            } ecc_double_error;
        } mbox_hw_status;
    } field_combo_t;
    field_combo_t field_combo;

    typedef struct packed{
        struct packed{
            struct packed{
                logic value;
            } lock;
        } mbox_lock;
        struct packed{
            struct packed{
                logic [31:0] value;
            } user;
        } mbox_user;
        struct packed{
            struct packed{
                logic [31:0] value;
            } user;
        } mbox_target_user;
        struct packed{
            struct packed{
                logic value;
            } valid;
        } mbox_target_user_valid;
        struct packed{
            struct packed{
                logic [31:0] value;
            } command;
        } mbox_cmd;
        struct packed{
            struct packed{
                logic [31:0] value;
            } length;
        } mbox_dlen;
        struct packed{
            struct packed{
                logic value;
            } execute;
        } mbox_execute;
        struct packed{
            struct packed{
                logic [3:0] value;
            } status;
            struct packed{
                logic value;
            } done;
        } mbox_target_status;
        struct packed{
            struct packed{
                logic [3:0] value;
            } status;
        } mbox_cmd_status;
        struct packed{
            struct packed{
                logic value;
            } ecc_single_error;
            struct packed{
                logic value;
            } ecc_double_error;
        } mbox_hw_status;
    } field_storage_t;
    field_storage_t field_storage;

    assign hwif_out.MBOX_SRAM.req = decoded_reg_strb.MBOX_SRAM;
    assign hwif_out.MBOX_SRAM.addr = decoded_addr[21:0];
    assign hwif_out.MBOX_SRAM.req_is_wr = decoded_req_is_wr;
    assign hwif_out.MBOX_SRAM.wr_data = decoded_wr_data;
    assign hwif_out.MBOX_SRAM.wr_biten = decoded_wr_biten;
    // Field: mcu_mbox_csr.mbox_lock.lock
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.mbox_lock.lock.value;
        load_next_c = '0;
        if(hwif_in.mbox_lock.lock.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(hwif_in.mbox_lock.lock.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end else if(decoded_reg_strb.mbox_lock && !decoded_req_is_wr) begin // SW set on read
            next_c = '1;
            load_next_c = '1;
        end
        field_combo.mbox_lock.lock.next = next_c;
        field_combo.mbox_lock.lock.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_b) begin
        if(~hwif_in.rst_b) begin
            field_storage.mbox_lock.lock.value <= 1'h0;
        end else if(field_combo.mbox_lock.lock.load_next) begin
            field_storage.mbox_lock.lock.value <= field_combo.mbox_lock.lock.next;
        end
    end
    assign hwif_out.mbox_lock.lock.value = field_storage.mbox_lock.lock.value;
    assign hwif_out.mbox_lock.lock.swmod = decoded_reg_strb.mbox_lock && !decoded_req_is_wr;
    // Field: mcu_mbox_csr.mbox_user.user
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.mbox_user.user.value;
        load_next_c = '0;
        if(hwif_in.mbox_lock.lock.hwset) begin // HW Write - we
            next_c = hwif_in.mbox_user.user.next;
            load_next_c = '1;
        end else if(hwif_in.mbox_user.user.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.mbox_user.user.next = next_c;
        field_combo.mbox_user.user.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_b) begin
        if(~hwif_in.rst_b) begin
            field_storage.mbox_user.user.value <= 32'h0;
        end else if(field_combo.mbox_user.user.load_next) begin
            field_storage.mbox_user.user.value <= field_combo.mbox_user.user.next;
        end
    end
    assign hwif_out.mbox_user.user.value = field_storage.mbox_user.user.value;
    // Field: mcu_mbox_csr.mbox_target_user.user
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.mbox_target_user.user.value;
        load_next_c = '0;
        if(decoded_reg_strb.mbox_target_user && decoded_req_is_wr && hwif_in.valid_root_req) begin // SW write
            next_c = (field_storage.mbox_target_user.user.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.mbox_target_user.user.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.mbox_target_user.user.next = next_c;
        field_combo.mbox_target_user.user.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_b) begin
        if(~hwif_in.rst_b) begin
            field_storage.mbox_target_user.user.value <= 32'h0;
        end else if(field_combo.mbox_target_user.user.load_next) begin
            field_storage.mbox_target_user.user.value <= field_combo.mbox_target_user.user.next;
        end
    end
    assign hwif_out.mbox_target_user.user.value = field_storage.mbox_target_user.user.value;
    // Field: mcu_mbox_csr.mbox_target_user_valid.valid
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.mbox_target_user_valid.valid.value;
        load_next_c = '0;
        if(decoded_reg_strb.mbox_target_user_valid && decoded_req_is_wr && hwif_in.valid_root_req) begin // SW write
            next_c = (field_storage.mbox_target_user_valid.valid.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else if(hwif_in.mbox_target_user_valid.valid.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.mbox_target_user_valid.valid.next = next_c;
        field_combo.mbox_target_user_valid.valid.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_b) begin
        if(~hwif_in.rst_b) begin
            field_storage.mbox_target_user_valid.valid.value <= 1'h0;
        end else if(field_combo.mbox_target_user_valid.valid.load_next) begin
            field_storage.mbox_target_user_valid.valid.value <= field_combo.mbox_target_user_valid.valid.next;
        end
    end
    assign hwif_out.mbox_target_user_valid.valid.value = field_storage.mbox_target_user_valid.valid.value;
    // Field: mcu_mbox_csr.mbox_cmd.command
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.mbox_cmd.command.value;
        load_next_c = '0;
        if(decoded_reg_strb.mbox_cmd && decoded_req_is_wr && hwif_in.valid_requester_req) begin // SW write
            next_c = (field_storage.mbox_cmd.command.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.mbox_cmd.command.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.mbox_cmd.command.next = next_c;
        field_combo.mbox_cmd.command.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_b) begin
        if(~hwif_in.rst_b) begin
            field_storage.mbox_cmd.command.value <= 32'h0;
        end else if(field_combo.mbox_cmd.command.load_next) begin
            field_storage.mbox_cmd.command.value <= field_combo.mbox_cmd.command.next;
        end
    end
    // Field: mcu_mbox_csr.mbox_dlen.length
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.mbox_dlen.length.value;
        load_next_c = '0;
        if(decoded_reg_strb.mbox_dlen && decoded_req_is_wr && hwif_in.valid_requester_target_req) begin // SW write
            next_c = (field_storage.mbox_dlen.length.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.mbox_dlen.length.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.mbox_dlen.length.next = next_c;
        field_combo.mbox_dlen.length.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_b) begin
        if(~hwif_in.rst_b) begin
            field_storage.mbox_dlen.length.value <= 32'h0;
        end else if(field_combo.mbox_dlen.length.load_next) begin
            field_storage.mbox_dlen.length.value <= field_combo.mbox_dlen.length.next;
        end
    end
    assign hwif_out.mbox_dlen.length.value = field_storage.mbox_dlen.length.value;
    // Field: mcu_mbox_csr.mbox_execute.execute
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.mbox_execute.execute.value;
        load_next_c = '0;
        if(decoded_reg_strb.mbox_execute && decoded_req_is_wr && hwif_in.valid_requester_req) begin // SW write
            next_c = (field_storage.mbox_execute.execute.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.mbox_execute.execute.next = next_c;
        field_combo.mbox_execute.execute.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_b) begin
        if(~hwif_in.rst_b) begin
            field_storage.mbox_execute.execute.value <= 1'h0;
        end else if(field_combo.mbox_execute.execute.load_next) begin
            field_storage.mbox_execute.execute.value <= field_combo.mbox_execute.execute.next;
        end
    end
    assign hwif_out.mbox_execute.execute.value = field_storage.mbox_execute.execute.value;
    assign hwif_out.mbox_execute.execute.swmod = decoded_reg_strb.mbox_execute && decoded_req_is_wr;
    // Field: mcu_mbox_csr.mbox_target_status.status
    always_comb begin
        automatic logic [3:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.mbox_target_status.status.value;
        load_next_c = '0;
        if(hwif_in.mbox_target_status.status.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end else if(decoded_reg_strb.mbox_target_status && decoded_req_is_wr && hwif_in.valid_target_req) begin // SW write
            next_c = (field_storage.mbox_target_status.status.value & ~decoded_wr_biten[3:0]) | (decoded_wr_data[3:0] & decoded_wr_biten[3:0]);
            load_next_c = '1;
        end
        field_combo.mbox_target_status.status.next = next_c;
        field_combo.mbox_target_status.status.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_b) begin
        if(~hwif_in.rst_b) begin
            field_storage.mbox_target_status.status.value <= 4'h0;
        end else if(field_combo.mbox_target_status.status.load_next) begin
            field_storage.mbox_target_status.status.value <= field_combo.mbox_target_status.status.next;
        end
    end
    assign hwif_out.mbox_target_status.status.value = field_storage.mbox_target_status.status.value;
    // Field: mcu_mbox_csr.mbox_target_status.done
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.mbox_target_status.done.value;
        load_next_c = '0;
        if(hwif_in.mbox_target_status.done.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end else if(decoded_reg_strb.mbox_target_status && decoded_req_is_wr && hwif_in.valid_target_req) begin // SW write
            next_c = (field_storage.mbox_target_status.done.value & ~decoded_wr_biten[4:4]) | (decoded_wr_data[4:4] & decoded_wr_biten[4:4]);
            load_next_c = '1;
        end
        field_combo.mbox_target_status.done.next = next_c;
        field_combo.mbox_target_status.done.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_b) begin
        if(~hwif_in.rst_b) begin
            field_storage.mbox_target_status.done.value <= 1'h0;
        end else if(field_combo.mbox_target_status.done.load_next) begin
            field_storage.mbox_target_status.done.value <= field_combo.mbox_target_status.done.next;
        end
    end
    assign hwif_out.mbox_target_status.done.value = field_storage.mbox_target_status.done.value;
    // Field: mcu_mbox_csr.mbox_cmd_status.status
    always_comb begin
        automatic logic [3:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.mbox_cmd_status.status.value;
        load_next_c = '0;
        if(hwif_in.mbox_cmd_status.status.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end else if(decoded_reg_strb.mbox_cmd_status && decoded_req_is_wr && hwif_in.valid_root_req) begin // SW write
            next_c = (field_storage.mbox_cmd_status.status.value & ~decoded_wr_biten[3:0]) | (decoded_wr_data[3:0] & decoded_wr_biten[3:0]);
            load_next_c = '1;
        end
        field_combo.mbox_cmd_status.status.next = next_c;
        field_combo.mbox_cmd_status.status.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_b) begin
        if(~hwif_in.rst_b) begin
            field_storage.mbox_cmd_status.status.value <= 4'h0;
        end else if(field_combo.mbox_cmd_status.status.load_next) begin
            field_storage.mbox_cmd_status.status.value <= field_combo.mbox_cmd_status.status.next;
        end
    end
    assign hwif_out.mbox_cmd_status.status.value = field_storage.mbox_cmd_status.status.value;
    // Field: mcu_mbox_csr.mbox_hw_status.ecc_single_error
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.mbox_hw_status.ecc_single_error.value;
        load_next_c = '0;
        if(!field_storage.mbox_lock.lock.value) begin // HW Write - wel
            next_c = field_storage.mbox_lock.lock.value;
            load_next_c = '1;
        end else if(hwif_in.mbox_hw_status.ecc_single_error.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        field_combo.mbox_hw_status.ecc_single_error.next = next_c;
        field_combo.mbox_hw_status.ecc_single_error.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_b) begin
        if(~hwif_in.rst_b) begin
            field_storage.mbox_hw_status.ecc_single_error.value <= 1'h0;
        end else if(field_combo.mbox_hw_status.ecc_single_error.load_next) begin
            field_storage.mbox_hw_status.ecc_single_error.value <= field_combo.mbox_hw_status.ecc_single_error.next;
        end
    end
    assign hwif_out.mbox_hw_status.ecc_single_error.value = field_storage.mbox_hw_status.ecc_single_error.value;
    // Field: mcu_mbox_csr.mbox_hw_status.ecc_double_error
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.mbox_hw_status.ecc_double_error.value;
        load_next_c = '0;
        if(!field_storage.mbox_lock.lock.value) begin // HW Write - wel
            next_c = field_storage.mbox_lock.lock.value;
            load_next_c = '1;
        end else if(hwif_in.mbox_hw_status.ecc_double_error.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        field_combo.mbox_hw_status.ecc_double_error.next = next_c;
        field_combo.mbox_hw_status.ecc_double_error.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_b) begin
        if(~hwif_in.rst_b) begin
            field_storage.mbox_hw_status.ecc_double_error.value <= 1'h0;
        end else if(field_combo.mbox_hw_status.ecc_double_error.load_next) begin
            field_storage.mbox_hw_status.ecc_double_error.value <= field_combo.mbox_hw_status.ecc_double_error.next;
        end
    end
    assign hwif_out.mbox_hw_status.ecc_double_error.value = field_storage.mbox_hw_status.ecc_double_error.value;

    //--------------------------------------------------------------------------
    // Write response
    //--------------------------------------------------------------------------
    always_comb begin
        automatic logic wr_ack;
        wr_ack = '0;
        wr_ack |= hwif_in.MBOX_SRAM.wr_ack;
        external_wr_ack = wr_ack;
    end
    assign cpuif_wr_ack = external_wr_ack | (decoded_req & decoded_req_is_wr & ~decoded_strb_is_external);
    // Writes are always granted with no error response
    assign cpuif_wr_err = '0;

    //--------------------------------------------------------------------------
    // Readback
    //--------------------------------------------------------------------------
    logic readback_external_rd_ack_c;
    always_comb begin
        automatic logic rd_ack;
        rd_ack = '0;
        rd_ack |= hwif_in.MBOX_SRAM.rd_ack;
        readback_external_rd_ack_c = rd_ack;
    end

    logic readback_external_rd_ack;

    assign readback_external_rd_ack = readback_external_rd_ack_c;

    logic readback_err;
    logic readback_done;
    logic [31:0] readback_data;

    // Assign readback values to a flattened array
    logic [11-1:0][31:0] readback_array;
    assign readback_array[0] = hwif_in.MBOX_SRAM.rd_ack ? hwif_in.MBOX_SRAM.rd_data : '0;
    assign readback_array[1][0:0] = (decoded_reg_strb.mbox_lock && !decoded_req_is_wr) ? field_storage.mbox_lock.lock.value : '0;
    assign readback_array[1][31:1] = '0;
    assign readback_array[2][31:0] = (decoded_reg_strb.mbox_user && !decoded_req_is_wr) ? field_storage.mbox_user.user.value : '0;
    assign readback_array[3][31:0] = (decoded_reg_strb.mbox_target_user && !decoded_req_is_wr) ? field_storage.mbox_target_user.user.value : '0;
    assign readback_array[4][0:0] = (decoded_reg_strb.mbox_target_user_valid && !decoded_req_is_wr) ? field_storage.mbox_target_user_valid.valid.value : '0;
    assign readback_array[4][31:1] = '0;
    assign readback_array[5][31:0] = (decoded_reg_strb.mbox_cmd && !decoded_req_is_wr) ? field_storage.mbox_cmd.command.value : '0;
    assign readback_array[6][31:0] = (decoded_reg_strb.mbox_dlen && !decoded_req_is_wr) ? field_storage.mbox_dlen.length.value : '0;
    assign readback_array[7][0:0] = (decoded_reg_strb.mbox_execute && !decoded_req_is_wr) ? field_storage.mbox_execute.execute.value : '0;
    assign readback_array[7][31:1] = '0;
    assign readback_array[8][3:0] = (decoded_reg_strb.mbox_target_status && !decoded_req_is_wr) ? field_storage.mbox_target_status.status.value : '0;
    assign readback_array[8][4:4] = (decoded_reg_strb.mbox_target_status && !decoded_req_is_wr) ? field_storage.mbox_target_status.done.value : '0;
    assign readback_array[8][31:5] = '0;
    assign readback_array[9][3:0] = (decoded_reg_strb.mbox_cmd_status && !decoded_req_is_wr) ? field_storage.mbox_cmd_status.status.value : '0;
    assign readback_array[9][31:4] = '0;
    assign readback_array[10][0:0] = (decoded_reg_strb.mbox_hw_status && !decoded_req_is_wr) ? field_storage.mbox_hw_status.ecc_single_error.value : '0;
    assign readback_array[10][1:1] = (decoded_reg_strb.mbox_hw_status && !decoded_req_is_wr) ? field_storage.mbox_hw_status.ecc_double_error.value : '0;
    assign readback_array[10][31:2] = '0;

    // Reduce the array
    always_comb begin
        automatic logic [31:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr & ~decoded_strb_is_external;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<11; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end

    assign external_rd_ack = readback_external_rd_ack;
    assign cpuif_rd_ack = readback_done | readback_external_rd_ack;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;

`CALIPTRA_ASSERT_KNOWN(ERR_HWIF_IN, hwif_in, clk, !hwif_in.rst_b)

endmodule
