// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module trace_buffer_csr (
        input wire clk,
        input wire rst,

        input wire s_cpuif_req,
        input wire s_cpuif_req_is_wr,
        input wire [4:0] s_cpuif_addr,
        input wire [31:0] s_cpuif_wr_data,
        input wire [31:0] s_cpuif_wr_biten,
        output wire s_cpuif_req_stall_wr,
        output wire s_cpuif_req_stall_rd,
        output wire s_cpuif_rd_ack,
        output wire s_cpuif_rd_err,
        output wire [31:0] s_cpuif_rd_data,
        output wire s_cpuif_wr_ack,
        output wire s_cpuif_wr_err,

        input trace_buffer_csr_pkg::trace_buffer_csr__in_t hwif_in,
        output trace_buffer_csr_pkg::trace_buffer_csr__out_t hwif_out
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [4:0] cpuif_addr;
    logic [31:0] cpuif_wr_data;
    logic [31:0] cpuif_wr_biten;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [31:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;

    assign cpuif_req = s_cpuif_req;
    assign cpuif_req_is_wr = s_cpuif_req_is_wr;
    assign cpuif_addr = s_cpuif_addr;
    assign cpuif_wr_data = s_cpuif_wr_data;
    assign cpuif_wr_biten = s_cpuif_wr_biten;
    assign s_cpuif_req_stall_wr = cpuif_req_stall_wr;
    assign s_cpuif_req_stall_rd = cpuif_req_stall_rd;
    assign s_cpuif_rd_ack = cpuif_rd_ack;
    assign s_cpuif_rd_err = cpuif_rd_err;
    assign s_cpuif_rd_data = cpuif_rd_data;
    assign s_cpuif_wr_ack = cpuif_wr_ack;
    assign s_cpuif_wr_err = cpuif_wr_err;

    logic cpuif_req_masked;

    // Read & write latencies are balanced. Stalls not required
    assign cpuif_req_stall_rd = '0;
    assign cpuif_req_stall_wr = '0;
    assign cpuif_req_masked = cpuif_req
                            & !(!cpuif_req_is_wr & cpuif_req_stall_rd)
                            & !(cpuif_req_is_wr & cpuif_req_stall_wr);

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    typedef struct packed{
        logic STATUS;
        logic CONFIG;
        logic DATA;
        logic WRITE_PTR;
        logic READ_PTR;
    } decoded_reg_strb_t;
    decoded_reg_strb_t decoded_reg_strb;
    logic decoded_req;
    logic decoded_req_is_wr;
    logic [31:0] decoded_wr_data;
    logic [31:0] decoded_wr_biten;

    always_comb begin
        decoded_reg_strb.STATUS = cpuif_req_masked & (cpuif_addr == 5'h0);
        decoded_reg_strb.CONFIG = cpuif_req_masked & (cpuif_addr == 5'h4);
        decoded_reg_strb.DATA = cpuif_req_masked & (cpuif_addr == 5'h8);
        decoded_reg_strb.WRITE_PTR = cpuif_req_masked & (cpuif_addr == 5'hc);
        decoded_reg_strb.READ_PTR = cpuif_req_masked & (cpuif_addr == 5'h10);
    end

    // Pass down signals to next stage
    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;
    assign decoded_wr_biten = cpuif_wr_biten;

    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    typedef struct packed{
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } wrapped;
            struct packed{
                logic next;
                logic load_next;
            } valid_data;
        } STATUS;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } trace_buffer_depth;
        } CONFIG;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } data;
        } DATA;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } ptr;
        } WRITE_PTR;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } ptr;
        } READ_PTR;
    } field_combo_t;
    field_combo_t field_combo;

    typedef struct packed{
        struct packed{
            struct packed{
                logic value;
            } wrapped;
            struct packed{
                logic value;
            } valid_data;
        } STATUS;
        struct packed{
            struct packed{
                logic [31:0] value;
            } trace_buffer_depth;
        } CONFIG;
        struct packed{
            struct packed{
                logic [31:0] value;
            } data;
        } DATA;
        struct packed{
            struct packed{
                logic [31:0] value;
            } ptr;
        } WRITE_PTR;
        struct packed{
            struct packed{
                logic [31:0] value;
            } ptr;
        } READ_PTR;
    } field_storage_t;
    field_storage_t field_storage;

    // Field: trace_buffer_csr.STATUS.wrapped
    always_comb begin
        automatic logic [0:0] next_c = field_storage.STATUS.wrapped.value;
        automatic logic load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.STATUS.wrapped.next;
        load_next_c = '1;
        field_combo.STATUS.wrapped.next = next_c;
        field_combo.STATUS.wrapped.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_b) begin
        if(~hwif_in.rst_b) begin
            field_storage.STATUS.wrapped.value <= 1'h0;
        end else if(field_combo.STATUS.wrapped.load_next) begin
            field_storage.STATUS.wrapped.value <= field_combo.STATUS.wrapped.next;
        end
    end
    assign hwif_out.STATUS.wrapped.value = field_storage.STATUS.wrapped.value;
    // Field: trace_buffer_csr.STATUS.valid_data
    always_comb begin
        automatic logic [0:0] next_c = field_storage.STATUS.valid_data.value;
        automatic logic load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.STATUS.valid_data.next;
        load_next_c = '1;
        field_combo.STATUS.valid_data.next = next_c;
        field_combo.STATUS.valid_data.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_b) begin
        if(~hwif_in.rst_b) begin
            field_storage.STATUS.valid_data.value <= 1'h0;
        end else if(field_combo.STATUS.valid_data.load_next) begin
            field_storage.STATUS.valid_data.value <= field_combo.STATUS.valid_data.next;
        end
    end
    assign hwif_out.STATUS.valid_data.value = field_storage.STATUS.valid_data.value;
    // Field: trace_buffer_csr.CONFIG.trace_buffer_depth
    always_comb begin
        automatic logic [31:0] next_c = field_storage.CONFIG.trace_buffer_depth.value;
        automatic logic load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.CONFIG.trace_buffer_depth.next;
        load_next_c = '1;
        field_combo.CONFIG.trace_buffer_depth.next = next_c;
        field_combo.CONFIG.trace_buffer_depth.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_b) begin
        if(~hwif_in.rst_b) begin
            field_storage.CONFIG.trace_buffer_depth.value <= 32'h0;
        end else if(field_combo.CONFIG.trace_buffer_depth.load_next) begin
            field_storage.CONFIG.trace_buffer_depth.value <= field_combo.CONFIG.trace_buffer_depth.next;
        end
    end
    assign hwif_out.CONFIG.trace_buffer_depth.value = field_storage.CONFIG.trace_buffer_depth.value;
    // Field: trace_buffer_csr.DATA.data
    always_comb begin
        automatic logic [31:0] next_c = field_storage.DATA.data.value;
        automatic logic load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.DATA.data.next;
        load_next_c = '1;
        field_combo.DATA.data.next = next_c;
        field_combo.DATA.data.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_b) begin
        if(~hwif_in.rst_b) begin
            field_storage.DATA.data.value <= 32'h0;
        end else if(field_combo.DATA.data.load_next) begin
            field_storage.DATA.data.value <= field_combo.DATA.data.next;
        end
    end
    assign hwif_out.DATA.data.value = field_storage.DATA.data.value;
    // Field: trace_buffer_csr.WRITE_PTR.ptr
    always_comb begin
        automatic logic [31:0] next_c = field_storage.WRITE_PTR.ptr.value;
        automatic logic load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.WRITE_PTR.ptr.next;
        load_next_c = '1;
        field_combo.WRITE_PTR.ptr.next = next_c;
        field_combo.WRITE_PTR.ptr.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_b) begin
        if(~hwif_in.rst_b) begin
            field_storage.WRITE_PTR.ptr.value <= 32'h0;
        end else if(field_combo.WRITE_PTR.ptr.load_next) begin
            field_storage.WRITE_PTR.ptr.value <= field_combo.WRITE_PTR.ptr.next;
        end
    end
    assign hwif_out.WRITE_PTR.ptr.value = field_storage.WRITE_PTR.ptr.value;
    // Field: trace_buffer_csr.READ_PTR.ptr
    always_comb begin
        automatic logic [31:0] next_c = field_storage.READ_PTR.ptr.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.READ_PTR && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.READ_PTR.ptr.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.READ_PTR.ptr.we) begin // HW Write - we
            next_c = hwif_in.READ_PTR.ptr.next;
            load_next_c = '1;
        end
        field_combo.READ_PTR.ptr.next = next_c;
        field_combo.READ_PTR.ptr.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_b) begin
        if(~hwif_in.rst_b) begin
            field_storage.READ_PTR.ptr.value <= 32'h0;
        end else if(field_combo.READ_PTR.ptr.load_next) begin
            field_storage.READ_PTR.ptr.value <= field_combo.READ_PTR.ptr.next;
        end
    end
    assign hwif_out.READ_PTR.ptr.value = field_storage.READ_PTR.ptr.value;

    //--------------------------------------------------------------------------
    // Write response
    //--------------------------------------------------------------------------
    assign cpuif_wr_ack = decoded_req & decoded_req_is_wr;
    // Writes are always granted with no error response
    assign cpuif_wr_err = '0;

    //--------------------------------------------------------------------------
    // Readback
    //--------------------------------------------------------------------------

    logic readback_err;
    logic readback_done;
    logic [31:0] readback_data;
    
    // Assign readback values to a flattened array
    logic [5-1:0][31:0] readback_array;
    assign readback_array[0][0:0] = (decoded_reg_strb.STATUS && !decoded_req_is_wr) ? field_storage.STATUS.wrapped.value : '0;
    assign readback_array[0][1:1] = (decoded_reg_strb.STATUS && !decoded_req_is_wr) ? field_storage.STATUS.valid_data.value : '0;
    assign readback_array[0][31:2] = '0;
    assign readback_array[1][31:0] = (decoded_reg_strb.CONFIG && !decoded_req_is_wr) ? field_storage.CONFIG.trace_buffer_depth.value : '0;
    assign readback_array[2][31:0] = (decoded_reg_strb.DATA && !decoded_req_is_wr) ? field_storage.DATA.data.value : '0;
    assign readback_array[3][31:0] = (decoded_reg_strb.WRITE_PTR && !decoded_req_is_wr) ? field_storage.WRITE_PTR.ptr.value : '0;
    assign readback_array[4][31:0] = (decoded_reg_strb.READ_PTR && !decoded_req_is_wr) ? field_storage.READ_PTR.ptr.value : '0;

    // Reduce the array
    always_comb begin
        automatic logic [31:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<5; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end

    assign cpuif_rd_ack = readback_done;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;

`CALIPTRA_ASSERT_KNOWN(ERR_HWIF_IN, hwif_in, clk, !hwif_in.rst_b)

endmodule