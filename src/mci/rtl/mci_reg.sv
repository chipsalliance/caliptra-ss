// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module mci_reg (
        input wire clk,
        input wire rst,

        input wire s_cpuif_req,
        input wire s_cpuif_req_is_wr,
        input wire [12:0] s_cpuif_addr,
        input wire [31:0] s_cpuif_wr_data,
        input wire [31:0] s_cpuif_wr_biten,
        output wire s_cpuif_req_stall_wr,
        output wire s_cpuif_req_stall_rd,
        output wire s_cpuif_rd_ack,
        output wire s_cpuif_rd_err,
        output wire [31:0] s_cpuif_rd_data,
        output wire s_cpuif_wr_ack,
        output wire s_cpuif_wr_err,

        input mci_reg_pkg::mci_reg__in_t hwif_in,
        output mci_reg_pkg::mci_reg__out_t hwif_out
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [12:0] cpuif_addr;
    logic [31:0] cpuif_wr_data;
    logic [31:0] cpuif_wr_biten;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [31:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;

    assign cpuif_req = s_cpuif_req;
    assign cpuif_req_is_wr = s_cpuif_req_is_wr;
    assign cpuif_addr = s_cpuif_addr;
    assign cpuif_wr_data = s_cpuif_wr_data;
    assign cpuif_wr_biten = s_cpuif_wr_biten;
    assign s_cpuif_req_stall_wr = cpuif_req_stall_wr;
    assign s_cpuif_req_stall_rd = cpuif_req_stall_rd;
    assign s_cpuif_rd_ack = cpuif_rd_ack;
    assign s_cpuif_rd_err = cpuif_rd_err;
    assign s_cpuif_rd_data = cpuif_rd_data;
    assign s_cpuif_wr_ack = cpuif_wr_ack;
    assign s_cpuif_wr_err = cpuif_wr_err;

    logic cpuif_req_masked;

    // Read & write latencies are balanced. Stalls not required
    assign cpuif_req_stall_rd = '0;
    assign cpuif_req_stall_wr = '0;
    assign cpuif_req_masked = cpuif_req
                            & !(!cpuif_req_is_wr & cpuif_req_stall_rd)
                            & !(cpuif_req_is_wr & cpuif_req_stall_wr);

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    typedef struct packed{
        logic CAPABILITIES;
        logic HW_REV_ID;
        logic [2-1:0]FW_REV_ID;
        logic HW_CONFIG;
        logic BOOT_STATUS;
        logic FLOW_STATUS;
        logic RESET_REASON;
        logic HW_ERROR_FATAL;
        logic HW_ERROR_NON_FATAL;
        logic FW_ERROR_FATAL;
        logic FW_ERROR_NON_FATAL;
        logic HW_ERROR_ENC;
        logic FW_ERROR_ENC;
        logic [8-1:0]FW_EXTENDED_ERROR_INFO;
        logic WDT_TIMER1_EN;
        logic WDT_TIMER1_CTRL;
        logic [2-1:0]WDT_TIMER1_TIMEOUT_PERIOD;
        logic WDT_TIMER2_EN;
        logic WDT_TIMER2_CTRL;
        logic [2-1:0]WDT_TIMER2_TIMEOUT_PERIOD;
        logic WDT_STATUS;
        logic [2-1:0]WDT_CFG;
        logic MCU_TIMER_CONFIG;
        logic MCU_CLK_GATING_EN;
        logic MCU_RV_MTIME_L;
        logic MCU_RV_MTIME_H;
        logic MCU_RV_MTIMECMP_L;
        logic MCU_RV_MTIMECMP_H;
        logic RESET_REQUEST;
        logic RESET_ACK;
        logic CALIPTRA_BOOT_GO;
        logic CALIPTRA_AXI_ID;
        logic FW_SRAM_EXEC_REGION_SIZE;
        logic RUNTIME_LOCK;
        logic [5-1:0]MBOX0_VALID_AXI_ID;
        logic [5-1:0]MBOX0_VALID_AXI_ID_LOCK;
        logic [5-1:0]MBOX1_VALID_AXI_ID;
        logic [5-1:0]MBOX1_VALID_AXI_ID_LOCK;
        logic [2-1:0]GENERIC_INPUT_WIRES;
        logic [2-1:0]GENERIC_OUTPUT_WIRES;
        logic DEBUG_IN;
        logic DEBUG_OUT;
        logic FUSE_WR_DONE;
        logic [8-1:0][12-1:0]PROD_DEBUG_UNLOCK_PK_HASH_REG;
        logic [10-1:0]STICKY_DATA_VAULT_CTRL;
        logic [10-1:0][12-1:0]STICKY_DATA_VAULT_ENTRY;
        logic [10-1:0]DATA_VAULT_CTRL;
        logic [10-1:0][12-1:0]DATA_VAULT_ENTRY;
        logic [8-1:0]STICKY_LOCKABLE_SCRATCH_REG_CTRL;
        logic [8-1:0]STICKY_LOCKABLE_SCRATCH_REG;
        logic [10-1:0]LOCKABLE_SCRATCH_REG_CTRL;
        logic [10-1:0]LOCKABLE_SCRATCH_REG;
        logic [8-1:0]NON_STICKY_GENERIC_SCRATCH_REG;
        struct packed{
            logic global_intr_en_r;
            logic error_intr_en_r;
            logic notif_intr_en_r;
            logic error_global_intr_r;
            logic notif_global_intr_r;
            logic error_internal_intr_r;
            logic notif_internal_intr_r;
            logic error_intr_trig_r;
            logic notif_intr_trig_r;
            logic error_wdt_timer1_timeout_intr_count_r;
            logic error_wdt_timer2_timeout_intr_count_r;
            logic notif_mcu_sram_ecc_cor_intr_count_r;
            logic error_wdt_timer1_timeout_intr_count_incr_r;
            logic error_wdt_timer2_timeout_intr_count_incr_r;
            logic notif_mcu_sram_ecc_cor_intr_count_incr_r;
        } intr_block_rf;
    } decoded_reg_strb_t;
    decoded_reg_strb_t decoded_reg_strb;
    logic decoded_req;
    logic decoded_req_is_wr;
    logic [31:0] decoded_wr_data;
    logic [31:0] decoded_wr_biten;

    always_comb begin
        decoded_reg_strb.CAPABILITIES = cpuif_req_masked & (cpuif_addr == 13'h0);
        decoded_reg_strb.HW_REV_ID = cpuif_req_masked & (cpuif_addr == 13'h4);
        for(int i0=0; i0<2; i0++) begin
            decoded_reg_strb.FW_REV_ID[i0] = cpuif_req_masked & (cpuif_addr == 13'h8 + i0*13'h4);
        end
        decoded_reg_strb.HW_CONFIG = cpuif_req_masked & (cpuif_addr == 13'h10);
        decoded_reg_strb.BOOT_STATUS = cpuif_req_masked & (cpuif_addr == 13'h20);
        decoded_reg_strb.FLOW_STATUS = cpuif_req_masked & (cpuif_addr == 13'h24);
        decoded_reg_strb.RESET_REASON = cpuif_req_masked & (cpuif_addr == 13'h28);
        decoded_reg_strb.HW_ERROR_FATAL = cpuif_req_masked & (cpuif_addr == 13'h40);
        decoded_reg_strb.HW_ERROR_NON_FATAL = cpuif_req_masked & (cpuif_addr == 13'h44);
        decoded_reg_strb.FW_ERROR_FATAL = cpuif_req_masked & (cpuif_addr == 13'h48);
        decoded_reg_strb.FW_ERROR_NON_FATAL = cpuif_req_masked & (cpuif_addr == 13'h4c);
        decoded_reg_strb.HW_ERROR_ENC = cpuif_req_masked & (cpuif_addr == 13'h50);
        decoded_reg_strb.FW_ERROR_ENC = cpuif_req_masked & (cpuif_addr == 13'h54);
        for(int i0=0; i0<8; i0++) begin
            decoded_reg_strb.FW_EXTENDED_ERROR_INFO[i0] = cpuif_req_masked & (cpuif_addr == 13'h58 + i0*13'h4);
        end
        decoded_reg_strb.WDT_TIMER1_EN = cpuif_req_masked & (cpuif_addr == 13'h80);
        decoded_reg_strb.WDT_TIMER1_CTRL = cpuif_req_masked & (cpuif_addr == 13'h84);
        for(int i0=0; i0<2; i0++) begin
            decoded_reg_strb.WDT_TIMER1_TIMEOUT_PERIOD[i0] = cpuif_req_masked & (cpuif_addr == 13'h88 + i0*13'h4);
        end
        decoded_reg_strb.WDT_TIMER2_EN = cpuif_req_masked & (cpuif_addr == 13'h90);
        decoded_reg_strb.WDT_TIMER2_CTRL = cpuif_req_masked & (cpuif_addr == 13'h94);
        for(int i0=0; i0<2; i0++) begin
            decoded_reg_strb.WDT_TIMER2_TIMEOUT_PERIOD[i0] = cpuif_req_masked & (cpuif_addr == 13'h98 + i0*13'h4);
        end
        decoded_reg_strb.WDT_STATUS = cpuif_req_masked & (cpuif_addr == 13'ha0);
        for(int i0=0; i0<2; i0++) begin
            decoded_reg_strb.WDT_CFG[i0] = cpuif_req_masked & (cpuif_addr == 13'hb0 + i0*13'h4);
        end
        decoded_reg_strb.MCU_TIMER_CONFIG = cpuif_req_masked & (cpuif_addr == 13'hc0);
        decoded_reg_strb.MCU_CLK_GATING_EN = cpuif_req_masked & (cpuif_addr == 13'hc4);
        decoded_reg_strb.MCU_RV_MTIME_L = cpuif_req_masked & (cpuif_addr == 13'hc8);
        decoded_reg_strb.MCU_RV_MTIME_H = cpuif_req_masked & (cpuif_addr == 13'hcc);
        decoded_reg_strb.MCU_RV_MTIMECMP_L = cpuif_req_masked & (cpuif_addr == 13'hd0);
        decoded_reg_strb.MCU_RV_MTIMECMP_H = cpuif_req_masked & (cpuif_addr == 13'hd4);
        decoded_reg_strb.RESET_REQUEST = cpuif_req_masked & (cpuif_addr == 13'h100);
        decoded_reg_strb.RESET_ACK = cpuif_req_masked & (cpuif_addr == 13'h104);
        decoded_reg_strb.CALIPTRA_BOOT_GO = cpuif_req_masked & (cpuif_addr == 13'h108);
        decoded_reg_strb.CALIPTRA_AXI_ID = cpuif_req_masked & (cpuif_addr == 13'h10c);
        decoded_reg_strb.FW_SRAM_EXEC_REGION_SIZE = cpuif_req_masked & (cpuif_addr == 13'h110);
        decoded_reg_strb.RUNTIME_LOCK = cpuif_req_masked & (cpuif_addr == 13'h114);
        for(int i0=0; i0<5; i0++) begin
            decoded_reg_strb.MBOX0_VALID_AXI_ID[i0] = cpuif_req_masked & (cpuif_addr == 13'h180 + i0*13'h4);
        end
        for(int i0=0; i0<5; i0++) begin
            decoded_reg_strb.MBOX0_VALID_AXI_ID_LOCK[i0] = cpuif_req_masked & (cpuif_addr == 13'h1a0 + i0*13'h4);
        end
        for(int i0=0; i0<5; i0++) begin
            decoded_reg_strb.MBOX1_VALID_AXI_ID[i0] = cpuif_req_masked & (cpuif_addr == 13'h1c0 + i0*13'h4);
        end
        for(int i0=0; i0<5; i0++) begin
            decoded_reg_strb.MBOX1_VALID_AXI_ID_LOCK[i0] = cpuif_req_masked & (cpuif_addr == 13'h1e0 + i0*13'h4);
        end
        for(int i0=0; i0<2; i0++) begin
            decoded_reg_strb.GENERIC_INPUT_WIRES[i0] = cpuif_req_masked & (cpuif_addr == 13'h400 + i0*13'h4);
        end
        for(int i0=0; i0<2; i0++) begin
            decoded_reg_strb.GENERIC_OUTPUT_WIRES[i0] = cpuif_req_masked & (cpuif_addr == 13'h408 + i0*13'h4);
        end
        decoded_reg_strb.DEBUG_IN = cpuif_req_masked & (cpuif_addr == 13'h410);
        decoded_reg_strb.DEBUG_OUT = cpuif_req_masked & (cpuif_addr == 13'h414);
        decoded_reg_strb.FUSE_WR_DONE = cpuif_req_masked & (cpuif_addr == 13'h440);
        for(int i0=0; i0<8; i0++) begin
            for(int i1=0; i1<12; i1++) begin
                decoded_reg_strb.PROD_DEBUG_UNLOCK_PK_HASH_REG[i0][i1] = cpuif_req_masked & (cpuif_addr == 13'h480 + i0*13'h30 + i1*13'h4);
            end
        end
        for(int i0=0; i0<10; i0++) begin
            decoded_reg_strb.STICKY_DATA_VAULT_CTRL[i0] = cpuif_req_masked & (cpuif_addr == 13'h800 + i0*13'h4);
        end
        for(int i0=0; i0<10; i0++) begin
            for(int i1=0; i1<12; i1++) begin
                decoded_reg_strb.STICKY_DATA_VAULT_ENTRY[i0][i1] = cpuif_req_masked & (cpuif_addr == 13'h828 + i0*13'h30 + i1*13'h4);
            end
        end
        for(int i0=0; i0<10; i0++) begin
            decoded_reg_strb.DATA_VAULT_CTRL[i0] = cpuif_req_masked & (cpuif_addr == 13'ha08 + i0*13'h4);
        end
        for(int i0=0; i0<10; i0++) begin
            for(int i1=0; i1<12; i1++) begin
                decoded_reg_strb.DATA_VAULT_ENTRY[i0][i1] = cpuif_req_masked & (cpuif_addr == 13'ha30 + i0*13'h30 + i1*13'h4);
            end
        end
        for(int i0=0; i0<8; i0++) begin
            decoded_reg_strb.STICKY_LOCKABLE_SCRATCH_REG_CTRL[i0] = cpuif_req_masked & (cpuif_addr == 13'hc10 + i0*13'h4);
        end
        for(int i0=0; i0<8; i0++) begin
            decoded_reg_strb.STICKY_LOCKABLE_SCRATCH_REG[i0] = cpuif_req_masked & (cpuif_addr == 13'hc30 + i0*13'h4);
        end
        for(int i0=0; i0<10; i0++) begin
            decoded_reg_strb.LOCKABLE_SCRATCH_REG_CTRL[i0] = cpuif_req_masked & (cpuif_addr == 13'hc50 + i0*13'h4);
        end
        for(int i0=0; i0<10; i0++) begin
            decoded_reg_strb.LOCKABLE_SCRATCH_REG[i0] = cpuif_req_masked & (cpuif_addr == 13'hc78 + i0*13'h4);
        end
        for(int i0=0; i0<8; i0++) begin
            decoded_reg_strb.NON_STICKY_GENERIC_SCRATCH_REG[i0] = cpuif_req_masked & (cpuif_addr == 13'hca0 + i0*13'h4);
        end
        decoded_reg_strb.intr_block_rf.global_intr_en_r = cpuif_req_masked & (cpuif_addr == 13'h1000);
        decoded_reg_strb.intr_block_rf.error_intr_en_r = cpuif_req_masked & (cpuif_addr == 13'h1004);
        decoded_reg_strb.intr_block_rf.notif_intr_en_r = cpuif_req_masked & (cpuif_addr == 13'h1008);
        decoded_reg_strb.intr_block_rf.error_global_intr_r = cpuif_req_masked & (cpuif_addr == 13'h100c);
        decoded_reg_strb.intr_block_rf.notif_global_intr_r = cpuif_req_masked & (cpuif_addr == 13'h1010);
        decoded_reg_strb.intr_block_rf.error_internal_intr_r = cpuif_req_masked & (cpuif_addr == 13'h1014);
        decoded_reg_strb.intr_block_rf.notif_internal_intr_r = cpuif_req_masked & (cpuif_addr == 13'h1018);
        decoded_reg_strb.intr_block_rf.error_intr_trig_r = cpuif_req_masked & (cpuif_addr == 13'h101c);
        decoded_reg_strb.intr_block_rf.notif_intr_trig_r = cpuif_req_masked & (cpuif_addr == 13'h1020);
        decoded_reg_strb.intr_block_rf.error_wdt_timer1_timeout_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1100);
        decoded_reg_strb.intr_block_rf.error_wdt_timer2_timeout_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1104);
        decoded_reg_strb.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1180);
        decoded_reg_strb.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h1200);
        decoded_reg_strb.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h1204);
        decoded_reg_strb.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h1208);
    end

    // Pass down signals to next stage
    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;
    assign decoded_wr_biten = cpuif_wr_biten;

    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    typedef struct packed{
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } REV_ID;
        } [2-1:0]FW_REV_ID;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } status;
        } BOOT_STATUS;
        struct packed{
            struct packed{
                logic [23:0] next;
                logic load_next;
            } status;
        } FLOW_STATUS;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } FW_UPD_RESET;
            struct packed{
                logic next;
                logic load_next;
            } WARM_RESET;
        } RESET_REASON;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } mcu_sram_ecc_unc;
            struct packed{
                logic next;
                logic load_next;
            } nmi_pin;
        } HW_ERROR_FATAL;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } RSVD;
        } HW_ERROR_NON_FATAL;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } error_code;
        } FW_ERROR_FATAL;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } error_code;
        } FW_ERROR_NON_FATAL;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } error_code;
        } HW_ERROR_ENC;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } error_code;
        } FW_ERROR_ENC;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } error_info;
        } [8-1:0]FW_EXTENDED_ERROR_INFO;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } timer1_en;
        } WDT_TIMER1_EN;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } timer1_restart;
        } WDT_TIMER1_CTRL;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } timer1_timeout_period;
        } [2-1:0]WDT_TIMER1_TIMEOUT_PERIOD;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } timer2_en;
        } WDT_TIMER2_EN;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } timer2_restart;
        } WDT_TIMER2_CTRL;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } timer2_timeout_period;
        } [2-1:0]WDT_TIMER2_TIMEOUT_PERIOD;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } t1_timeout;
            struct packed{
                logic next;
                logic load_next;
            } t2_timeout;
        } WDT_STATUS;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } TIMEOUT;
        } [2-1:0]WDT_CFG;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } clk_period;
        } MCU_TIMER_CONFIG;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } FIXME;
        } MCU_CLK_GATING_EN;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
                logic incrthreshold;
                logic overflow;
            } count_l;
        } MCU_RV_MTIME_L;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
                logic incrthreshold;
                logic overflow;
            } count_h;
        } MCU_RV_MTIME_H;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } compare_l;
        } MCU_RV_MTIMECMP_L;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } compare_h;
        } MCU_RV_MTIMECMP_H;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } req;
            struct packed{
                logic next;
                logic load_next;
            } clr;
        } RESET_REQUEST;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } ack;
        } RESET_ACK;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } go;
        } CALIPTRA_BOOT_GO;
        struct packed{
            struct packed{
                logic [15:0] next;
                logic load_next;
            } size;
        } FW_SRAM_EXEC_REGION_SIZE;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } lock;
        } RUNTIME_LOCK;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } id;
        } [5-1:0]MBOX0_VALID_AXI_ID;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } lock;
        } [5-1:0]MBOX0_VALID_AXI_ID_LOCK;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } id;
        } [5-1:0]MBOX1_VALID_AXI_ID;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } lock;
        } [5-1:0]MBOX1_VALID_AXI_ID_LOCK;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } wires;
        } [2-1:0]GENERIC_OUTPUT_WIRES;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } FIXME;
        } DEBUG_IN;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } FIXME;
        } DEBUG_OUT;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } done;
        } FUSE_WR_DONE;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } hash;
        } [8-1:0][12-1:0]PROD_DEBUG_UNLOCK_PK_HASH_REG;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } lock_entry;
        } [10-1:0]STICKY_DATA_VAULT_CTRL;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } lock_entry;
        } [10-1:0][12-1:0]STICKY_DATA_VAULT_ENTRY;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } lock_entry;
        } [10-1:0]DATA_VAULT_CTRL;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } lock_entry;
        } [10-1:0][12-1:0]DATA_VAULT_ENTRY;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } lock_entry;
        } [8-1:0]STICKY_LOCKABLE_SCRATCH_REG_CTRL;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } data;
        } [8-1:0]STICKY_LOCKABLE_SCRATCH_REG;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } lock_entry;
        } [10-1:0]LOCKABLE_SCRATCH_REG_CTRL;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } data;
        } [10-1:0]LOCKABLE_SCRATCH_REG;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } data;
        } [8-1:0]NON_STICKY_GENERIC_SCRATCH_REG;
        struct packed{
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } error_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_en;
            } global_intr_en_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } error_wdt_timer1_timeout_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_wdt_timer2_timeout_en;
            } error_intr_en_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } notif_mcu_sram_ecc_cor_en;
            } notif_intr_en_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } agg_sts;
            } error_global_intr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } agg_sts;
            } notif_global_intr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } error_wdt_timer1_timeout_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_wdt_timer2_timeout_sts;
            } error_internal_intr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } notif_mcu_sram_ecc_cor_sts;
            } notif_internal_intr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } error_wdt_timer1_timeout_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_wdt_timer2_timeout_trig;
            } error_intr_trig_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } notif_mcu_sram_ecc_cor_trig;
            } notif_intr_trig_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_wdt_timer1_timeout_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_wdt_timer2_timeout_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_mcu_sram_ecc_cor_intr_count_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_wdt_timer1_timeout_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_wdt_timer2_timeout_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_mcu_sram_ecc_cor_intr_count_incr_r;
        } intr_block_rf;
    } field_combo_t;
    field_combo_t field_combo;

    typedef struct packed{
        struct packed{
            struct packed{
                logic [31:0] value;
            } REV_ID;
        } [2-1:0]FW_REV_ID;
        struct packed{
            struct packed{
                logic [31:0] value;
            } status;
        } BOOT_STATUS;
        struct packed{
            struct packed{
                logic [23:0] value;
            } status;
        } FLOW_STATUS;
        struct packed{
            struct packed{
                logic value;
            } FW_UPD_RESET;
            struct packed{
                logic value;
            } WARM_RESET;
        } RESET_REASON;
        struct packed{
            struct packed{
                logic value;
            } mcu_sram_ecc_unc;
            struct packed{
                logic value;
            } nmi_pin;
        } HW_ERROR_FATAL;
        struct packed{
            struct packed{
                logic value;
            } RSVD;
        } HW_ERROR_NON_FATAL;
        struct packed{
            struct packed{
                logic [31:0] value;
            } error_code;
        } FW_ERROR_FATAL;
        struct packed{
            struct packed{
                logic [31:0] value;
            } error_code;
        } FW_ERROR_NON_FATAL;
        struct packed{
            struct packed{
                logic [31:0] value;
            } error_code;
        } HW_ERROR_ENC;
        struct packed{
            struct packed{
                logic [31:0] value;
            } error_code;
        } FW_ERROR_ENC;
        struct packed{
            struct packed{
                logic [31:0] value;
            } error_info;
        } [8-1:0]FW_EXTENDED_ERROR_INFO;
        struct packed{
            struct packed{
                logic value;
            } timer1_en;
        } WDT_TIMER1_EN;
        struct packed{
            struct packed{
                logic value;
            } timer1_restart;
        } WDT_TIMER1_CTRL;
        struct packed{
            struct packed{
                logic [31:0] value;
            } timer1_timeout_period;
        } [2-1:0]WDT_TIMER1_TIMEOUT_PERIOD;
        struct packed{
            struct packed{
                logic value;
            } timer2_en;
        } WDT_TIMER2_EN;
        struct packed{
            struct packed{
                logic value;
            } timer2_restart;
        } WDT_TIMER2_CTRL;
        struct packed{
            struct packed{
                logic [31:0] value;
            } timer2_timeout_period;
        } [2-1:0]WDT_TIMER2_TIMEOUT_PERIOD;
        struct packed{
            struct packed{
                logic value;
            } t1_timeout;
            struct packed{
                logic value;
            } t2_timeout;
        } WDT_STATUS;
        struct packed{
            struct packed{
                logic [31:0] value;
            } TIMEOUT;
        } [2-1:0]WDT_CFG;
        struct packed{
            struct packed{
                logic [31:0] value;
            } clk_period;
        } MCU_TIMER_CONFIG;
        struct packed{
            struct packed{
                logic value;
            } FIXME;
        } MCU_CLK_GATING_EN;
        struct packed{
            struct packed{
                logic [31:0] value;
            } count_l;
        } MCU_RV_MTIME_L;
        struct packed{
            struct packed{
                logic [31:0] value;
            } count_h;
        } MCU_RV_MTIME_H;
        struct packed{
            struct packed{
                logic [31:0] value;
            } compare_l;
        } MCU_RV_MTIMECMP_L;
        struct packed{
            struct packed{
                logic [31:0] value;
            } compare_h;
        } MCU_RV_MTIMECMP_H;
        struct packed{
            struct packed{
                logic value;
            } req;
            struct packed{
                logic value;
            } clr;
        } RESET_REQUEST;
        struct packed{
            struct packed{
                logic value;
            } ack;
        } RESET_ACK;
        struct packed{
            struct packed{
                logic value;
            } go;
        } CALIPTRA_BOOT_GO;
        struct packed{
            struct packed{
                logic [15:0] value;
            } size;
        } FW_SRAM_EXEC_REGION_SIZE;
        struct packed{
            struct packed{
                logic value;
            } lock;
        } RUNTIME_LOCK;
        struct packed{
            struct packed{
                logic [31:0] value;
            } id;
        } [5-1:0]MBOX0_VALID_AXI_ID;
        struct packed{
            struct packed{
                logic value;
            } lock;
        } [5-1:0]MBOX0_VALID_AXI_ID_LOCK;
        struct packed{
            struct packed{
                logic [31:0] value;
            } id;
        } [5-1:0]MBOX1_VALID_AXI_ID;
        struct packed{
            struct packed{
                logic value;
            } lock;
        } [5-1:0]MBOX1_VALID_AXI_ID_LOCK;
        struct packed{
            struct packed{
                logic [31:0] value;
            } wires;
        } [2-1:0]GENERIC_OUTPUT_WIRES;
        struct packed{
            struct packed{
                logic value;
            } FIXME;
        } DEBUG_IN;
        struct packed{
            struct packed{
                logic value;
            } FIXME;
        } DEBUG_OUT;
        struct packed{
            struct packed{
                logic value;
            } done;
        } FUSE_WR_DONE;
        struct packed{
            struct packed{
                logic [31:0] value;
            } hash;
        } [8-1:0][12-1:0]PROD_DEBUG_UNLOCK_PK_HASH_REG;
        struct packed{
            struct packed{
                logic value;
            } lock_entry;
        } [10-1:0]STICKY_DATA_VAULT_CTRL;
        struct packed{
            struct packed{
                logic value;
            } lock_entry;
        } [10-1:0][12-1:0]STICKY_DATA_VAULT_ENTRY;
        struct packed{
            struct packed{
                logic value;
            } lock_entry;
        } [10-1:0]DATA_VAULT_CTRL;
        struct packed{
            struct packed{
                logic value;
            } lock_entry;
        } [10-1:0][12-1:0]DATA_VAULT_ENTRY;
        struct packed{
            struct packed{
                logic value;
            } lock_entry;
        } [8-1:0]STICKY_LOCKABLE_SCRATCH_REG_CTRL;
        struct packed{
            struct packed{
                logic [31:0] value;
            } data;
        } [8-1:0]STICKY_LOCKABLE_SCRATCH_REG;
        struct packed{
            struct packed{
                logic value;
            } lock_entry;
        } [10-1:0]LOCKABLE_SCRATCH_REG_CTRL;
        struct packed{
            struct packed{
                logic [31:0] value;
            } data;
        } [10-1:0]LOCKABLE_SCRATCH_REG;
        struct packed{
            struct packed{
                logic [31:0] value;
            } data;
        } [8-1:0]NON_STICKY_GENERIC_SCRATCH_REG;
        struct packed{
            struct packed{
                struct packed{
                    logic value;
                } error_en;
                struct packed{
                    logic value;
                } notif_en;
            } global_intr_en_r;
            struct packed{
                struct packed{
                    logic value;
                } error_wdt_timer1_timeout_en;
                struct packed{
                    logic value;
                } error_wdt_timer2_timeout_en;
            } error_intr_en_r;
            struct packed{
                struct packed{
                    logic value;
                } notif_mcu_sram_ecc_cor_en;
            } notif_intr_en_r;
            struct packed{
                struct packed{
                    logic value;
                } agg_sts;
            } error_global_intr_r;
            struct packed{
                struct packed{
                    logic value;
                } agg_sts;
            } notif_global_intr_r;
            struct packed{
                struct packed{
                    logic value;
                } error_wdt_timer1_timeout_sts;
                struct packed{
                    logic value;
                } error_wdt_timer2_timeout_sts;
            } error_internal_intr_r;
            struct packed{
                struct packed{
                    logic value;
                } notif_mcu_sram_ecc_cor_sts;
            } notif_internal_intr_r;
            struct packed{
                struct packed{
                    logic value;
                } error_wdt_timer1_timeout_trig;
                struct packed{
                    logic value;
                } error_wdt_timer2_timeout_trig;
            } error_intr_trig_r;
            struct packed{
                struct packed{
                    logic value;
                } notif_mcu_sram_ecc_cor_trig;
            } notif_intr_trig_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_wdt_timer1_timeout_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_wdt_timer2_timeout_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_mcu_sram_ecc_cor_intr_count_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_wdt_timer1_timeout_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_wdt_timer2_timeout_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_mcu_sram_ecc_cor_intr_count_incr_r;
        } intr_block_rf;
    } field_storage_t;
    field_storage_t field_storage;

    for(genvar i0=0; i0<2; i0++) begin
        // Field: mci_reg.FW_REV_ID[].REV_ID
        always_comb begin
            automatic logic [31:0] next_c = field_storage.FW_REV_ID[i0].REV_ID.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.FW_REV_ID[i0] && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
                next_c = (field_storage.FW_REV_ID[i0].REV_ID.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo.FW_REV_ID[i0].REV_ID.next = next_c;
            field_combo.FW_REV_ID[i0].REV_ID.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
            if(~hwif_in.mci_rst_b) begin
                field_storage.FW_REV_ID[i0].REV_ID.value <= 32'h0;
            end else if(field_combo.FW_REV_ID[i0].REV_ID.load_next) begin
                field_storage.FW_REV_ID[i0].REV_ID.value <= field_combo.FW_REV_ID[i0].REV_ID.next;
            end
        end
    end
    // Field: mci_reg.BOOT_STATUS.status
    always_comb begin
        automatic logic [31:0] next_c = field_storage.BOOT_STATUS.status.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.BOOT_STATUS && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.BOOT_STATUS.status.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.BOOT_STATUS.status.next = next_c;
        field_combo.BOOT_STATUS.status.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.BOOT_STATUS.status.value <= 32'h0;
        end else if(field_combo.BOOT_STATUS.status.load_next) begin
            field_storage.BOOT_STATUS.status.value <= field_combo.BOOT_STATUS.status.next;
        end
    end
    assign hwif_out.BOOT_STATUS.status.value = field_storage.BOOT_STATUS.status.value;
    // Field: mci_reg.FLOW_STATUS.status
    always_comb begin
        automatic logic [23:0] next_c = field_storage.FLOW_STATUS.status.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.FLOW_STATUS && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.FLOW_STATUS.status.value & ~decoded_wr_biten[23:0]) | (decoded_wr_data[23:0] & decoded_wr_biten[23:0]);
            load_next_c = '1;
        end
        field_combo.FLOW_STATUS.status.next = next_c;
        field_combo.FLOW_STATUS.status.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.FLOW_STATUS.status.value <= 24'h0;
        end else if(field_combo.FLOW_STATUS.status.load_next) begin
            field_storage.FLOW_STATUS.status.value <= field_combo.FLOW_STATUS.status.next;
        end
    end
    assign hwif_out.FLOW_STATUS.status.value = field_storage.FLOW_STATUS.status.value;
    // Field: mci_reg.RESET_REASON.FW_UPD_RESET
    always_comb begin
        automatic logic [0:0] next_c = field_storage.RESET_REASON.FW_UPD_RESET.value;
        automatic logic load_next_c = '0;
        if(hwif_in.RESET_REASON.FW_UPD_RESET.we) begin // HW Write - we
            next_c = hwif_in.RESET_REASON.FW_UPD_RESET.next;
            load_next_c = '1;
        end
        field_combo.RESET_REASON.FW_UPD_RESET.next = next_c;
        field_combo.RESET_REASON.FW_UPD_RESET.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.RESET_REASON.FW_UPD_RESET.value <= 1'h0;
        end else if(field_combo.RESET_REASON.FW_UPD_RESET.load_next) begin
            field_storage.RESET_REASON.FW_UPD_RESET.value <= field_combo.RESET_REASON.FW_UPD_RESET.next;
        end
    end
    assign hwif_out.RESET_REASON.FW_UPD_RESET.value = field_storage.RESET_REASON.FW_UPD_RESET.value;
    // Field: mci_reg.RESET_REASON.WARM_RESET
    always_comb begin
        automatic logic [0:0] next_c = field_storage.RESET_REASON.WARM_RESET.value;
        automatic logic load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.RESET_REASON.WARM_RESET.next;
        load_next_c = '1;
        field_combo.RESET_REASON.WARM_RESET.next = next_c;
        field_combo.RESET_REASON.WARM_RESET.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.RESET_REASON.WARM_RESET.value <= 1'h0;
        end else if(field_combo.RESET_REASON.WARM_RESET.load_next) begin
            field_storage.RESET_REASON.WARM_RESET.value <= field_combo.RESET_REASON.WARM_RESET.next;
        end
    end
    assign hwif_out.RESET_REASON.WARM_RESET.value = field_storage.RESET_REASON.WARM_RESET.value;
    // Field: mci_reg.HW_ERROR_FATAL.mcu_sram_ecc_unc
    always_comb begin
        automatic logic [0:0] next_c = field_storage.HW_ERROR_FATAL.mcu_sram_ecc_unc.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.HW_ERROR_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.HW_ERROR_FATAL.mcu_sram_ecc_unc.value & ~(decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else if(hwif_in.HW_ERROR_FATAL.mcu_sram_ecc_unc.we) begin // HW Write - we
            next_c = hwif_in.HW_ERROR_FATAL.mcu_sram_ecc_unc.next;
            load_next_c = '1;
        end
        field_combo.HW_ERROR_FATAL.mcu_sram_ecc_unc.next = next_c;
        field_combo.HW_ERROR_FATAL.mcu_sram_ecc_unc.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.HW_ERROR_FATAL.mcu_sram_ecc_unc.value <= 1'h0;
        end else if(field_combo.HW_ERROR_FATAL.mcu_sram_ecc_unc.load_next) begin
            field_storage.HW_ERROR_FATAL.mcu_sram_ecc_unc.value <= field_combo.HW_ERROR_FATAL.mcu_sram_ecc_unc.next;
        end
    end
    assign hwif_out.HW_ERROR_FATAL.mcu_sram_ecc_unc.value = field_storage.HW_ERROR_FATAL.mcu_sram_ecc_unc.value;
    // Field: mci_reg.HW_ERROR_FATAL.nmi_pin
    always_comb begin
        automatic logic [0:0] next_c = field_storage.HW_ERROR_FATAL.nmi_pin.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.HW_ERROR_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.HW_ERROR_FATAL.nmi_pin.value & ~(decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end else if(hwif_in.HW_ERROR_FATAL.nmi_pin.we) begin // HW Write - we
            next_c = hwif_in.HW_ERROR_FATAL.nmi_pin.next;
            load_next_c = '1;
        end
        field_combo.HW_ERROR_FATAL.nmi_pin.next = next_c;
        field_combo.HW_ERROR_FATAL.nmi_pin.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.HW_ERROR_FATAL.nmi_pin.value <= 1'h0;
        end else if(field_combo.HW_ERROR_FATAL.nmi_pin.load_next) begin
            field_storage.HW_ERROR_FATAL.nmi_pin.value <= field_combo.HW_ERROR_FATAL.nmi_pin.next;
        end
    end
    assign hwif_out.HW_ERROR_FATAL.nmi_pin.value = field_storage.HW_ERROR_FATAL.nmi_pin.value;
    // Field: mci_reg.HW_ERROR_NON_FATAL.RSVD
    always_comb begin
        automatic logic [0:0] next_c = field_storage.HW_ERROR_NON_FATAL.RSVD.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.HW_ERROR_NON_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.HW_ERROR_NON_FATAL.RSVD.value & ~(decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else if(hwif_in.HW_ERROR_NON_FATAL.RSVD.we) begin // HW Write - we
            next_c = hwif_in.HW_ERROR_NON_FATAL.RSVD.next;
            load_next_c = '1;
        end
        field_combo.HW_ERROR_NON_FATAL.RSVD.next = next_c;
        field_combo.HW_ERROR_NON_FATAL.RSVD.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.HW_ERROR_NON_FATAL.RSVD.value <= 1'h0;
        end else if(field_combo.HW_ERROR_NON_FATAL.RSVD.load_next) begin
            field_storage.HW_ERROR_NON_FATAL.RSVD.value <= field_combo.HW_ERROR_NON_FATAL.RSVD.next;
        end
    end
    assign hwif_out.HW_ERROR_NON_FATAL.RSVD.value = field_storage.HW_ERROR_NON_FATAL.RSVD.value;
    // Field: mci_reg.FW_ERROR_FATAL.error_code
    always_comb begin
        automatic logic [31:0] next_c = field_storage.FW_ERROR_FATAL.error_code.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.FW_ERROR_FATAL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.FW_ERROR_FATAL.error_code.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.FW_ERROR_FATAL.error_code.we) begin // HW Write - we
            next_c = hwif_in.FW_ERROR_FATAL.error_code.next;
            load_next_c = '1;
        end
        field_combo.FW_ERROR_FATAL.error_code.next = next_c;
        field_combo.FW_ERROR_FATAL.error_code.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.FW_ERROR_FATAL.error_code.value <= 32'h0;
        end else if(field_combo.FW_ERROR_FATAL.error_code.load_next) begin
            field_storage.FW_ERROR_FATAL.error_code.value <= field_combo.FW_ERROR_FATAL.error_code.next;
        end
    end
    assign hwif_out.FW_ERROR_FATAL.error_code.value = field_storage.FW_ERROR_FATAL.error_code.value;
    assign hwif_out.FW_ERROR_FATAL.error_code.swmod = decoded_reg_strb.FW_ERROR_FATAL && decoded_req_is_wr;
    // Field: mci_reg.FW_ERROR_NON_FATAL.error_code
    always_comb begin
        automatic logic [31:0] next_c = field_storage.FW_ERROR_NON_FATAL.error_code.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.FW_ERROR_NON_FATAL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.FW_ERROR_NON_FATAL.error_code.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.FW_ERROR_NON_FATAL.error_code.we) begin // HW Write - we
            next_c = hwif_in.FW_ERROR_NON_FATAL.error_code.next;
            load_next_c = '1;
        end
        field_combo.FW_ERROR_NON_FATAL.error_code.next = next_c;
        field_combo.FW_ERROR_NON_FATAL.error_code.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.FW_ERROR_NON_FATAL.error_code.value <= 32'h0;
        end else if(field_combo.FW_ERROR_NON_FATAL.error_code.load_next) begin
            field_storage.FW_ERROR_NON_FATAL.error_code.value <= field_combo.FW_ERROR_NON_FATAL.error_code.next;
        end
    end
    assign hwif_out.FW_ERROR_NON_FATAL.error_code.value = field_storage.FW_ERROR_NON_FATAL.error_code.value;
    assign hwif_out.FW_ERROR_NON_FATAL.error_code.swmod = decoded_reg_strb.FW_ERROR_NON_FATAL && decoded_req_is_wr;
    // Field: mci_reg.HW_ERROR_ENC.error_code
    always_comb begin
        automatic logic [31:0] next_c = field_storage.HW_ERROR_ENC.error_code.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.HW_ERROR_ENC && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.HW_ERROR_ENC.error_code.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.HW_ERROR_ENC.error_code.next = next_c;
        field_combo.HW_ERROR_ENC.error_code.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.HW_ERROR_ENC.error_code.value <= 32'h0;
        end else if(field_combo.HW_ERROR_ENC.error_code.load_next) begin
            field_storage.HW_ERROR_ENC.error_code.value <= field_combo.HW_ERROR_ENC.error_code.next;
        end
    end
    assign hwif_out.HW_ERROR_ENC.error_code.value = field_storage.HW_ERROR_ENC.error_code.value;
    // Field: mci_reg.FW_ERROR_ENC.error_code
    always_comb begin
        automatic logic [31:0] next_c = field_storage.FW_ERROR_ENC.error_code.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.FW_ERROR_ENC && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.FW_ERROR_ENC.error_code.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.FW_ERROR_ENC.error_code.next = next_c;
        field_combo.FW_ERROR_ENC.error_code.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.FW_ERROR_ENC.error_code.value <= 32'h0;
        end else if(field_combo.FW_ERROR_ENC.error_code.load_next) begin
            field_storage.FW_ERROR_ENC.error_code.value <= field_combo.FW_ERROR_ENC.error_code.next;
        end
    end
    assign hwif_out.FW_ERROR_ENC.error_code.value = field_storage.FW_ERROR_ENC.error_code.value;
    for(genvar i0=0; i0<8; i0++) begin
        // Field: mci_reg.FW_EXTENDED_ERROR_INFO[].error_info
        always_comb begin
            automatic logic [31:0] next_c = field_storage.FW_EXTENDED_ERROR_INFO[i0].error_info.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.FW_EXTENDED_ERROR_INFO[i0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage.FW_EXTENDED_ERROR_INFO[i0].error_info.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo.FW_EXTENDED_ERROR_INFO[i0].error_info.next = next_c;
            field_combo.FW_EXTENDED_ERROR_INFO[i0].error_info.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
            if(~hwif_in.mci_pwrgood) begin
                field_storage.FW_EXTENDED_ERROR_INFO[i0].error_info.value <= 32'h0;
            end else if(field_combo.FW_EXTENDED_ERROR_INFO[i0].error_info.load_next) begin
                field_storage.FW_EXTENDED_ERROR_INFO[i0].error_info.value <= field_combo.FW_EXTENDED_ERROR_INFO[i0].error_info.next;
            end
        end
        assign hwif_out.FW_EXTENDED_ERROR_INFO[i0].error_info.value = field_storage.FW_EXTENDED_ERROR_INFO[i0].error_info.value;
    end
    // Field: mci_reg.WDT_TIMER1_EN.timer1_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.WDT_TIMER1_EN.timer1_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.WDT_TIMER1_EN && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.WDT_TIMER1_EN.timer1_en.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.WDT_TIMER1_EN.timer1_en.next = next_c;
        field_combo.WDT_TIMER1_EN.timer1_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.WDT_TIMER1_EN.timer1_en.value <= 1'h0;
        end else if(field_combo.WDT_TIMER1_EN.timer1_en.load_next) begin
            field_storage.WDT_TIMER1_EN.timer1_en.value <= field_combo.WDT_TIMER1_EN.timer1_en.next;
        end
    end
    assign hwif_out.WDT_TIMER1_EN.timer1_en.value = field_storage.WDT_TIMER1_EN.timer1_en.value;
    // Field: mci_reg.WDT_TIMER1_CTRL.timer1_restart
    always_comb begin
        automatic logic [0:0] next_c = field_storage.WDT_TIMER1_CTRL.timer1_restart.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.WDT_TIMER1_CTRL && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.WDT_TIMER1_CTRL.timer1_restart.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.WDT_TIMER1_CTRL.timer1_restart.next = next_c;
        field_combo.WDT_TIMER1_CTRL.timer1_restart.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.WDT_TIMER1_CTRL.timer1_restart.value <= 1'h0;
        end else if(field_combo.WDT_TIMER1_CTRL.timer1_restart.load_next) begin
            field_storage.WDT_TIMER1_CTRL.timer1_restart.value <= field_combo.WDT_TIMER1_CTRL.timer1_restart.next;
        end
    end
    assign hwif_out.WDT_TIMER1_CTRL.timer1_restart.value = field_storage.WDT_TIMER1_CTRL.timer1_restart.value;
    for(genvar i0=0; i0<2; i0++) begin
        // Field: mci_reg.WDT_TIMER1_TIMEOUT_PERIOD[].timer1_timeout_period
        always_comb begin
            automatic logic [31:0] next_c = field_storage.WDT_TIMER1_TIMEOUT_PERIOD[i0].timer1_timeout_period.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.WDT_TIMER1_TIMEOUT_PERIOD[i0] && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
                next_c = (field_storage.WDT_TIMER1_TIMEOUT_PERIOD[i0].timer1_timeout_period.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo.WDT_TIMER1_TIMEOUT_PERIOD[i0].timer1_timeout_period.next = next_c;
            field_combo.WDT_TIMER1_TIMEOUT_PERIOD[i0].timer1_timeout_period.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
            if(~hwif_in.mci_rst_b) begin
                field_storage.WDT_TIMER1_TIMEOUT_PERIOD[i0].timer1_timeout_period.value <= 32'hffffffff;
            end else if(field_combo.WDT_TIMER1_TIMEOUT_PERIOD[i0].timer1_timeout_period.load_next) begin
                field_storage.WDT_TIMER1_TIMEOUT_PERIOD[i0].timer1_timeout_period.value <= field_combo.WDT_TIMER1_TIMEOUT_PERIOD[i0].timer1_timeout_period.next;
            end
        end
        assign hwif_out.WDT_TIMER1_TIMEOUT_PERIOD[i0].timer1_timeout_period.value = field_storage.WDT_TIMER1_TIMEOUT_PERIOD[i0].timer1_timeout_period.value;
    end
    // Field: mci_reg.WDT_TIMER2_EN.timer2_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.WDT_TIMER2_EN.timer2_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.WDT_TIMER2_EN && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.WDT_TIMER2_EN.timer2_en.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.WDT_TIMER2_EN.timer2_en.next = next_c;
        field_combo.WDT_TIMER2_EN.timer2_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.WDT_TIMER2_EN.timer2_en.value <= 1'h0;
        end else if(field_combo.WDT_TIMER2_EN.timer2_en.load_next) begin
            field_storage.WDT_TIMER2_EN.timer2_en.value <= field_combo.WDT_TIMER2_EN.timer2_en.next;
        end
    end
    assign hwif_out.WDT_TIMER2_EN.timer2_en.value = field_storage.WDT_TIMER2_EN.timer2_en.value;
    // Field: mci_reg.WDT_TIMER2_CTRL.timer2_restart
    always_comb begin
        automatic logic [0:0] next_c = field_storage.WDT_TIMER2_CTRL.timer2_restart.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.WDT_TIMER2_CTRL && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.WDT_TIMER2_CTRL.timer2_restart.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.WDT_TIMER2_CTRL.timer2_restart.next = next_c;
        field_combo.WDT_TIMER2_CTRL.timer2_restart.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.WDT_TIMER2_CTRL.timer2_restart.value <= 1'h0;
        end else if(field_combo.WDT_TIMER2_CTRL.timer2_restart.load_next) begin
            field_storage.WDT_TIMER2_CTRL.timer2_restart.value <= field_combo.WDT_TIMER2_CTRL.timer2_restart.next;
        end
    end
    assign hwif_out.WDT_TIMER2_CTRL.timer2_restart.value = field_storage.WDT_TIMER2_CTRL.timer2_restart.value;
    for(genvar i0=0; i0<2; i0++) begin
        // Field: mci_reg.WDT_TIMER2_TIMEOUT_PERIOD[].timer2_timeout_period
        always_comb begin
            automatic logic [31:0] next_c = field_storage.WDT_TIMER2_TIMEOUT_PERIOD[i0].timer2_timeout_period.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.WDT_TIMER2_TIMEOUT_PERIOD[i0] && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
                next_c = (field_storage.WDT_TIMER2_TIMEOUT_PERIOD[i0].timer2_timeout_period.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo.WDT_TIMER2_TIMEOUT_PERIOD[i0].timer2_timeout_period.next = next_c;
            field_combo.WDT_TIMER2_TIMEOUT_PERIOD[i0].timer2_timeout_period.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
            if(~hwif_in.mci_rst_b) begin
                field_storage.WDT_TIMER2_TIMEOUT_PERIOD[i0].timer2_timeout_period.value <= 32'hffffffff;
            end else if(field_combo.WDT_TIMER2_TIMEOUT_PERIOD[i0].timer2_timeout_period.load_next) begin
                field_storage.WDT_TIMER2_TIMEOUT_PERIOD[i0].timer2_timeout_period.value <= field_combo.WDT_TIMER2_TIMEOUT_PERIOD[i0].timer2_timeout_period.next;
            end
        end
        assign hwif_out.WDT_TIMER2_TIMEOUT_PERIOD[i0].timer2_timeout_period.value = field_storage.WDT_TIMER2_TIMEOUT_PERIOD[i0].timer2_timeout_period.value;
    end
    // Field: mci_reg.WDT_STATUS.t1_timeout
    always_comb begin
        automatic logic [0:0] next_c = field_storage.WDT_STATUS.t1_timeout.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.WDT_STATUS && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.WDT_STATUS.t1_timeout.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.WDT_STATUS.t1_timeout.next;
            load_next_c = '1;
        end
        field_combo.WDT_STATUS.t1_timeout.next = next_c;
        field_combo.WDT_STATUS.t1_timeout.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.WDT_STATUS.t1_timeout.value <= 1'h0;
        end else if(field_combo.WDT_STATUS.t1_timeout.load_next) begin
            field_storage.WDT_STATUS.t1_timeout.value <= field_combo.WDT_STATUS.t1_timeout.next;
        end
    end
    assign hwif_out.WDT_STATUS.t1_timeout.value = field_storage.WDT_STATUS.t1_timeout.value;
    // Field: mci_reg.WDT_STATUS.t2_timeout
    always_comb begin
        automatic logic [0:0] next_c = field_storage.WDT_STATUS.t2_timeout.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.WDT_STATUS && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.WDT_STATUS.t2_timeout.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.WDT_STATUS.t2_timeout.next;
            load_next_c = '1;
        end
        field_combo.WDT_STATUS.t2_timeout.next = next_c;
        field_combo.WDT_STATUS.t2_timeout.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.WDT_STATUS.t2_timeout.value <= 1'h0;
        end else if(field_combo.WDT_STATUS.t2_timeout.load_next) begin
            field_storage.WDT_STATUS.t2_timeout.value <= field_combo.WDT_STATUS.t2_timeout.next;
        end
    end
    assign hwif_out.WDT_STATUS.t2_timeout.value = field_storage.WDT_STATUS.t2_timeout.value;
    for(genvar i0=0; i0<2; i0++) begin
        // Field: mci_reg.WDT_CFG[].TIMEOUT
        always_comb begin
            automatic logic [31:0] next_c = field_storage.WDT_CFG[i0].TIMEOUT.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.WDT_CFG[i0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage.WDT_CFG[i0].TIMEOUT.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo.WDT_CFG[i0].TIMEOUT.next = next_c;
            field_combo.WDT_CFG[i0].TIMEOUT.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
            if(~hwif_in.mci_pwrgood) begin
                field_storage.WDT_CFG[i0].TIMEOUT.value <= 32'h0;
            end else if(field_combo.WDT_CFG[i0].TIMEOUT.load_next) begin
                field_storage.WDT_CFG[i0].TIMEOUT.value <= field_combo.WDT_CFG[i0].TIMEOUT.next;
            end
        end
    end
    // Field: mci_reg.MCU_TIMER_CONFIG.clk_period
    always_comb begin
        automatic logic [31:0] next_c = field_storage.MCU_TIMER_CONFIG.clk_period.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.MCU_TIMER_CONFIG && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.MCU_TIMER_CONFIG.clk_period.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.MCU_TIMER_CONFIG.clk_period.next = next_c;
        field_combo.MCU_TIMER_CONFIG.clk_period.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.MCU_TIMER_CONFIG.clk_period.value <= 32'h0;
        end else if(field_combo.MCU_TIMER_CONFIG.clk_period.load_next) begin
            field_storage.MCU_TIMER_CONFIG.clk_period.value <= field_combo.MCU_TIMER_CONFIG.clk_period.next;
        end
    end
    // Field: mci_reg.MCU_CLK_GATING_EN.FIXME
    always_comb begin
        automatic logic [0:0] next_c = field_storage.MCU_CLK_GATING_EN.FIXME.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.MCU_CLK_GATING_EN && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.MCU_CLK_GATING_EN.FIXME.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.MCU_CLK_GATING_EN.FIXME.next = next_c;
        field_combo.MCU_CLK_GATING_EN.FIXME.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.MCU_CLK_GATING_EN.FIXME.value <= 1'h0;
        end else if(field_combo.MCU_CLK_GATING_EN.FIXME.load_next) begin
            field_storage.MCU_CLK_GATING_EN.FIXME.value <= field_combo.MCU_CLK_GATING_EN.FIXME.next;
        end
    end
    // Field: mci_reg.MCU_RV_MTIME_L.count_l
    always_comb begin
        automatic logic [31:0] next_c = field_storage.MCU_RV_MTIME_L.count_l.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.MCU_RV_MTIME_L && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.MCU_RV_MTIME_L.count_l.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(hwif_in.MCU_RV_MTIME_L.count_l.incr) begin // increment
            field_combo.MCU_RV_MTIME_L.count_l.overflow = (((33)'(next_c) + 32'h1) > 32'hffffffff);
            next_c = next_c + 32'h1;
            load_next_c = '1;
        end else begin
            field_combo.MCU_RV_MTIME_L.count_l.overflow = '0;
        end
        field_combo.MCU_RV_MTIME_L.count_l.incrthreshold = (field_storage.MCU_RV_MTIME_L.count_l.value >= 32'hffffffff);
        field_combo.MCU_RV_MTIME_L.count_l.next = next_c;
        field_combo.MCU_RV_MTIME_L.count_l.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.MCU_RV_MTIME_L.count_l.value <= 32'h0;
        end else if(field_combo.MCU_RV_MTIME_L.count_l.load_next) begin
            field_storage.MCU_RV_MTIME_L.count_l.value <= field_combo.MCU_RV_MTIME_L.count_l.next;
        end
    end
    assign hwif_out.MCU_RV_MTIME_L.count_l.value = field_storage.MCU_RV_MTIME_L.count_l.value;
    assign hwif_out.MCU_RV_MTIME_L.count_l.swmod = decoded_reg_strb.MCU_RV_MTIME_L && decoded_req_is_wr;
    assign hwif_out.MCU_RV_MTIME_L.count_l.overflow = field_combo.MCU_RV_MTIME_L.count_l.overflow;
    // Field: mci_reg.MCU_RV_MTIME_H.count_h
    always_comb begin
        automatic logic [31:0] next_c = field_storage.MCU_RV_MTIME_H.count_h.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.MCU_RV_MTIME_H && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.MCU_RV_MTIME_H.count_h.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(hwif_in.MCU_RV_MTIME_H.count_h.incr) begin // increment
            field_combo.MCU_RV_MTIME_H.count_h.overflow = (((33)'(next_c) + 32'h1) > 32'hffffffff);
            next_c = next_c + 32'h1;
            load_next_c = '1;
        end else begin
            field_combo.MCU_RV_MTIME_H.count_h.overflow = '0;
        end
        field_combo.MCU_RV_MTIME_H.count_h.incrthreshold = (field_storage.MCU_RV_MTIME_H.count_h.value >= 32'hffffffff);
        field_combo.MCU_RV_MTIME_H.count_h.next = next_c;
        field_combo.MCU_RV_MTIME_H.count_h.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.MCU_RV_MTIME_H.count_h.value <= 32'h0;
        end else if(field_combo.MCU_RV_MTIME_H.count_h.load_next) begin
            field_storage.MCU_RV_MTIME_H.count_h.value <= field_combo.MCU_RV_MTIME_H.count_h.next;
        end
    end
    assign hwif_out.MCU_RV_MTIME_H.count_h.value = field_storage.MCU_RV_MTIME_H.count_h.value;
    assign hwif_out.MCU_RV_MTIME_H.count_h.swmod = decoded_reg_strb.MCU_RV_MTIME_H && decoded_req_is_wr;
    // Field: mci_reg.MCU_RV_MTIMECMP_L.compare_l
    always_comb begin
        automatic logic [31:0] next_c = field_storage.MCU_RV_MTIMECMP_L.compare_l.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.MCU_RV_MTIMECMP_L && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.MCU_RV_MTIMECMP_L.compare_l.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.MCU_RV_MTIMECMP_L.compare_l.next = next_c;
        field_combo.MCU_RV_MTIMECMP_L.compare_l.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.MCU_RV_MTIMECMP_L.compare_l.value <= 32'h0;
        end else if(field_combo.MCU_RV_MTIMECMP_L.compare_l.load_next) begin
            field_storage.MCU_RV_MTIMECMP_L.compare_l.value <= field_combo.MCU_RV_MTIMECMP_L.compare_l.next;
        end
    end
    assign hwif_out.MCU_RV_MTIMECMP_L.compare_l.value = field_storage.MCU_RV_MTIMECMP_L.compare_l.value;
    // Field: mci_reg.MCU_RV_MTIMECMP_H.compare_h
    always_comb begin
        automatic logic [31:0] next_c = field_storage.MCU_RV_MTIMECMP_H.compare_h.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.MCU_RV_MTIMECMP_H && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.MCU_RV_MTIMECMP_H.compare_h.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.MCU_RV_MTIMECMP_H.compare_h.next = next_c;
        field_combo.MCU_RV_MTIMECMP_H.compare_h.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.MCU_RV_MTIMECMP_H.compare_h.value <= 32'h0;
        end else if(field_combo.MCU_RV_MTIMECMP_H.compare_h.load_next) begin
            field_storage.MCU_RV_MTIMECMP_H.compare_h.value <= field_combo.MCU_RV_MTIMECMP_H.compare_h.next;
        end
    end
    assign hwif_out.MCU_RV_MTIMECMP_H.compare_h.value = field_storage.MCU_RV_MTIMECMP_H.compare_h.value;
    // Field: mci_reg.RESET_REQUEST.req
    always_comb begin
        automatic logic [0:0] next_c = field_storage.RESET_REQUEST.req.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.RESET_REQUEST && decoded_req_is_wr && hwif_in.cptra_req) begin // SW write
            next_c = (field_storage.RESET_REQUEST.req.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else if(hwif_in.RESET_REQUEST.req.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.RESET_REQUEST.req.next = next_c;
        field_combo.RESET_REQUEST.req.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.RESET_REQUEST.req.value <= 1'h0;
        end else if(field_combo.RESET_REQUEST.req.load_next) begin
            field_storage.RESET_REQUEST.req.value <= field_combo.RESET_REQUEST.req.next;
        end
    end
    assign hwif_out.RESET_REQUEST.req.value = field_storage.RESET_REQUEST.req.value;
    // Field: mci_reg.RESET_REQUEST.clr
    always_comb begin
        automatic logic [0:0] next_c = field_storage.RESET_REQUEST.clr.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.RESET_REQUEST && decoded_req_is_wr && hwif_in.cptra_req) begin // SW write 1 set
            next_c = field_storage.RESET_REQUEST.clr.value | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.RESET_REQUEST.clr.next = next_c;
        field_combo.RESET_REQUEST.clr.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.RESET_REQUEST.clr.value <= 1'h0;
        end else if(field_combo.RESET_REQUEST.clr.load_next) begin
            field_storage.RESET_REQUEST.clr.value <= field_combo.RESET_REQUEST.clr.next;
        end
    end
    assign hwif_out.RESET_REQUEST.clr.value = field_storage.RESET_REQUEST.clr.value;
    // Field: mci_reg.RESET_ACK.ack
    always_comb begin
        automatic logic [0:0] next_c = field_storage.RESET_ACK.ack.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.RESET_ACK && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.RESET_ACK.ack.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else if(hwif_in.RESET_ACK.ack.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.RESET_ACK.ack.next = next_c;
        field_combo.RESET_ACK.ack.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.RESET_ACK.ack.value <= 1'h0;
        end else if(field_combo.RESET_ACK.ack.load_next) begin
            field_storage.RESET_ACK.ack.value <= field_combo.RESET_ACK.ack.next;
        end
    end
    assign hwif_out.RESET_ACK.ack.value = field_storage.RESET_ACK.ack.value;
    // Field: mci_reg.CALIPTRA_BOOT_GO.go
    always_comb begin
        automatic logic [0:0] next_c = field_storage.CALIPTRA_BOOT_GO.go.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.CALIPTRA_BOOT_GO && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.CALIPTRA_BOOT_GO.go.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.CALIPTRA_BOOT_GO.go.next = next_c;
        field_combo.CALIPTRA_BOOT_GO.go.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.CALIPTRA_BOOT_GO.go.value <= 1'h0;
        end else if(field_combo.CALIPTRA_BOOT_GO.go.load_next) begin
            field_storage.CALIPTRA_BOOT_GO.go.value <= field_combo.CALIPTRA_BOOT_GO.go.next;
        end
    end
    // Field: mci_reg.FW_SRAM_EXEC_REGION_SIZE.size
    always_comb begin
        automatic logic [15:0] next_c = field_storage.FW_SRAM_EXEC_REGION_SIZE.size.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.FW_SRAM_EXEC_REGION_SIZE && decoded_req_is_wr && hwif_in.FW_SRAM_EXEC_REGION_SIZE.size.swwe) begin // SW write
            next_c = (field_storage.FW_SRAM_EXEC_REGION_SIZE.size.value & ~decoded_wr_biten[15:0]) | (decoded_wr_data[15:0] & decoded_wr_biten[15:0]);
            load_next_c = '1;
        end
        field_combo.FW_SRAM_EXEC_REGION_SIZE.size.next = next_c;
        field_combo.FW_SRAM_EXEC_REGION_SIZE.size.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.FW_SRAM_EXEC_REGION_SIZE.size.value <= 16'h0;
        end else if(field_combo.FW_SRAM_EXEC_REGION_SIZE.size.load_next) begin
            field_storage.FW_SRAM_EXEC_REGION_SIZE.size.value <= field_combo.FW_SRAM_EXEC_REGION_SIZE.size.next;
        end
    end
    assign hwif_out.FW_SRAM_EXEC_REGION_SIZE.size.value = field_storage.FW_SRAM_EXEC_REGION_SIZE.size.value;
    // Field: mci_reg.RUNTIME_LOCK.lock
    always_comb begin
        automatic logic [0:0] next_c = field_storage.RUNTIME_LOCK.lock.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.RUNTIME_LOCK && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.RUNTIME_LOCK.lock.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.RUNTIME_LOCK.lock.next = next_c;
        field_combo.RUNTIME_LOCK.lock.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.RUNTIME_LOCK.lock.value <= 1'h0;
        end else if(field_combo.RUNTIME_LOCK.lock.load_next) begin
            field_storage.RUNTIME_LOCK.lock.value <= field_combo.RUNTIME_LOCK.lock.next;
        end
    end
    for(genvar i0=0; i0<5; i0++) begin
        // Field: mci_reg.MBOX0_VALID_AXI_ID[].id
        always_comb begin
            automatic logic [31:0] next_c = field_storage.MBOX0_VALID_AXI_ID[i0].id.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.MBOX0_VALID_AXI_ID[i0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage.MBOX0_VALID_AXI_ID[i0].id.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo.MBOX0_VALID_AXI_ID[i0].id.next = next_c;
            field_combo.MBOX0_VALID_AXI_ID[i0].id.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
            if(~hwif_in.mci_rst_b) begin
                field_storage.MBOX0_VALID_AXI_ID[i0].id.value <= 32'h0;
            end else if(field_combo.MBOX0_VALID_AXI_ID[i0].id.load_next) begin
                field_storage.MBOX0_VALID_AXI_ID[i0].id.value <= field_combo.MBOX0_VALID_AXI_ID[i0].id.next;
            end
        end
    end
    for(genvar i0=0; i0<5; i0++) begin
        // Field: mci_reg.MBOX0_VALID_AXI_ID_LOCK[].lock
        always_comb begin
            automatic logic [0:0] next_c = field_storage.MBOX0_VALID_AXI_ID_LOCK[i0].lock.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.MBOX0_VALID_AXI_ID_LOCK[i0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage.MBOX0_VALID_AXI_ID_LOCK[i0].lock.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
                load_next_c = '1;
            end
            field_combo.MBOX0_VALID_AXI_ID_LOCK[i0].lock.next = next_c;
            field_combo.MBOX0_VALID_AXI_ID_LOCK[i0].lock.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
            if(~hwif_in.mci_rst_b) begin
                field_storage.MBOX0_VALID_AXI_ID_LOCK[i0].lock.value <= 1'h0;
            end else if(field_combo.MBOX0_VALID_AXI_ID_LOCK[i0].lock.load_next) begin
                field_storage.MBOX0_VALID_AXI_ID_LOCK[i0].lock.value <= field_combo.MBOX0_VALID_AXI_ID_LOCK[i0].lock.next;
            end
        end
    end
    for(genvar i0=0; i0<5; i0++) begin
        // Field: mci_reg.MBOX1_VALID_AXI_ID[].id
        always_comb begin
            automatic logic [31:0] next_c = field_storage.MBOX1_VALID_AXI_ID[i0].id.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.MBOX1_VALID_AXI_ID[i0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage.MBOX1_VALID_AXI_ID[i0].id.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo.MBOX1_VALID_AXI_ID[i0].id.next = next_c;
            field_combo.MBOX1_VALID_AXI_ID[i0].id.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
            if(~hwif_in.mci_rst_b) begin
                field_storage.MBOX1_VALID_AXI_ID[i0].id.value <= 32'h0;
            end else if(field_combo.MBOX1_VALID_AXI_ID[i0].id.load_next) begin
                field_storage.MBOX1_VALID_AXI_ID[i0].id.value <= field_combo.MBOX1_VALID_AXI_ID[i0].id.next;
            end
        end
    end
    for(genvar i0=0; i0<5; i0++) begin
        // Field: mci_reg.MBOX1_VALID_AXI_ID_LOCK[].lock
        always_comb begin
            automatic logic [0:0] next_c = field_storage.MBOX1_VALID_AXI_ID_LOCK[i0].lock.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.MBOX1_VALID_AXI_ID_LOCK[i0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage.MBOX1_VALID_AXI_ID_LOCK[i0].lock.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
                load_next_c = '1;
            end
            field_combo.MBOX1_VALID_AXI_ID_LOCK[i0].lock.next = next_c;
            field_combo.MBOX1_VALID_AXI_ID_LOCK[i0].lock.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
            if(~hwif_in.mci_rst_b) begin
                field_storage.MBOX1_VALID_AXI_ID_LOCK[i0].lock.value <= 1'h0;
            end else if(field_combo.MBOX1_VALID_AXI_ID_LOCK[i0].lock.load_next) begin
                field_storage.MBOX1_VALID_AXI_ID_LOCK[i0].lock.value <= field_combo.MBOX1_VALID_AXI_ID_LOCK[i0].lock.next;
            end
        end
    end
    for(genvar i0=0; i0<2; i0++) begin
        // Field: mci_reg.GENERIC_OUTPUT_WIRES[].wires
        always_comb begin
            automatic logic [31:0] next_c = field_storage.GENERIC_OUTPUT_WIRES[i0].wires.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.GENERIC_OUTPUT_WIRES[i0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage.GENERIC_OUTPUT_WIRES[i0].wires.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo.GENERIC_OUTPUT_WIRES[i0].wires.next = next_c;
            field_combo.GENERIC_OUTPUT_WIRES[i0].wires.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
            if(~hwif_in.mci_rst_b) begin
                field_storage.GENERIC_OUTPUT_WIRES[i0].wires.value <= 32'h0;
            end else if(field_combo.GENERIC_OUTPUT_WIRES[i0].wires.load_next) begin
                field_storage.GENERIC_OUTPUT_WIRES[i0].wires.value <= field_combo.GENERIC_OUTPUT_WIRES[i0].wires.next;
            end
        end
        assign hwif_out.GENERIC_OUTPUT_WIRES[i0].wires.value = field_storage.GENERIC_OUTPUT_WIRES[i0].wires.value;
    end
    // Field: mci_reg.DEBUG_IN.FIXME
    always_comb begin
        automatic logic [0:0] next_c = field_storage.DEBUG_IN.FIXME.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.DEBUG_IN && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.DEBUG_IN.FIXME.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.DEBUG_IN.FIXME.next = next_c;
        field_combo.DEBUG_IN.FIXME.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.DEBUG_IN.FIXME.value <= 1'h0;
        end else if(field_combo.DEBUG_IN.FIXME.load_next) begin
            field_storage.DEBUG_IN.FIXME.value <= field_combo.DEBUG_IN.FIXME.next;
        end
    end
    // Field: mci_reg.DEBUG_OUT.FIXME
    always_comb begin
        automatic logic [0:0] next_c = field_storage.DEBUG_OUT.FIXME.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.DEBUG_OUT && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.DEBUG_OUT.FIXME.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.DEBUG_OUT.FIXME.next = next_c;
        field_combo.DEBUG_OUT.FIXME.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.DEBUG_OUT.FIXME.value <= 1'h0;
        end else if(field_combo.DEBUG_OUT.FIXME.load_next) begin
            field_storage.DEBUG_OUT.FIXME.value <= field_combo.DEBUG_OUT.FIXME.next;
        end
    end
    // Field: mci_reg.FUSE_WR_DONE.done
    always_comb begin
        automatic logic [0:0] next_c = field_storage.FUSE_WR_DONE.done.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.FUSE_WR_DONE && decoded_req_is_wr && !(hwif_in.FUSE_WR_DONE.done.swwel)) begin // SW write
            next_c = (field_storage.FUSE_WR_DONE.done.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.FUSE_WR_DONE.done.next = next_c;
        field_combo.FUSE_WR_DONE.done.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.FUSE_WR_DONE.done.value <= 1'h0;
        end else if(field_combo.FUSE_WR_DONE.done.load_next) begin
            field_storage.FUSE_WR_DONE.done.value <= field_combo.FUSE_WR_DONE.done.next;
        end
    end
    assign hwif_out.FUSE_WR_DONE.done.value = field_storage.FUSE_WR_DONE.done.value;
    assign hwif_out.FUSE_WR_DONE.done.swmod = decoded_reg_strb.FUSE_WR_DONE && decoded_req_is_wr;
    for(genvar i0=0; i0<8; i0++) begin
        for(genvar i1=0; i1<12; i1++) begin
            // Field: mci_reg.PROD_DEBUG_UNLOCK_PK_HASH_REG[][].hash
            always_comb begin
                automatic logic [31:0] next_c = field_storage.PROD_DEBUG_UNLOCK_PK_HASH_REG[i0][i1].hash.value;
                automatic logic load_next_c = '0;
                if(decoded_reg_strb.PROD_DEBUG_UNLOCK_PK_HASH_REG[i0][i1] && decoded_req_is_wr && !(hwif_in.PROD_DEBUG_UNLOCK_PK_HASH_REG[i0][i1].hash.swwel)) begin // SW write
                    next_c = (field_storage.PROD_DEBUG_UNLOCK_PK_HASH_REG[i0][i1].hash.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                    load_next_c = '1;
                end else if(hwif_in.PROD_DEBUG_UNLOCK_PK_HASH_REG[i0][i1].hash.we) begin // HW Write - we
                    next_c = hwif_in.PROD_DEBUG_UNLOCK_PK_HASH_REG[i0][i1].hash.next;
                    load_next_c = '1;
                end
                field_combo.PROD_DEBUG_UNLOCK_PK_HASH_REG[i0][i1].hash.next = next_c;
                field_combo.PROD_DEBUG_UNLOCK_PK_HASH_REG[i0][i1].hash.load_next = load_next_c;
            end
            always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
                if(~hwif_in.mci_pwrgood) begin
                    field_storage.PROD_DEBUG_UNLOCK_PK_HASH_REG[i0][i1].hash.value <= 32'h0;
                end else if(field_combo.PROD_DEBUG_UNLOCK_PK_HASH_REG[i0][i1].hash.load_next) begin
                    field_storage.PROD_DEBUG_UNLOCK_PK_HASH_REG[i0][i1].hash.value <= field_combo.PROD_DEBUG_UNLOCK_PK_HASH_REG[i0][i1].hash.next;
                end
            end
            assign hwif_out.PROD_DEBUG_UNLOCK_PK_HASH_REG[i0][i1].hash.value = field_storage.PROD_DEBUG_UNLOCK_PK_HASH_REG[i0][i1].hash.value;
        end
    end
    for(genvar i0=0; i0<10; i0++) begin
        // Field: mci_reg.STICKY_DATA_VAULT_CTRL[].lock_entry
        always_comb begin
            automatic logic [0:0] next_c = field_storage.STICKY_DATA_VAULT_CTRL[i0].lock_entry.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.STICKY_DATA_VAULT_CTRL[i0] && decoded_req_is_wr && !(hwif_in.STICKY_DATA_VAULT_CTRL[i0].lock_entry.swwel)) begin // SW write
                next_c = (field_storage.STICKY_DATA_VAULT_CTRL[i0].lock_entry.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
                load_next_c = '1;
            end
            field_combo.STICKY_DATA_VAULT_CTRL[i0].lock_entry.next = next_c;
            field_combo.STICKY_DATA_VAULT_CTRL[i0].lock_entry.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
            if(~hwif_in.mci_pwrgood) begin
                field_storage.STICKY_DATA_VAULT_CTRL[i0].lock_entry.value <= 1'h0;
            end else if(field_combo.STICKY_DATA_VAULT_CTRL[i0].lock_entry.load_next) begin
                field_storage.STICKY_DATA_VAULT_CTRL[i0].lock_entry.value <= field_combo.STICKY_DATA_VAULT_CTRL[i0].lock_entry.next;
            end
        end
        assign hwif_out.STICKY_DATA_VAULT_CTRL[i0].lock_entry.value = field_storage.STICKY_DATA_VAULT_CTRL[i0].lock_entry.value;
    end
    for(genvar i0=0; i0<10; i0++) begin
        for(genvar i1=0; i1<12; i1++) begin
            // Field: mci_reg.STICKY_DATA_VAULT_ENTRY[][].lock_entry
            always_comb begin
                automatic logic [0:0] next_c = field_storage.STICKY_DATA_VAULT_ENTRY[i0][i1].lock_entry.value;
                automatic logic load_next_c = '0;
                if(decoded_reg_strb.STICKY_DATA_VAULT_ENTRY[i0][i1] && decoded_req_is_wr && !(hwif_in.STICKY_DATA_VAULT_ENTRY[i0][i1].lock_entry.swwel)) begin // SW write
                    next_c = (field_storage.STICKY_DATA_VAULT_ENTRY[i0][i1].lock_entry.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
                    load_next_c = '1;
                end
                field_combo.STICKY_DATA_VAULT_ENTRY[i0][i1].lock_entry.next = next_c;
                field_combo.STICKY_DATA_VAULT_ENTRY[i0][i1].lock_entry.load_next = load_next_c;
            end
            always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
                if(~hwif_in.mci_pwrgood) begin
                    field_storage.STICKY_DATA_VAULT_ENTRY[i0][i1].lock_entry.value <= 1'h0;
                end else if(field_combo.STICKY_DATA_VAULT_ENTRY[i0][i1].lock_entry.load_next) begin
                    field_storage.STICKY_DATA_VAULT_ENTRY[i0][i1].lock_entry.value <= field_combo.STICKY_DATA_VAULT_ENTRY[i0][i1].lock_entry.next;
                end
            end
        end
    end
    for(genvar i0=0; i0<10; i0++) begin
        // Field: mci_reg.DATA_VAULT_CTRL[].lock_entry
        always_comb begin
            automatic logic [0:0] next_c = field_storage.DATA_VAULT_CTRL[i0].lock_entry.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.DATA_VAULT_CTRL[i0] && decoded_req_is_wr && !(hwif_in.DATA_VAULT_CTRL[i0].lock_entry.swwel)) begin // SW write
                next_c = (field_storage.DATA_VAULT_CTRL[i0].lock_entry.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
                load_next_c = '1;
            end
            field_combo.DATA_VAULT_CTRL[i0].lock_entry.next = next_c;
            field_combo.DATA_VAULT_CTRL[i0].lock_entry.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.mcu_rst_b) begin
            if(~hwif_in.mcu_rst_b) begin
                field_storage.DATA_VAULT_CTRL[i0].lock_entry.value <= 1'h0;
            end else if(field_combo.DATA_VAULT_CTRL[i0].lock_entry.load_next) begin
                field_storage.DATA_VAULT_CTRL[i0].lock_entry.value <= field_combo.DATA_VAULT_CTRL[i0].lock_entry.next;
            end
        end
        assign hwif_out.DATA_VAULT_CTRL[i0].lock_entry.value = field_storage.DATA_VAULT_CTRL[i0].lock_entry.value;
    end
    for(genvar i0=0; i0<10; i0++) begin
        for(genvar i1=0; i1<12; i1++) begin
            // Field: mci_reg.DATA_VAULT_ENTRY[][].lock_entry
            always_comb begin
                automatic logic [0:0] next_c = field_storage.DATA_VAULT_ENTRY[i0][i1].lock_entry.value;
                automatic logic load_next_c = '0;
                if(decoded_reg_strb.DATA_VAULT_ENTRY[i0][i1] && decoded_req_is_wr && !(hwif_in.DATA_VAULT_ENTRY[i0][i1].lock_entry.swwel)) begin // SW write
                    next_c = (field_storage.DATA_VAULT_ENTRY[i0][i1].lock_entry.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
                    load_next_c = '1;
                end
                field_combo.DATA_VAULT_ENTRY[i0][i1].lock_entry.next = next_c;
                field_combo.DATA_VAULT_ENTRY[i0][i1].lock_entry.load_next = load_next_c;
            end
            always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
                if(~hwif_in.mci_pwrgood) begin
                    field_storage.DATA_VAULT_ENTRY[i0][i1].lock_entry.value <= 1'h0;
                end else if(field_combo.DATA_VAULT_ENTRY[i0][i1].lock_entry.load_next) begin
                    field_storage.DATA_VAULT_ENTRY[i0][i1].lock_entry.value <= field_combo.DATA_VAULT_ENTRY[i0][i1].lock_entry.next;
                end
            end
        end
    end
    for(genvar i0=0; i0<8; i0++) begin
        // Field: mci_reg.STICKY_LOCKABLE_SCRATCH_REG_CTRL[].lock_entry
        always_comb begin
            automatic logic [0:0] next_c = field_storage.STICKY_LOCKABLE_SCRATCH_REG_CTRL[i0].lock_entry.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.STICKY_LOCKABLE_SCRATCH_REG_CTRL[i0] && decoded_req_is_wr && !(hwif_in.STICKY_LOCKABLE_SCRATCH_REG_CTRL[i0].lock_entry.swwel)) begin // SW write
                next_c = (field_storage.STICKY_LOCKABLE_SCRATCH_REG_CTRL[i0].lock_entry.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
                load_next_c = '1;
            end
            field_combo.STICKY_LOCKABLE_SCRATCH_REG_CTRL[i0].lock_entry.next = next_c;
            field_combo.STICKY_LOCKABLE_SCRATCH_REG_CTRL[i0].lock_entry.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
            if(~hwif_in.mci_pwrgood) begin
                field_storage.STICKY_LOCKABLE_SCRATCH_REG_CTRL[i0].lock_entry.value <= 1'h0;
            end else if(field_combo.STICKY_LOCKABLE_SCRATCH_REG_CTRL[i0].lock_entry.load_next) begin
                field_storage.STICKY_LOCKABLE_SCRATCH_REG_CTRL[i0].lock_entry.value <= field_combo.STICKY_LOCKABLE_SCRATCH_REG_CTRL[i0].lock_entry.next;
            end
        end
        assign hwif_out.STICKY_LOCKABLE_SCRATCH_REG_CTRL[i0].lock_entry.value = field_storage.STICKY_LOCKABLE_SCRATCH_REG_CTRL[i0].lock_entry.value;
    end
    for(genvar i0=0; i0<8; i0++) begin
        // Field: mci_reg.STICKY_LOCKABLE_SCRATCH_REG[].data
        always_comb begin
            automatic logic [31:0] next_c = field_storage.STICKY_LOCKABLE_SCRATCH_REG[i0].data.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.STICKY_LOCKABLE_SCRATCH_REG[i0] && decoded_req_is_wr && !(hwif_in.STICKY_LOCKABLE_SCRATCH_REG[i0].data.swwel)) begin // SW write
                next_c = (field_storage.STICKY_LOCKABLE_SCRATCH_REG[i0].data.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo.STICKY_LOCKABLE_SCRATCH_REG[i0].data.next = next_c;
            field_combo.STICKY_LOCKABLE_SCRATCH_REG[i0].data.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
            if(~hwif_in.mci_pwrgood) begin
                field_storage.STICKY_LOCKABLE_SCRATCH_REG[i0].data.value <= 32'h0;
            end else if(field_combo.STICKY_LOCKABLE_SCRATCH_REG[i0].data.load_next) begin
                field_storage.STICKY_LOCKABLE_SCRATCH_REG[i0].data.value <= field_combo.STICKY_LOCKABLE_SCRATCH_REG[i0].data.next;
            end
        end
    end
    for(genvar i0=0; i0<10; i0++) begin
        // Field: mci_reg.LOCKABLE_SCRATCH_REG_CTRL[].lock_entry
        always_comb begin
            automatic logic [0:0] next_c = field_storage.LOCKABLE_SCRATCH_REG_CTRL[i0].lock_entry.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.LOCKABLE_SCRATCH_REG_CTRL[i0] && decoded_req_is_wr && !(hwif_in.LOCKABLE_SCRATCH_REG_CTRL[i0].lock_entry.swwel)) begin // SW write
                next_c = (field_storage.LOCKABLE_SCRATCH_REG_CTRL[i0].lock_entry.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
                load_next_c = '1;
            end
            field_combo.LOCKABLE_SCRATCH_REG_CTRL[i0].lock_entry.next = next_c;
            field_combo.LOCKABLE_SCRATCH_REG_CTRL[i0].lock_entry.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.mcu_rst_b) begin
            if(~hwif_in.mcu_rst_b) begin
                field_storage.LOCKABLE_SCRATCH_REG_CTRL[i0].lock_entry.value <= 1'h0;
            end else if(field_combo.LOCKABLE_SCRATCH_REG_CTRL[i0].lock_entry.load_next) begin
                field_storage.LOCKABLE_SCRATCH_REG_CTRL[i0].lock_entry.value <= field_combo.LOCKABLE_SCRATCH_REG_CTRL[i0].lock_entry.next;
            end
        end
        assign hwif_out.LOCKABLE_SCRATCH_REG_CTRL[i0].lock_entry.value = field_storage.LOCKABLE_SCRATCH_REG_CTRL[i0].lock_entry.value;
    end
    for(genvar i0=0; i0<10; i0++) begin
        // Field: mci_reg.LOCKABLE_SCRATCH_REG[].data
        always_comb begin
            automatic logic [31:0] next_c = field_storage.LOCKABLE_SCRATCH_REG[i0].data.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.LOCKABLE_SCRATCH_REG[i0] && decoded_req_is_wr && !(hwif_in.LOCKABLE_SCRATCH_REG[i0].data.swwel)) begin // SW write
                next_c = (field_storage.LOCKABLE_SCRATCH_REG[i0].data.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo.LOCKABLE_SCRATCH_REG[i0].data.next = next_c;
            field_combo.LOCKABLE_SCRATCH_REG[i0].data.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
            if(~hwif_in.mci_pwrgood) begin
                field_storage.LOCKABLE_SCRATCH_REG[i0].data.value <= 32'h0;
            end else if(field_combo.LOCKABLE_SCRATCH_REG[i0].data.load_next) begin
                field_storage.LOCKABLE_SCRATCH_REG[i0].data.value <= field_combo.LOCKABLE_SCRATCH_REG[i0].data.next;
            end
        end
    end
    for(genvar i0=0; i0<8; i0++) begin
        // Field: mci_reg.NON_STICKY_GENERIC_SCRATCH_REG[].data
        always_comb begin
            automatic logic [31:0] next_c = field_storage.NON_STICKY_GENERIC_SCRATCH_REG[i0].data.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.NON_STICKY_GENERIC_SCRATCH_REG[i0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage.NON_STICKY_GENERIC_SCRATCH_REG[i0].data.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo.NON_STICKY_GENERIC_SCRATCH_REG[i0].data.next = next_c;
            field_combo.NON_STICKY_GENERIC_SCRATCH_REG[i0].data.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
            if(~hwif_in.mci_rst_b) begin
                field_storage.NON_STICKY_GENERIC_SCRATCH_REG[i0].data.value <= 32'h0;
            end else if(field_combo.NON_STICKY_GENERIC_SCRATCH_REG[i0].data.load_next) begin
                field_storage.NON_STICKY_GENERIC_SCRATCH_REG[i0].data.value <= field_combo.NON_STICKY_GENERIC_SCRATCH_REG[i0].data.next;
            end
        end
    end
    // Field: mci_reg.intr_block_rf.global_intr_en_r.error_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.global_intr_en_r.error_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.global_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.global_intr_en_r.error_en.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.global_intr_en_r.error_en.next = next_c;
        field_combo.intr_block_rf.global_intr_en_r.error_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.global_intr_en_r.error_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.global_intr_en_r.error_en.load_next) begin
            field_storage.intr_block_rf.global_intr_en_r.error_en.value <= field_combo.intr_block_rf.global_intr_en_r.error_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.global_intr_en_r.notif_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.global_intr_en_r.notif_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.global_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.global_intr_en_r.notif_en.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.global_intr_en_r.notif_en.next = next_c;
        field_combo.intr_block_rf.global_intr_en_r.notif_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.global_intr_en_r.notif_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.global_intr_en_r.notif_en.load_next) begin
            field_storage.intr_block_rf.global_intr_en_r.notif_en.value <= field_combo.intr_block_rf.global_intr_en_r.notif_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_intr_en_r.error_wdt_timer1_timeout_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_intr_en_r.error_wdt_timer1_timeout_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error_intr_en_r.error_wdt_timer1_timeout_en.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_en_r.error_wdt_timer1_timeout_en.next = next_c;
        field_combo.intr_block_rf.error_intr_en_r.error_wdt_timer1_timeout_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error_intr_en_r.error_wdt_timer1_timeout_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_intr_en_r.error_wdt_timer1_timeout_en.load_next) begin
            field_storage.intr_block_rf.error_intr_en_r.error_wdt_timer1_timeout_en.value <= field_combo.intr_block_rf.error_intr_en_r.error_wdt_timer1_timeout_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_intr_en_r.error_wdt_timer2_timeout_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_intr_en_r.error_wdt_timer2_timeout_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error_intr_en_r.error_wdt_timer2_timeout_en.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_en_r.error_wdt_timer2_timeout_en.next = next_c;
        field_combo.intr_block_rf.error_intr_en_r.error_wdt_timer2_timeout_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error_intr_en_r.error_wdt_timer2_timeout_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_intr_en_r.error_wdt_timer2_timeout_en.load_next) begin
            field_storage.intr_block_rf.error_intr_en_r.error_wdt_timer2_timeout_en.value <= field_combo.intr_block_rf.error_intr_en_r.error_wdt_timer2_timeout_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_intr_en_r.notif_mcu_sram_ecc_cor_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_intr_en_r.notif_mcu_sram_ecc_cor_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_intr_en_r.notif_mcu_sram_ecc_cor_en.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_intr_en_r.notif_mcu_sram_ecc_cor_en.next = next_c;
        field_combo.intr_block_rf.notif_intr_en_r.notif_mcu_sram_ecc_cor_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_intr_en_r.notif_mcu_sram_ecc_cor_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_intr_en_r.notif_mcu_sram_ecc_cor_en.load_next) begin
            field_storage.intr_block_rf.notif_intr_en_r.notif_mcu_sram_ecc_cor_en.value <= field_combo.intr_block_rf.notif_intr_en_r.notif_mcu_sram_ecc_cor_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_global_intr_r.agg_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_global_intr_r.agg_sts.value;
        automatic logic load_next_c = '0;
        
        // HW Write
        next_c = hwif_out.intr_block_rf.error_internal_intr_r.intr;
        load_next_c = '1;
        field_combo.intr_block_rf.error_global_intr_r.agg_sts.next = next_c;
        field_combo.intr_block_rf.error_global_intr_r.agg_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error_global_intr_r.agg_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_global_intr_r.agg_sts.load_next) begin
            field_storage.intr_block_rf.error_global_intr_r.agg_sts.value <= field_combo.intr_block_rf.error_global_intr_r.agg_sts.next;
        end
    end
    assign hwif_out.intr_block_rf.error_global_intr_r.intr =
        |(field_storage.intr_block_rf.error_global_intr_r.agg_sts.value & field_storage.intr_block_rf.global_intr_en_r.error_en.value);
    // Field: mci_reg.intr_block_rf.notif_global_intr_r.agg_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value;
        automatic logic load_next_c = '0;
        
        // HW Write
        next_c = hwif_out.intr_block_rf.notif_internal_intr_r.intr;
        load_next_c = '1;
        field_combo.intr_block_rf.notif_global_intr_r.agg_sts.next = next_c;
        field_combo.intr_block_rf.notif_global_intr_r.agg_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_global_intr_r.agg_sts.load_next) begin
            field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value <= field_combo.intr_block_rf.notif_global_intr_r.agg_sts.next;
        end
    end
    assign hwif_out.intr_block_rf.notif_global_intr_r.intr =
        |(field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value & field_storage.intr_block_rf.global_intr_en_r.notif_en.value);
    // Field: mci_reg.intr_block_rf.error_internal_intr_r.error_wdt_timer1_timeout_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_internal_intr_r.error_wdt_timer1_timeout_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_wdt_timer1_timeout_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_wdt_timer1_timeout_sts.value | field_storage.intr_block_rf.error_intr_trig_r.error_wdt_timer1_timeout_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_wdt_timer1_timeout_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_wdt_timer1_timeout_sts.value & ~(decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_r.error_wdt_timer1_timeout_sts.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_r.error_wdt_timer1_timeout_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_wdt_timer1_timeout_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_r.error_wdt_timer1_timeout_sts.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_wdt_timer1_timeout_sts.value <= field_combo.intr_block_rf.error_internal_intr_r.error_wdt_timer1_timeout_sts.next;
        end
    end
    assign hwif_out.intr_block_rf.error_internal_intr_r.error_wdt_timer1_timeout_sts.value = field_storage.intr_block_rf.error_internal_intr_r.error_wdt_timer1_timeout_sts.value;
    // Field: mci_reg.intr_block_rf.error_internal_intr_r.error_wdt_timer2_timeout_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_internal_intr_r.error_wdt_timer2_timeout_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_wdt_timer2_timeout_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_wdt_timer2_timeout_sts.value | field_storage.intr_block_rf.error_intr_trig_r.error_wdt_timer2_timeout_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_wdt_timer2_timeout_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_wdt_timer2_timeout_sts.value & ~(decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_r.error_wdt_timer2_timeout_sts.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_r.error_wdt_timer2_timeout_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_wdt_timer2_timeout_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_r.error_wdt_timer2_timeout_sts.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_wdt_timer2_timeout_sts.value <= field_combo.intr_block_rf.error_internal_intr_r.error_wdt_timer2_timeout_sts.next;
        end
    end
    assign hwif_out.intr_block_rf.error_internal_intr_r.error_wdt_timer2_timeout_sts.value = field_storage.intr_block_rf.error_internal_intr_r.error_wdt_timer2_timeout_sts.value;
    assign hwif_out.intr_block_rf.error_internal_intr_r.intr =
        |(field_storage.intr_block_rf.error_internal_intr_r.error_wdt_timer1_timeout_sts.value & field_storage.intr_block_rf.error_intr_en_r.error_wdt_timer1_timeout_en.value)
        || |(field_storage.intr_block_rf.error_internal_intr_r.error_wdt_timer2_timeout_sts.value & field_storage.intr_block_rf.error_intr_en_r.error_wdt_timer2_timeout_en.value);
    // Field: mci_reg.intr_block_rf.notif_internal_intr_r.notif_mcu_sram_ecc_cor_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_mcu_sram_ecc_cor_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif_intr_trig_r.notif_mcu_sram_ecc_cor_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_mcu_sram_ecc_cor_sts.value | field_storage.intr_block_rf.notif_intr_trig_r.notif_mcu_sram_ecc_cor_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif_internal_intr_r.notif_mcu_sram_ecc_cor_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_mcu_sram_ecc_cor_sts.value & ~(decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_internal_intr_r.notif_mcu_sram_ecc_cor_sts.next = next_c;
        field_combo.intr_block_rf.notif_internal_intr_r.notif_mcu_sram_ecc_cor_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_internal_intr_r.notif_mcu_sram_ecc_cor_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_internal_intr_r.notif_mcu_sram_ecc_cor_sts.load_next) begin
            field_storage.intr_block_rf.notif_internal_intr_r.notif_mcu_sram_ecc_cor_sts.value <= field_combo.intr_block_rf.notif_internal_intr_r.notif_mcu_sram_ecc_cor_sts.next;
        end
    end
    assign hwif_out.intr_block_rf.notif_internal_intr_r.intr =
        |(field_storage.intr_block_rf.notif_internal_intr_r.notif_mcu_sram_ecc_cor_sts.value & field_storage.intr_block_rf.notif_intr_en_r.notif_mcu_sram_ecc_cor_en.value);
    // Field: mci_reg.intr_block_rf.error_intr_trig_r.error_wdt_timer1_timeout_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_intr_trig_r.error_wdt_timer1_timeout_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_wdt_timer1_timeout_trig.value | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_trig_r.error_wdt_timer1_timeout_trig.next = next_c;
        field_combo.intr_block_rf.error_intr_trig_r.error_wdt_timer1_timeout_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_wdt_timer1_timeout_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_intr_trig_r.error_wdt_timer1_timeout_trig.load_next) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_wdt_timer1_timeout_trig.value <= field_combo.intr_block_rf.error_intr_trig_r.error_wdt_timer1_timeout_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_intr_trig_r.error_wdt_timer2_timeout_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_intr_trig_r.error_wdt_timer2_timeout_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_wdt_timer2_timeout_trig.value | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_trig_r.error_wdt_timer2_timeout_trig.next = next_c;
        field_combo.intr_block_rf.error_intr_trig_r.error_wdt_timer2_timeout_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_wdt_timer2_timeout_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_intr_trig_r.error_wdt_timer2_timeout_trig.load_next) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_wdt_timer2_timeout_trig.value <= field_combo.intr_block_rf.error_intr_trig_r.error_wdt_timer2_timeout_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_intr_trig_r.notif_mcu_sram_ecc_cor_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_mcu_sram_ecc_cor_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_mcu_sram_ecc_cor_trig.value | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_intr_trig_r.notif_mcu_sram_ecc_cor_trig.next = next_c;
        field_combo.intr_block_rf.notif_intr_trig_r.notif_mcu_sram_ecc_cor_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_intr_trig_r.notif_mcu_sram_ecc_cor_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_intr_trig_r.notif_mcu_sram_ecc_cor_trig.load_next) begin
            field_storage.intr_block_rf.notif_intr_trig_r.notif_mcu_sram_ecc_cor_trig.value <= field_combo.intr_block_rf.notif_intr_trig_r.notif_mcu_sram_ecc_cor_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_wdt_timer1_timeout_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error_wdt_timer1_timeout_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_wdt_timer1_timeout_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error_wdt_timer1_timeout_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_wdt_timer1_timeout_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_wdt_timer1_timeout_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_wdt_timer1_timeout_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_wdt_timer1_timeout_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_wdt_timer1_timeout_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_wdt_timer1_timeout_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error_wdt_timer1_timeout_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_wdt_timer1_timeout_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_wdt_timer1_timeout_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_wdt_timer1_timeout_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_wdt_timer2_timeout_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error_wdt_timer2_timeout_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_wdt_timer2_timeout_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error_wdt_timer2_timeout_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_wdt_timer2_timeout_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_wdt_timer2_timeout_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_wdt_timer2_timeout_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_wdt_timer2_timeout_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_wdt_timer2_timeout_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_wdt_timer2_timeout_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error_wdt_timer2_timeout_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_wdt_timer2_timeout_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_wdt_timer2_timeout_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_wdt_timer2_timeout_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_wdt_timer1_timeout_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_wdt_timer1_timeout_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_wdt_timer1_timeout_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_wdt_timer2_timeout_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_wdt_timer2_timeout_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_wdt_timer2_timeout_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif_intr_trig_r.notif_mcu_sram_ecc_cor_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_mcu_sram_ecc_cor_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif_internal_intr_r.notif_mcu_sram_ecc_cor_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_incr_r.pulse.next;
        end
    end

    //--------------------------------------------------------------------------
    // Write response
    //--------------------------------------------------------------------------
    assign cpuif_wr_ack = decoded_req & decoded_req_is_wr;
    // Writes are always granted with no error response
    assign cpuif_wr_err = '0;

    //--------------------------------------------------------------------------
    // Readback
    //--------------------------------------------------------------------------

    logic readback_err;
    logic readback_done;
    logic [31:0] readback_data;
    
    // Assign readback values to a flattened array
    logic [487-1:0][31:0] readback_array;
    assign readback_array[0][3:0] = (decoded_reg_strb.CAPABILITIES && !decoded_req_is_wr) ? hwif_in.CAPABILITIES.NUM_MBOX.next : '0;
    assign readback_array[0][31:4] = '0;
    assign readback_array[1][15:0] = (decoded_reg_strb.HW_REV_ID && !decoded_req_is_wr) ? 'h1000 : '0;
    assign readback_array[1][31:16] = (decoded_reg_strb.HW_REV_ID && !decoded_req_is_wr) ? hwif_in.HW_REV_ID.SOC_STEPPING_ID.next : '0;
    for(genvar i0=0; i0<2; i0++) begin
        assign readback_array[i0*1 + 2][31:0] = (decoded_reg_strb.FW_REV_ID[i0] && !decoded_req_is_wr) ? field_storage.FW_REV_ID[i0].REV_ID.value : '0;
    end
    assign readback_array[4][0:0] = (decoded_reg_strb.HW_CONFIG && !decoded_req_is_wr) ? hwif_in.HW_CONFIG.RSVD_en.next : '0;
    assign readback_array[4][31:1] = '0;
    assign readback_array[5][31:0] = (decoded_reg_strb.BOOT_STATUS && !decoded_req_is_wr) ? field_storage.BOOT_STATUS.status.value : '0;
    assign readback_array[6][23:0] = (decoded_reg_strb.FLOW_STATUS && !decoded_req_is_wr) ? field_storage.FLOW_STATUS.status.value : '0;
    assign readback_array[6][26:24] = (decoded_reg_strb.FLOW_STATUS && !decoded_req_is_wr) ? 'h0 : '0;
    assign readback_array[6][31:27] = (decoded_reg_strb.FLOW_STATUS && !decoded_req_is_wr) ? hwif_in.FLOW_STATUS.boot_fsm_ps.next : '0;
    assign readback_array[7][0:0] = (decoded_reg_strb.RESET_REASON && !decoded_req_is_wr) ? field_storage.RESET_REASON.FW_UPD_RESET.value : '0;
    assign readback_array[7][1:1] = (decoded_reg_strb.RESET_REASON && !decoded_req_is_wr) ? field_storage.RESET_REASON.WARM_RESET.value : '0;
    assign readback_array[7][31:2] = '0;
    assign readback_array[8][0:0] = (decoded_reg_strb.HW_ERROR_FATAL && !decoded_req_is_wr) ? field_storage.HW_ERROR_FATAL.mcu_sram_ecc_unc.value : '0;
    assign readback_array[8][1:1] = (decoded_reg_strb.HW_ERROR_FATAL && !decoded_req_is_wr) ? field_storage.HW_ERROR_FATAL.nmi_pin.value : '0;
    assign readback_array[8][31:2] = '0;
    assign readback_array[9][0:0] = (decoded_reg_strb.HW_ERROR_NON_FATAL && !decoded_req_is_wr) ? field_storage.HW_ERROR_NON_FATAL.RSVD.value : '0;
    assign readback_array[9][31:1] = '0;
    assign readback_array[10][31:0] = (decoded_reg_strb.FW_ERROR_FATAL && !decoded_req_is_wr) ? field_storage.FW_ERROR_FATAL.error_code.value : '0;
    assign readback_array[11][31:0] = (decoded_reg_strb.FW_ERROR_NON_FATAL && !decoded_req_is_wr) ? field_storage.FW_ERROR_NON_FATAL.error_code.value : '0;
    assign readback_array[12][31:0] = (decoded_reg_strb.HW_ERROR_ENC && !decoded_req_is_wr) ? field_storage.HW_ERROR_ENC.error_code.value : '0;
    assign readback_array[13][31:0] = (decoded_reg_strb.FW_ERROR_ENC && !decoded_req_is_wr) ? field_storage.FW_ERROR_ENC.error_code.value : '0;
    for(genvar i0=0; i0<8; i0++) begin
        assign readback_array[i0*1 + 14][31:0] = (decoded_reg_strb.FW_EXTENDED_ERROR_INFO[i0] && !decoded_req_is_wr) ? field_storage.FW_EXTENDED_ERROR_INFO[i0].error_info.value : '0;
    end
    assign readback_array[22][0:0] = (decoded_reg_strb.WDT_TIMER1_EN && !decoded_req_is_wr) ? field_storage.WDT_TIMER1_EN.timer1_en.value : '0;
    assign readback_array[22][31:1] = '0;
    assign readback_array[23][0:0] = (decoded_reg_strb.WDT_TIMER1_CTRL && !decoded_req_is_wr) ? field_storage.WDT_TIMER1_CTRL.timer1_restart.value : '0;
    assign readback_array[23][31:1] = '0;
    for(genvar i0=0; i0<2; i0++) begin
        assign readback_array[i0*1 + 24][31:0] = (decoded_reg_strb.WDT_TIMER1_TIMEOUT_PERIOD[i0] && !decoded_req_is_wr) ? field_storage.WDT_TIMER1_TIMEOUT_PERIOD[i0].timer1_timeout_period.value : '0;
    end
    assign readback_array[26][0:0] = (decoded_reg_strb.WDT_TIMER2_EN && !decoded_req_is_wr) ? field_storage.WDT_TIMER2_EN.timer2_en.value : '0;
    assign readback_array[26][31:1] = '0;
    assign readback_array[27][0:0] = (decoded_reg_strb.WDT_TIMER2_CTRL && !decoded_req_is_wr) ? field_storage.WDT_TIMER2_CTRL.timer2_restart.value : '0;
    assign readback_array[27][31:1] = '0;
    for(genvar i0=0; i0<2; i0++) begin
        assign readback_array[i0*1 + 28][31:0] = (decoded_reg_strb.WDT_TIMER2_TIMEOUT_PERIOD[i0] && !decoded_req_is_wr) ? field_storage.WDT_TIMER2_TIMEOUT_PERIOD[i0].timer2_timeout_period.value : '0;
    end
    assign readback_array[30][0:0] = (decoded_reg_strb.WDT_STATUS && !decoded_req_is_wr) ? field_storage.WDT_STATUS.t1_timeout.value : '0;
    assign readback_array[30][1:1] = (decoded_reg_strb.WDT_STATUS && !decoded_req_is_wr) ? field_storage.WDT_STATUS.t2_timeout.value : '0;
    assign readback_array[30][31:2] = '0;
    for(genvar i0=0; i0<2; i0++) begin
        assign readback_array[i0*1 + 31][31:0] = (decoded_reg_strb.WDT_CFG[i0] && !decoded_req_is_wr) ? field_storage.WDT_CFG[i0].TIMEOUT.value : '0;
    end
    assign readback_array[33][31:0] = (decoded_reg_strb.MCU_TIMER_CONFIG && !decoded_req_is_wr) ? field_storage.MCU_TIMER_CONFIG.clk_period.value : '0;
    assign readback_array[34][0:0] = (decoded_reg_strb.MCU_CLK_GATING_EN && !decoded_req_is_wr) ? field_storage.MCU_CLK_GATING_EN.FIXME.value : '0;
    assign readback_array[34][31:1] = '0;
    assign readback_array[35][31:0] = (decoded_reg_strb.MCU_RV_MTIME_L && !decoded_req_is_wr) ? field_storage.MCU_RV_MTIME_L.count_l.value : '0;
    assign readback_array[36][31:0] = (decoded_reg_strb.MCU_RV_MTIME_H && !decoded_req_is_wr) ? field_storage.MCU_RV_MTIME_H.count_h.value : '0;
    assign readback_array[37][31:0] = (decoded_reg_strb.MCU_RV_MTIMECMP_L && !decoded_req_is_wr) ? field_storage.MCU_RV_MTIMECMP_L.compare_l.value : '0;
    assign readback_array[38][31:0] = (decoded_reg_strb.MCU_RV_MTIMECMP_H && !decoded_req_is_wr) ? field_storage.MCU_RV_MTIMECMP_H.compare_h.value : '0;
    assign readback_array[39][0:0] = (decoded_reg_strb.RESET_REQUEST && !decoded_req_is_wr) ? field_storage.RESET_REQUEST.req.value : '0;
    assign readback_array[39][1:1] = (decoded_reg_strb.RESET_REQUEST && !decoded_req_is_wr) ? field_storage.RESET_REQUEST.clr.value : '0;
    assign readback_array[39][31:2] = '0;
    assign readback_array[40][0:0] = (decoded_reg_strb.RESET_ACK && !decoded_req_is_wr) ? field_storage.RESET_ACK.ack.value : '0;
    assign readback_array[40][31:1] = '0;
    assign readback_array[41][0:0] = (decoded_reg_strb.CALIPTRA_BOOT_GO && !decoded_req_is_wr) ? field_storage.CALIPTRA_BOOT_GO.go.value : '0;
    assign readback_array[41][31:1] = '0;
    assign readback_array[42][0:0] = (decoded_reg_strb.CALIPTRA_AXI_ID && !decoded_req_is_wr) ? hwif_in.CALIPTRA_AXI_ID.id.next : '0;
    assign readback_array[42][31:1] = '0;
    assign readback_array[43][15:0] = (decoded_reg_strb.FW_SRAM_EXEC_REGION_SIZE && !decoded_req_is_wr) ? field_storage.FW_SRAM_EXEC_REGION_SIZE.size.value : '0;
    assign readback_array[43][31:16] = '0;
    assign readback_array[44][0:0] = (decoded_reg_strb.RUNTIME_LOCK && !decoded_req_is_wr) ? field_storage.RUNTIME_LOCK.lock.value : '0;
    assign readback_array[44][31:1] = '0;
    for(genvar i0=0; i0<5; i0++) begin
        assign readback_array[i0*1 + 45][31:0] = (decoded_reg_strb.MBOX0_VALID_AXI_ID[i0] && !decoded_req_is_wr) ? field_storage.MBOX0_VALID_AXI_ID[i0].id.value : '0;
    end
    for(genvar i0=0; i0<5; i0++) begin
        assign readback_array[i0*1 + 50][0:0] = (decoded_reg_strb.MBOX0_VALID_AXI_ID_LOCK[i0] && !decoded_req_is_wr) ? field_storage.MBOX0_VALID_AXI_ID_LOCK[i0].lock.value : '0;
        assign readback_array[i0*1 + 50][31:1] = '0;
    end
    for(genvar i0=0; i0<5; i0++) begin
        assign readback_array[i0*1 + 55][31:0] = (decoded_reg_strb.MBOX1_VALID_AXI_ID[i0] && !decoded_req_is_wr) ? field_storage.MBOX1_VALID_AXI_ID[i0].id.value : '0;
    end
    for(genvar i0=0; i0<5; i0++) begin
        assign readback_array[i0*1 + 60][0:0] = (decoded_reg_strb.MBOX1_VALID_AXI_ID_LOCK[i0] && !decoded_req_is_wr) ? field_storage.MBOX1_VALID_AXI_ID_LOCK[i0].lock.value : '0;
        assign readback_array[i0*1 + 60][31:1] = '0;
    end
    for(genvar i0=0; i0<2; i0++) begin
        assign readback_array[i0*1 + 65][31:0] = (decoded_reg_strb.GENERIC_INPUT_WIRES[i0] && !decoded_req_is_wr) ? hwif_in.GENERIC_INPUT_WIRES[i0].wires.next : '0;
    end
    for(genvar i0=0; i0<2; i0++) begin
        assign readback_array[i0*1 + 67][31:0] = (decoded_reg_strb.GENERIC_OUTPUT_WIRES[i0] && !decoded_req_is_wr) ? field_storage.GENERIC_OUTPUT_WIRES[i0].wires.value : '0;
    end
    assign readback_array[69][0:0] = (decoded_reg_strb.DEBUG_IN && !decoded_req_is_wr) ? field_storage.DEBUG_IN.FIXME.value : '0;
    assign readback_array[69][31:1] = '0;
    assign readback_array[70][0:0] = (decoded_reg_strb.DEBUG_OUT && !decoded_req_is_wr) ? field_storage.DEBUG_OUT.FIXME.value : '0;
    assign readback_array[70][31:1] = '0;
    assign readback_array[71][0:0] = (decoded_reg_strb.FUSE_WR_DONE && !decoded_req_is_wr) ? field_storage.FUSE_WR_DONE.done.value : '0;
    assign readback_array[71][31:1] = '0;
    for(genvar i0=0; i0<8; i0++) begin
        for(genvar i1=0; i1<12; i1++) begin
            assign readback_array[i0*12 + i1*1 + 72][31:0] = (decoded_reg_strb.PROD_DEBUG_UNLOCK_PK_HASH_REG[i0][i1] && !decoded_req_is_wr) ? field_storage.PROD_DEBUG_UNLOCK_PK_HASH_REG[i0][i1].hash.value : '0;
        end
    end
    for(genvar i0=0; i0<10; i0++) begin
        assign readback_array[i0*1 + 168][0:0] = (decoded_reg_strb.STICKY_DATA_VAULT_CTRL[i0] && !decoded_req_is_wr) ? field_storage.STICKY_DATA_VAULT_CTRL[i0].lock_entry.value : '0;
        assign readback_array[i0*1 + 168][31:1] = '0;
    end
    for(genvar i0=0; i0<10; i0++) begin
        for(genvar i1=0; i1<12; i1++) begin
            assign readback_array[i0*12 + i1*1 + 178][0:0] = (decoded_reg_strb.STICKY_DATA_VAULT_ENTRY[i0][i1] && !decoded_req_is_wr) ? field_storage.STICKY_DATA_VAULT_ENTRY[i0][i1].lock_entry.value : '0;
            assign readback_array[i0*12 + i1*1 + 178][31:1] = '0;
        end
    end
    for(genvar i0=0; i0<10; i0++) begin
        assign readback_array[i0*1 + 298][0:0] = (decoded_reg_strb.DATA_VAULT_CTRL[i0] && !decoded_req_is_wr) ? field_storage.DATA_VAULT_CTRL[i0].lock_entry.value : '0;
        assign readback_array[i0*1 + 298][31:1] = '0;
    end
    for(genvar i0=0; i0<10; i0++) begin
        for(genvar i1=0; i1<12; i1++) begin
            assign readback_array[i0*12 + i1*1 + 308][0:0] = (decoded_reg_strb.DATA_VAULT_ENTRY[i0][i1] && !decoded_req_is_wr) ? field_storage.DATA_VAULT_ENTRY[i0][i1].lock_entry.value : '0;
            assign readback_array[i0*12 + i1*1 + 308][31:1] = '0;
        end
    end
    for(genvar i0=0; i0<8; i0++) begin
        assign readback_array[i0*1 + 428][0:0] = (decoded_reg_strb.STICKY_LOCKABLE_SCRATCH_REG_CTRL[i0] && !decoded_req_is_wr) ? field_storage.STICKY_LOCKABLE_SCRATCH_REG_CTRL[i0].lock_entry.value : '0;
        assign readback_array[i0*1 + 428][31:1] = '0;
    end
    for(genvar i0=0; i0<8; i0++) begin
        assign readback_array[i0*1 + 436][31:0] = (decoded_reg_strb.STICKY_LOCKABLE_SCRATCH_REG[i0] && !decoded_req_is_wr) ? field_storage.STICKY_LOCKABLE_SCRATCH_REG[i0].data.value : '0;
    end
    for(genvar i0=0; i0<10; i0++) begin
        assign readback_array[i0*1 + 444][0:0] = (decoded_reg_strb.LOCKABLE_SCRATCH_REG_CTRL[i0] && !decoded_req_is_wr) ? field_storage.LOCKABLE_SCRATCH_REG_CTRL[i0].lock_entry.value : '0;
        assign readback_array[i0*1 + 444][31:1] = '0;
    end
    for(genvar i0=0; i0<10; i0++) begin
        assign readback_array[i0*1 + 454][31:0] = (decoded_reg_strb.LOCKABLE_SCRATCH_REG[i0] && !decoded_req_is_wr) ? field_storage.LOCKABLE_SCRATCH_REG[i0].data.value : '0;
    end
    for(genvar i0=0; i0<8; i0++) begin
        assign readback_array[i0*1 + 464][31:0] = (decoded_reg_strb.NON_STICKY_GENERIC_SCRATCH_REG[i0] && !decoded_req_is_wr) ? field_storage.NON_STICKY_GENERIC_SCRATCH_REG[i0].data.value : '0;
    end
    assign readback_array[472][0:0] = (decoded_reg_strb.intr_block_rf.global_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.global_intr_en_r.error_en.value : '0;
    assign readback_array[472][1:1] = (decoded_reg_strb.intr_block_rf.global_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.global_intr_en_r.notif_en.value : '0;
    assign readback_array[472][31:2] = '0;
    assign readback_array[473][0:0] = (decoded_reg_strb.intr_block_rf.error_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_en_r.error_wdt_timer1_timeout_en.value : '0;
    assign readback_array[473][1:1] = (decoded_reg_strb.intr_block_rf.error_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_en_r.error_wdt_timer2_timeout_en.value : '0;
    assign readback_array[473][31:2] = '0;
    assign readback_array[474][0:0] = (decoded_reg_strb.intr_block_rf.notif_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_intr_en_r.notif_mcu_sram_ecc_cor_en.value : '0;
    assign readback_array[474][31:1] = '0;
    assign readback_array[475][0:0] = (decoded_reg_strb.intr_block_rf.error_global_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_global_intr_r.agg_sts.value : '0;
    assign readback_array[475][31:1] = '0;
    assign readback_array[476][0:0] = (decoded_reg_strb.intr_block_rf.notif_global_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value : '0;
    assign readback_array[476][31:1] = '0;
    assign readback_array[477][0:0] = (decoded_reg_strb.intr_block_rf.error_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_r.error_wdt_timer1_timeout_sts.value : '0;
    assign readback_array[477][1:1] = (decoded_reg_strb.intr_block_rf.error_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_r.error_wdt_timer2_timeout_sts.value : '0;
    assign readback_array[477][31:2] = '0;
    assign readback_array[478][0:0] = (decoded_reg_strb.intr_block_rf.notif_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_internal_intr_r.notif_mcu_sram_ecc_cor_sts.value : '0;
    assign readback_array[478][31:1] = '0;
    assign readback_array[479][0:0] = (decoded_reg_strb.intr_block_rf.error_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_trig_r.error_wdt_timer1_timeout_trig.value : '0;
    assign readback_array[479][1:1] = (decoded_reg_strb.intr_block_rf.error_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_trig_r.error_wdt_timer2_timeout_trig.value : '0;
    assign readback_array[479][31:2] = '0;
    assign readback_array[480][0:0] = (decoded_reg_strb.intr_block_rf.notif_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_intr_trig_r.notif_mcu_sram_ecc_cor_trig.value : '0;
    assign readback_array[480][31:1] = '0;
    assign readback_array[481][31:0] = (decoded_reg_strb.intr_block_rf.error_wdt_timer1_timeout_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_wdt_timer1_timeout_intr_count_r.cnt.value : '0;
    assign readback_array[482][31:0] = (decoded_reg_strb.intr_block_rf.error_wdt_timer2_timeout_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_wdt_timer2_timeout_intr_count_r.cnt.value : '0;
    assign readback_array[483][31:0] = (decoded_reg_strb.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_r.cnt.value : '0;
    assign readback_array[484][0:0] = (decoded_reg_strb.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r.pulse.value : '0;
    assign readback_array[484][31:1] = '0;
    assign readback_array[485][0:0] = (decoded_reg_strb.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r.pulse.value : '0;
    assign readback_array[485][31:1] = '0;
    assign readback_array[486][0:0] = (decoded_reg_strb.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_incr_r.pulse.value : '0;
    assign readback_array[486][31:1] = '0;

    // Reduce the array
    always_comb begin
        automatic logic [31:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<487; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end

    assign cpuif_rd_ack = readback_done;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;

`CALIPTRA_ASSERT_KNOWN(ERR_HWIF_IN, hwif_in, clk, !hwif_in.mci_pwrgood)

endmodule