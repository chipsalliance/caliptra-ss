// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module mci_reg (
        input wire clk,
        input wire rst,

        input wire s_cpuif_req,
        input wire s_cpuif_req_is_wr,
        input wire [12:0] s_cpuif_addr,
        input wire [31:0] s_cpuif_wr_data,
        input wire [31:0] s_cpuif_wr_biten,
        output wire s_cpuif_req_stall_wr,
        output wire s_cpuif_req_stall_rd,
        output wire s_cpuif_rd_ack,
        output wire s_cpuif_rd_err,
        output wire [31:0] s_cpuif_rd_data,
        output wire s_cpuif_wr_ack,
        output wire s_cpuif_wr_err,

        input mci_reg_pkg::mci_reg__in_t hwif_in,
        output mci_reg_pkg::mci_reg__out_t hwif_out
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [12:0] cpuif_addr;
    logic [31:0] cpuif_wr_data;
    logic [31:0] cpuif_wr_biten;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [31:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;

    assign cpuif_req = s_cpuif_req;
    assign cpuif_req_is_wr = s_cpuif_req_is_wr;
    assign cpuif_addr = s_cpuif_addr;
    assign cpuif_wr_data = s_cpuif_wr_data;
    assign cpuif_wr_biten = s_cpuif_wr_biten;
    assign s_cpuif_req_stall_wr = cpuif_req_stall_wr;
    assign s_cpuif_req_stall_rd = cpuif_req_stall_rd;
    assign s_cpuif_rd_ack = cpuif_rd_ack;
    assign s_cpuif_rd_err = cpuif_rd_err;
    assign s_cpuif_rd_data = cpuif_rd_data;
    assign s_cpuif_wr_ack = cpuif_wr_ack;
    assign s_cpuif_wr_err = cpuif_wr_err;

    logic cpuif_req_masked;

    // Read & write latencies are balanced. Stalls not required
    assign cpuif_req_stall_rd = '0;
    assign cpuif_req_stall_wr = '0;
    assign cpuif_req_masked = cpuif_req
                            & !(!cpuif_req_is_wr & cpuif_req_stall_rd)
                            & !(cpuif_req_is_wr & cpuif_req_stall_wr);

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    typedef struct packed{
        logic CAPABILITIES;
        logic HW_REV_ID;
        logic [2-1:0]FW_REV_ID;
        logic HW_CONFIG;
        logic BOOT_STATUS;
        logic FLOW_STATUS;
        logic RESET_REASON;
        logic RESET_STATUS;
        logic HW_ERROR_FATAL;
        logic AGG_ERROR_FATAL;
        logic HW_ERROR_NON_FATAL;
        logic AGG_ERROR_NON_FATAL;
        logic FW_ERROR_FATAL;
        logic FW_ERROR_NON_FATAL;
        logic HW_ERROR_ENC;
        logic FW_ERROR_ENC;
        logic [8-1:0]FW_EXTENDED_ERROR_INFO;
        logic internal_hw_error_fatal_mask;
        logic internal_hw_error_non_fatal_mask;
        logic internal_agg_error_fatal_mask;
        logic internal_agg_error_non_fatal_mask;
        logic internal_fw_error_fatal_mask;
        logic internal_fw_error_non_fatal_mask;
        logic WDT_TIMER1_EN;
        logic WDT_TIMER1_CTRL;
        logic [2-1:0]WDT_TIMER1_TIMEOUT_PERIOD;
        logic WDT_TIMER2_EN;
        logic WDT_TIMER2_CTRL;
        logic [2-1:0]WDT_TIMER2_TIMEOUT_PERIOD;
        logic WDT_STATUS;
        logic [2-1:0]WDT_CFG;
        logic MCU_TIMER_CONFIG;
        logic MCU_RV_MTIME_L;
        logic MCU_RV_MTIME_H;
        logic MCU_RV_MTIMECMP_L;
        logic MCU_RV_MTIMECMP_H;
        logic RESET_REQUEST;
        logic CALIPTRA_BOOT_GO;
        logic FW_SRAM_EXEC_REGION_SIZE;
        logic MCU_NMI_VECTOR;
        logic MCU_RESET_VECTOR;
        logic [5-1:0]MBOX0_VALID_AXI_ID;
        logic [5-1:0]MBOX0_VALID_AXI_ID_LOCK;
        logic [5-1:0]MBOX1_VALID_AXI_ID;
        logic [5-1:0]MBOX1_VALID_AXI_ID_LOCK;
        logic [2-1:0]GENERIC_INPUT_WIRES;
        logic [2-1:0]GENERIC_OUTPUT_WIRES;
        logic DEBUG_IN;
        logic DEBUG_OUT;
        logic FUSE_WR_DONE;
        logic [8-1:0][12-1:0]PROD_DEBUG_UNLOCK_PK_HASH_REG;
        logic [10-1:0]STICKY_DATA_VAULT_CTRL;
        logic [10-1:0][12-1:0]STICKY_DATA_VAULT_ENTRY;
        logic [10-1:0]DATA_VAULT_CTRL;
        logic [10-1:0][12-1:0]DATA_VAULT_ENTRY;
        logic [8-1:0]STICKY_LOCKABLE_SCRATCH_REG_CTRL;
        logic [8-1:0]STICKY_LOCKABLE_SCRATCH_REG;
        logic [10-1:0]LOCKABLE_SCRATCH_REG_CTRL;
        logic [10-1:0]LOCKABLE_SCRATCH_REG;
        logic [8-1:0]NON_STICKY_GENERIC_SCRATCH_REG;
        struct packed{
            logic global_intr_en_r;
            logic error0_intr_en_r;
            logic error1_intr_en_r;
            logic notif0_intr_en_r;
            logic notif1_intr_en_r;
            logic error_global_intr_r;
            logic notif_global_intr_r;
            logic error0_internal_intr_r;
            logic error1_internal_intr_r;
            logic notif0_internal_intr_r;
            logic notif1_internal_intr_r;
            logic error0_intr_trig_r;
            logic error1_intr_trig_r;
            logic notif0_intr_trig_r;
            logic notif1_intr_trig_r;
            logic error_wdt_timer1_timeout_intr_count_r;
            logic error_wdt_timer2_timeout_intr_count_r;
            logic error_agg_error_fatal0_intr_count_r;
            logic error_agg_error_fatal1_intr_count_r;
            logic error_agg_error_fatal2_intr_count_r;
            logic error_agg_error_fatal3_intr_count_r;
            logic error_agg_error_fatal4_intr_count_r;
            logic error_agg_error_fatal5_intr_count_r;
            logic error_agg_error_fatal6_intr_count_r;
            logic error_agg_error_fatal7_intr_count_r;
            logic error_agg_error_fatal8_intr_count_r;
            logic error_agg_error_fatal9_intr_count_r;
            logic error_agg_error_fatal10_intr_count_r;
            logic error_agg_error_fatal11_intr_count_r;
            logic error_agg_error_fatal12_intr_count_r;
            logic error_agg_error_fatal13_intr_count_r;
            logic error_agg_error_fatal14_intr_count_r;
            logic error_agg_error_fatal15_intr_count_r;
            logic error_agg_error_fatal16_intr_count_r;
            logic error_agg_error_fatal17_intr_count_r;
            logic error_agg_error_fatal18_intr_count_r;
            logic error_agg_error_fatal19_intr_count_r;
            logic error_agg_error_fatal20_intr_count_r;
            logic error_agg_error_fatal21_intr_count_r;
            logic error_agg_error_fatal22_intr_count_r;
            logic error_agg_error_fatal23_intr_count_r;
            logic error_agg_error_fatal24_intr_count_r;
            logic error_agg_error_fatal25_intr_count_r;
            logic error_agg_error_fatal26_intr_count_r;
            logic error_agg_error_fatal27_intr_count_r;
            logic error_agg_error_fatal28_intr_count_r;
            logic error_agg_error_fatal29_intr_count_r;
            logic error_agg_error_fatal30_intr_count_r;
            logic error_agg_error_fatal31_intr_count_r;
            logic notif_mcu_sram_ecc_cor_intr_count_r;
            logic notif_clpra_mcu_reset_req_intr_count_r;
            logic notif_agg_error_non_fatal0_intr_count_r;
            logic notif_agg_error_non_fatal1_intr_count_r;
            logic notif_agg_error_non_fatal2_intr_count_r;
            logic notif_agg_error_non_fatal3_intr_count_r;
            logic notif_agg_error_non_fatal4_intr_count_r;
            logic notif_agg_error_non_fatal5_intr_count_r;
            logic notif_agg_error_non_fatal6_intr_count_r;
            logic notif_agg_error_non_fatal7_intr_count_r;
            logic notif_agg_error_non_fatal8_intr_count_r;
            logic notif_agg_error_non_fatal9_intr_count_r;
            logic notif_agg_error_non_fatal10_intr_count_r;
            logic notif_agg_error_non_fatal11_intr_count_r;
            logic notif_agg_error_non_fatal12_intr_count_r;
            logic notif_agg_error_non_fatal13_intr_count_r;
            logic notif_agg_error_non_fatal14_intr_count_r;
            logic notif_agg_error_non_fatal15_intr_count_r;
            logic notif_agg_error_non_fatal16_intr_count_r;
            logic notif_agg_error_non_fatal17_intr_count_r;
            logic notif_agg_error_non_fatal18_intr_count_r;
            logic notif_agg_error_non_fatal19_intr_count_r;
            logic notif_agg_error_non_fatal20_intr_count_r;
            logic notif_agg_error_non_fatal21_intr_count_r;
            logic notif_agg_error_non_fatal22_intr_count_r;
            logic notif_agg_error_non_fatal23_intr_count_r;
            logic notif_agg_error_non_fatal24_intr_count_r;
            logic notif_agg_error_non_fatal25_intr_count_r;
            logic notif_agg_error_non_fatal26_intr_count_r;
            logic notif_agg_error_non_fatal27_intr_count_r;
            logic notif_agg_error_non_fatal28_intr_count_r;
            logic notif_agg_error_non_fatal29_intr_count_r;
            logic notif_agg_error_non_fatal30_intr_count_r;
            logic notif_agg_error_non_fatal31_intr_count_r;
            logic error_wdt_timer1_timeout_intr_count_incr_r;
            logic error_wdt_timer2_timeout_intr_count_incr_r;
            logic error_agg_error_fatal0_intr_count_incr_r;
            logic error_agg_error_fatal1_intr_count_incr_r;
            logic error_agg_error_fatal2_intr_count_incr_r;
            logic error_agg_error_fatal3_intr_count_incr_r;
            logic error_agg_error_fatal4_intr_count_incr_r;
            logic error_agg_error_fatal5_intr_count_incr_r;
            logic error_agg_error_fatal6_intr_count_incr_r;
            logic error_agg_error_fatal7_intr_count_incr_r;
            logic error_agg_error_fatal8_intr_count_incr_r;
            logic error_agg_error_fatal9_intr_count_incr_r;
            logic error_agg_error_fatal10_intr_count_incr_r;
            logic error_agg_error_fatal11_intr_count_incr_r;
            logic error_agg_error_fatal12_intr_count_incr_r;
            logic error_agg_error_fatal13_intr_count_incr_r;
            logic error_agg_error_fatal14_intr_count_incr_r;
            logic error_agg_error_fatal15_intr_count_incr_r;
            logic error_agg_error_fatal16_intr_count_incr_r;
            logic error_agg_error_fatal17_intr_count_incr_r;
            logic error_agg_error_fatal18_intr_count_incr_r;
            logic error_agg_error_fatal19_intr_count_incr_r;
            logic error_agg_error_fatal20_intr_count_incr_r;
            logic error_agg_error_fatal21_intr_count_incr_r;
            logic error_agg_error_fatal22_intr_count_incr_r;
            logic error_agg_error_fatal23_intr_count_incr_r;
            logic error_agg_error_fatal24_intr_count_incr_r;
            logic error_agg_error_fatal25_intr_count_incr_r;
            logic error_agg_error_fatal26_intr_count_incr_r;
            logic error_agg_error_fatal27_intr_count_incr_r;
            logic error_agg_error_fatal28_intr_count_incr_r;
            logic error_agg_error_fatal29_intr_count_incr_r;
            logic error_agg_error_fatal30_intr_count_incr_r;
            logic error_agg_error_fatal31_intr_count_incr_r;
            logic notif_mcu_sram_ecc_cor_intr_count_incr_r;
            logic notif_clpra_mcu_reset_req_intr_count_incr_r;
            logic notif_agg_error_non_fatal0_intr_count_incr_r;
            logic notif_agg_error_non_fatal1_intr_count_incr_r;
            logic notif_agg_error_non_fatal2_intr_count_incr_r;
            logic notif_agg_error_non_fatal3_intr_count_incr_r;
            logic notif_agg_error_non_fatal4_intr_count_incr_r;
            logic notif_agg_error_non_fatal5_intr_count_incr_r;
            logic notif_agg_error_non_fatal6_intr_count_incr_r;
            logic notif_agg_error_non_fatal7_intr_count_incr_r;
            logic notif_agg_error_non_fatal8_intr_count_incr_r;
            logic notif_agg_error_non_fatal9_intr_count_incr_r;
            logic notif_agg_error_non_fatal10_intr_count_incr_r;
            logic notif_agg_error_non_fatal11_intr_count_incr_r;
            logic notif_agg_error_non_fatal12_intr_count_incr_r;
            logic notif_agg_error_non_fatal13_intr_count_incr_r;
            logic notif_agg_error_non_fatal14_intr_count_incr_r;
            logic notif_agg_error_non_fatal15_intr_count_incr_r;
            logic notif_agg_error_non_fatal16_intr_count_incr_r;
            logic notif_agg_error_non_fatal17_intr_count_incr_r;
            logic notif_agg_error_non_fatal18_intr_count_incr_r;
            logic notif_agg_error_non_fatal19_intr_count_incr_r;
            logic notif_agg_error_non_fatal20_intr_count_incr_r;
            logic notif_agg_error_non_fatal21_intr_count_incr_r;
            logic notif_agg_error_non_fatal22_intr_count_incr_r;
            logic notif_agg_error_non_fatal23_intr_count_incr_r;
            logic notif_agg_error_non_fatal24_intr_count_incr_r;
            logic notif_agg_error_non_fatal25_intr_count_incr_r;
            logic notif_agg_error_non_fatal26_intr_count_incr_r;
            logic notif_agg_error_non_fatal27_intr_count_incr_r;
            logic notif_agg_error_non_fatal28_intr_count_incr_r;
            logic notif_agg_error_non_fatal29_intr_count_incr_r;
            logic notif_agg_error_non_fatal30_intr_count_incr_r;
            logic notif_agg_error_non_fatal31_intr_count_incr_r;
        } intr_block_rf;
    } decoded_reg_strb_t;
    decoded_reg_strb_t decoded_reg_strb;
    logic decoded_req;
    logic decoded_req_is_wr;
    logic [31:0] decoded_wr_data;
    logic [31:0] decoded_wr_biten;

    always_comb begin
        decoded_reg_strb.CAPABILITIES = cpuif_req_masked & (cpuif_addr == 13'h0);
        decoded_reg_strb.HW_REV_ID = cpuif_req_masked & (cpuif_addr == 13'h4);
        for(int i0=0; i0<2; i0++) begin
            decoded_reg_strb.FW_REV_ID[i0] = cpuif_req_masked & (cpuif_addr == 13'h8 + i0*13'h4);
        end
        decoded_reg_strb.HW_CONFIG = cpuif_req_masked & (cpuif_addr == 13'h10);
        decoded_reg_strb.BOOT_STATUS = cpuif_req_masked & (cpuif_addr == 13'h20);
        decoded_reg_strb.FLOW_STATUS = cpuif_req_masked & (cpuif_addr == 13'h24);
        decoded_reg_strb.RESET_REASON = cpuif_req_masked & (cpuif_addr == 13'h28);
        decoded_reg_strb.RESET_STATUS = cpuif_req_masked & (cpuif_addr == 13'h2c);
        decoded_reg_strb.HW_ERROR_FATAL = cpuif_req_masked & (cpuif_addr == 13'h40);
        decoded_reg_strb.AGG_ERROR_FATAL = cpuif_req_masked & (cpuif_addr == 13'h44);
        decoded_reg_strb.HW_ERROR_NON_FATAL = cpuif_req_masked & (cpuif_addr == 13'h48);
        decoded_reg_strb.AGG_ERROR_NON_FATAL = cpuif_req_masked & (cpuif_addr == 13'h4c);
        decoded_reg_strb.FW_ERROR_FATAL = cpuif_req_masked & (cpuif_addr == 13'h50);
        decoded_reg_strb.FW_ERROR_NON_FATAL = cpuif_req_masked & (cpuif_addr == 13'h54);
        decoded_reg_strb.HW_ERROR_ENC = cpuif_req_masked & (cpuif_addr == 13'h58);
        decoded_reg_strb.FW_ERROR_ENC = cpuif_req_masked & (cpuif_addr == 13'h5c);
        for(int i0=0; i0<8; i0++) begin
            decoded_reg_strb.FW_EXTENDED_ERROR_INFO[i0] = cpuif_req_masked & (cpuif_addr == 13'h60 + i0*13'h4);
        end
        decoded_reg_strb.internal_hw_error_fatal_mask = cpuif_req_masked & (cpuif_addr == 13'h80);
        decoded_reg_strb.internal_hw_error_non_fatal_mask = cpuif_req_masked & (cpuif_addr == 13'h84);
        decoded_reg_strb.internal_agg_error_fatal_mask = cpuif_req_masked & (cpuif_addr == 13'h88);
        decoded_reg_strb.internal_agg_error_non_fatal_mask = cpuif_req_masked & (cpuif_addr == 13'h8c);
        decoded_reg_strb.internal_fw_error_fatal_mask = cpuif_req_masked & (cpuif_addr == 13'h90);
        decoded_reg_strb.internal_fw_error_non_fatal_mask = cpuif_req_masked & (cpuif_addr == 13'h94);
        decoded_reg_strb.WDT_TIMER1_EN = cpuif_req_masked & (cpuif_addr == 13'ha0);
        decoded_reg_strb.WDT_TIMER1_CTRL = cpuif_req_masked & (cpuif_addr == 13'ha4);
        for(int i0=0; i0<2; i0++) begin
            decoded_reg_strb.WDT_TIMER1_TIMEOUT_PERIOD[i0] = cpuif_req_masked & (cpuif_addr == 13'ha8 + i0*13'h4);
        end
        decoded_reg_strb.WDT_TIMER2_EN = cpuif_req_masked & (cpuif_addr == 13'hb0);
        decoded_reg_strb.WDT_TIMER2_CTRL = cpuif_req_masked & (cpuif_addr == 13'hb4);
        for(int i0=0; i0<2; i0++) begin
            decoded_reg_strb.WDT_TIMER2_TIMEOUT_PERIOD[i0] = cpuif_req_masked & (cpuif_addr == 13'hb8 + i0*13'h4);
        end
        decoded_reg_strb.WDT_STATUS = cpuif_req_masked & (cpuif_addr == 13'hc0);
        for(int i0=0; i0<2; i0++) begin
            decoded_reg_strb.WDT_CFG[i0] = cpuif_req_masked & (cpuif_addr == 13'hd0 + i0*13'h4);
        end
        decoded_reg_strb.MCU_TIMER_CONFIG = cpuif_req_masked & (cpuif_addr == 13'he0);
        decoded_reg_strb.MCU_RV_MTIME_L = cpuif_req_masked & (cpuif_addr == 13'he4);
        decoded_reg_strb.MCU_RV_MTIME_H = cpuif_req_masked & (cpuif_addr == 13'he8);
        decoded_reg_strb.MCU_RV_MTIMECMP_L = cpuif_req_masked & (cpuif_addr == 13'hec);
        decoded_reg_strb.MCU_RV_MTIMECMP_H = cpuif_req_masked & (cpuif_addr == 13'hf0);
        decoded_reg_strb.RESET_REQUEST = cpuif_req_masked & (cpuif_addr == 13'h100);
        decoded_reg_strb.CALIPTRA_BOOT_GO = cpuif_req_masked & (cpuif_addr == 13'h104);
        decoded_reg_strb.FW_SRAM_EXEC_REGION_SIZE = cpuif_req_masked & (cpuif_addr == 13'h108);
        decoded_reg_strb.MCU_NMI_VECTOR = cpuif_req_masked & (cpuif_addr == 13'h10c);
        decoded_reg_strb.MCU_RESET_VECTOR = cpuif_req_masked & (cpuif_addr == 13'h110);
        for(int i0=0; i0<5; i0++) begin
            decoded_reg_strb.MBOX0_VALID_AXI_ID[i0] = cpuif_req_masked & (cpuif_addr == 13'h180 + i0*13'h4);
        end
        for(int i0=0; i0<5; i0++) begin
            decoded_reg_strb.MBOX0_VALID_AXI_ID_LOCK[i0] = cpuif_req_masked & (cpuif_addr == 13'h1a0 + i0*13'h4);
        end
        for(int i0=0; i0<5; i0++) begin
            decoded_reg_strb.MBOX1_VALID_AXI_ID[i0] = cpuif_req_masked & (cpuif_addr == 13'h1c0 + i0*13'h4);
        end
        for(int i0=0; i0<5; i0++) begin
            decoded_reg_strb.MBOX1_VALID_AXI_ID_LOCK[i0] = cpuif_req_masked & (cpuif_addr == 13'h1e0 + i0*13'h4);
        end
        for(int i0=0; i0<2; i0++) begin
            decoded_reg_strb.GENERIC_INPUT_WIRES[i0] = cpuif_req_masked & (cpuif_addr == 13'h400 + i0*13'h4);
        end
        for(int i0=0; i0<2; i0++) begin
            decoded_reg_strb.GENERIC_OUTPUT_WIRES[i0] = cpuif_req_masked & (cpuif_addr == 13'h408 + i0*13'h4);
        end
        decoded_reg_strb.DEBUG_IN = cpuif_req_masked & (cpuif_addr == 13'h410);
        decoded_reg_strb.DEBUG_OUT = cpuif_req_masked & (cpuif_addr == 13'h414);
        decoded_reg_strb.FUSE_WR_DONE = cpuif_req_masked & (cpuif_addr == 13'h440);
        for(int i0=0; i0<8; i0++) begin
            for(int i1=0; i1<12; i1++) begin
                decoded_reg_strb.PROD_DEBUG_UNLOCK_PK_HASH_REG[i0][i1] = cpuif_req_masked & (cpuif_addr == 13'h480 + i0*13'h30 + i1*13'h4);
            end
        end
        for(int i0=0; i0<10; i0++) begin
            decoded_reg_strb.STICKY_DATA_VAULT_CTRL[i0] = cpuif_req_masked & (cpuif_addr == 13'h800 + i0*13'h4);
        end
        for(int i0=0; i0<10; i0++) begin
            for(int i1=0; i1<12; i1++) begin
                decoded_reg_strb.STICKY_DATA_VAULT_ENTRY[i0][i1] = cpuif_req_masked & (cpuif_addr == 13'h828 + i0*13'h30 + i1*13'h4);
            end
        end
        for(int i0=0; i0<10; i0++) begin
            decoded_reg_strb.DATA_VAULT_CTRL[i0] = cpuif_req_masked & (cpuif_addr == 13'ha08 + i0*13'h4);
        end
        for(int i0=0; i0<10; i0++) begin
            for(int i1=0; i1<12; i1++) begin
                decoded_reg_strb.DATA_VAULT_ENTRY[i0][i1] = cpuif_req_masked & (cpuif_addr == 13'ha30 + i0*13'h30 + i1*13'h4);
            end
        end
        for(int i0=0; i0<8; i0++) begin
            decoded_reg_strb.STICKY_LOCKABLE_SCRATCH_REG_CTRL[i0] = cpuif_req_masked & (cpuif_addr == 13'hc10 + i0*13'h4);
        end
        for(int i0=0; i0<8; i0++) begin
            decoded_reg_strb.STICKY_LOCKABLE_SCRATCH_REG[i0] = cpuif_req_masked & (cpuif_addr == 13'hc30 + i0*13'h4);
        end
        for(int i0=0; i0<10; i0++) begin
            decoded_reg_strb.LOCKABLE_SCRATCH_REG_CTRL[i0] = cpuif_req_masked & (cpuif_addr == 13'hc50 + i0*13'h4);
        end
        for(int i0=0; i0<10; i0++) begin
            decoded_reg_strb.LOCKABLE_SCRATCH_REG[i0] = cpuif_req_masked & (cpuif_addr == 13'hc78 + i0*13'h4);
        end
        for(int i0=0; i0<8; i0++) begin
            decoded_reg_strb.NON_STICKY_GENERIC_SCRATCH_REG[i0] = cpuif_req_masked & (cpuif_addr == 13'hca0 + i0*13'h4);
        end
        decoded_reg_strb.intr_block_rf.global_intr_en_r = cpuif_req_masked & (cpuif_addr == 13'h1000);
        decoded_reg_strb.intr_block_rf.error0_intr_en_r = cpuif_req_masked & (cpuif_addr == 13'h1004);
        decoded_reg_strb.intr_block_rf.error1_intr_en_r = cpuif_req_masked & (cpuif_addr == 13'h1008);
        decoded_reg_strb.intr_block_rf.notif0_intr_en_r = cpuif_req_masked & (cpuif_addr == 13'h100c);
        decoded_reg_strb.intr_block_rf.notif1_intr_en_r = cpuif_req_masked & (cpuif_addr == 13'h1010);
        decoded_reg_strb.intr_block_rf.error_global_intr_r = cpuif_req_masked & (cpuif_addr == 13'h1014);
        decoded_reg_strb.intr_block_rf.notif_global_intr_r = cpuif_req_masked & (cpuif_addr == 13'h1018);
        decoded_reg_strb.intr_block_rf.error0_internal_intr_r = cpuif_req_masked & (cpuif_addr == 13'h101c);
        decoded_reg_strb.intr_block_rf.error1_internal_intr_r = cpuif_req_masked & (cpuif_addr == 13'h1020);
        decoded_reg_strb.intr_block_rf.notif0_internal_intr_r = cpuif_req_masked & (cpuif_addr == 13'h1024);
        decoded_reg_strb.intr_block_rf.notif1_internal_intr_r = cpuif_req_masked & (cpuif_addr == 13'h1028);
        decoded_reg_strb.intr_block_rf.error0_intr_trig_r = cpuif_req_masked & (cpuif_addr == 13'h102c);
        decoded_reg_strb.intr_block_rf.error1_intr_trig_r = cpuif_req_masked & (cpuif_addr == 13'h1030);
        decoded_reg_strb.intr_block_rf.notif0_intr_trig_r = cpuif_req_masked & (cpuif_addr == 13'h1034);
        decoded_reg_strb.intr_block_rf.notif1_intr_trig_r = cpuif_req_masked & (cpuif_addr == 13'h1038);
        decoded_reg_strb.intr_block_rf.error_wdt_timer1_timeout_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1100);
        decoded_reg_strb.intr_block_rf.error_wdt_timer2_timeout_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1104);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal0_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1108);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal1_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h110c);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal2_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1110);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal3_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1114);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal4_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1118);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal5_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h111c);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal6_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1120);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal7_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1124);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal8_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1128);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal9_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h112c);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal10_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1130);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal11_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1134);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal12_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1138);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal13_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h113c);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal14_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1140);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal15_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1144);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal16_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1148);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal17_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h114c);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal18_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1150);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal19_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1154);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal20_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1158);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal21_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h115c);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal22_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1160);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal23_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1164);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal24_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1168);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal25_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h116c);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal26_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1170);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal27_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1174);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal28_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1178);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal29_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h117c);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal30_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1180);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal31_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1184);
        decoded_reg_strb.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1200);
        decoded_reg_strb.intr_block_rf.notif_clpra_mcu_reset_req_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1204);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal0_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1208);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal1_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h120c);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal2_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1210);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal3_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1214);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal4_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1218);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal5_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h121c);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal6_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1220);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal7_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1224);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal8_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1228);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal9_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h122c);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal10_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1230);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal11_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1234);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal12_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1238);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal13_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h123c);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal14_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1240);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal15_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1244);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal16_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1248);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal17_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h124c);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal18_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1250);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal19_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1254);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal20_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1258);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal21_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h125c);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal22_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1260);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal23_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1264);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal24_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1268);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal25_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h126c);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal26_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1270);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal27_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1274);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal28_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1278);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal29_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h127c);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal30_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1280);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal31_intr_count_r = cpuif_req_masked & (cpuif_addr == 13'h1284);
        decoded_reg_strb.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h1300);
        decoded_reg_strb.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h1304);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal0_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h1308);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal1_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h130c);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal2_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h1310);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal3_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h1314);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal4_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h1318);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal5_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h131c);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal6_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h1320);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal7_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h1324);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal8_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h1328);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal9_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h132c);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal10_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h1330);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal11_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h1334);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal12_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h1338);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal13_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h133c);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal14_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h1340);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal15_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h1344);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal16_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h1348);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal17_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h134c);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal18_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h1350);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal19_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h1354);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal20_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h1358);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal21_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h135c);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal22_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h1360);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal23_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h1364);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal24_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h1368);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal25_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h136c);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal26_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h1370);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal27_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h1374);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal28_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h1378);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal29_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h137c);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal30_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h1380);
        decoded_reg_strb.intr_block_rf.error_agg_error_fatal31_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h1384);
        decoded_reg_strb.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h1388);
        decoded_reg_strb.intr_block_rf.notif_clpra_mcu_reset_req_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h138c);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal0_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h1390);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal1_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h1394);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal2_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h1398);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal3_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h139c);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal4_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h13a0);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal5_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h13a4);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal6_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h13a8);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal7_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h13ac);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal8_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h13b0);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal9_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h13b4);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal10_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h13b8);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal11_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h13bc);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal12_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h13c0);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal13_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h13c4);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal14_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h13c8);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal15_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h13cc);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal16_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h13d0);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal17_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h13d4);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal18_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h13d8);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal19_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h13dc);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal20_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h13e0);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal21_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h13e4);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal22_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h13e8);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal23_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h13ec);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal24_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h13f0);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal25_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h13f4);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal26_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h13f8);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal27_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h13fc);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal28_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h1400);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal29_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h1404);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal30_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h1408);
        decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal31_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 13'h140c);
    end

    // Pass down signals to next stage
    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;
    assign decoded_wr_biten = cpuif_wr_biten;

    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    typedef struct packed{
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } REV_ID;
        } [2-1:0]FW_REV_ID;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } status;
        } BOOT_STATUS;
        struct packed{
            struct packed{
                logic [23:0] next;
                logic load_next;
            } status;
        } FLOW_STATUS;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } FW_HITLESS_UPD_RESET;
            struct packed{
                logic next;
                logic load_next;
            } FW_BOOT_UPD_RESET;
            struct packed{
                logic next;
                logic load_next;
            } WARM_RESET;
        } RESET_REASON;
        struct packed{
            struct packed{
                logic [21:0] next;
                logic load_next;
            } status;
        } RESET_STATUS;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } mcu_sram_ecc_unc;
            struct packed{
                logic next;
                logic load_next;
            } nmi_pin;
        } HW_ERROR_FATAL;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } agg_error_fatal31;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_fatal30;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_fatal29;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_fatal28;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_fatal27;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_fatal26;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_fatal25;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_fatal24;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_fatal23;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_fatal22;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_fatal21;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_fatal20;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_fatal19;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_fatal18;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_fatal17;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_fatal16;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_fatal15;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_fatal14;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_fatal13;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_fatal12;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_fatal11;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_fatal10;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_fatal9;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_fatal8;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_fatal7;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_fatal6;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_fatal5;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_fatal4;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_fatal3;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_fatal2;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_fatal1;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_fatal0;
        } AGG_ERROR_FATAL;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } RSVD;
        } HW_ERROR_NON_FATAL;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } agg_error_non_fatal31;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_non_fatal30;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_non_fatal29;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_non_fatal28;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_non_fatal27;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_non_fatal26;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_non_fatal25;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_non_fatal24;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_non_fatal23;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_non_fatal22;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_non_fatal21;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_non_fatal20;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_non_fatal19;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_non_fatal18;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_non_fatal17;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_non_fatal16;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_non_fatal15;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_non_fatal14;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_non_fatal13;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_non_fatal12;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_non_fatal11;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_non_fatal10;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_non_fatal9;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_non_fatal8;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_non_fatal7;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_non_fatal6;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_non_fatal5;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_non_fatal4;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_non_fatal3;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_non_fatal2;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_non_fatal1;
            struct packed{
                logic next;
                logic load_next;
            } agg_error_non_fatal0;
        } AGG_ERROR_NON_FATAL;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } error_code;
        } FW_ERROR_FATAL;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } error_code;
        } FW_ERROR_NON_FATAL;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } error_code;
        } HW_ERROR_ENC;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } error_code;
        } FW_ERROR_ENC;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } error_info;
        } [8-1:0]FW_EXTENDED_ERROR_INFO;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } mask_mcu_sram_ecc_unc;
            struct packed{
                logic next;
                logic load_next;
            } mask_nmi_pin;
        } internal_hw_error_fatal_mask;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } FIXME;
        } internal_hw_error_non_fatal_mask;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_fatal31;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_fatal30;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_fatal29;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_fatal28;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_fatal27;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_fatal26;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_fatal25;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_fatal24;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_fatal23;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_fatal22;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_fatal21;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_fatal20;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_fatal19;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_fatal18;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_fatal17;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_fatal16;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_fatal15;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_fatal14;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_fatal13;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_fatal12;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_fatal11;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_fatal10;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_fatal9;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_fatal8;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_fatal7;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_fatal6;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_fatal5;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_fatal4;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_fatal3;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_fatal2;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_fatal1;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_fatal0;
        } internal_agg_error_fatal_mask;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_non_fatal31;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_non_fatal30;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_non_fatal29;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_non_fatal28;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_non_fatal27;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_non_fatal26;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_non_fatal25;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_non_fatal24;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_non_fatal23;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_non_fatal22;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_non_fatal21;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_non_fatal20;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_non_fatal19;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_non_fatal18;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_non_fatal17;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_non_fatal16;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_non_fatal15;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_non_fatal14;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_non_fatal13;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_non_fatal12;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_non_fatal11;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_non_fatal10;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_non_fatal9;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_non_fatal8;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_non_fatal7;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_non_fatal6;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_non_fatal5;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_non_fatal4;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_non_fatal3;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_non_fatal2;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_non_fatal1;
            struct packed{
                logic next;
                logic load_next;
            } mask_agg_error_non_fatal0;
        } internal_agg_error_non_fatal_mask;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } mask;
        } internal_fw_error_fatal_mask;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } mask;
        } internal_fw_error_non_fatal_mask;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } timer1_en;
        } WDT_TIMER1_EN;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } timer1_restart;
        } WDT_TIMER1_CTRL;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } timer1_timeout_period;
        } [2-1:0]WDT_TIMER1_TIMEOUT_PERIOD;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } timer2_en;
        } WDT_TIMER2_EN;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } timer2_restart;
        } WDT_TIMER2_CTRL;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } timer2_timeout_period;
        } [2-1:0]WDT_TIMER2_TIMEOUT_PERIOD;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } t1_timeout;
            struct packed{
                logic next;
                logic load_next;
            } t2_timeout;
        } WDT_STATUS;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } TIMEOUT;
        } [2-1:0]WDT_CFG;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } clk_period;
        } MCU_TIMER_CONFIG;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
                logic incrthreshold;
                logic overflow;
            } count_l;
        } MCU_RV_MTIME_L;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
                logic incrthreshold;
                logic overflow;
            } count_h;
        } MCU_RV_MTIME_H;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } compare_l;
        } MCU_RV_MTIMECMP_L;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } compare_h;
        } MCU_RV_MTIMECMP_H;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } mcu_req;
        } RESET_REQUEST;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } go;
        } CALIPTRA_BOOT_GO;
        struct packed{
            struct packed{
                logic [15:0] next;
                logic load_next;
            } size;
        } FW_SRAM_EXEC_REGION_SIZE;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } vec;
        } MCU_NMI_VECTOR;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } vec;
        } MCU_RESET_VECTOR;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } id;
        } [5-1:0]MBOX0_VALID_AXI_ID;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } lock;
        } [5-1:0]MBOX0_VALID_AXI_ID_LOCK;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } id;
        } [5-1:0]MBOX1_VALID_AXI_ID;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } lock;
        } [5-1:0]MBOX1_VALID_AXI_ID_LOCK;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } wires;
        } [2-1:0]GENERIC_OUTPUT_WIRES;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } FIXME;
        } DEBUG_IN;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } FIXME;
        } DEBUG_OUT;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } done;
        } FUSE_WR_DONE;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } hash;
        } [8-1:0][12-1:0]PROD_DEBUG_UNLOCK_PK_HASH_REG;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } lock_entry;
        } [10-1:0]STICKY_DATA_VAULT_CTRL;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } lock_entry;
        } [10-1:0][12-1:0]STICKY_DATA_VAULT_ENTRY;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } lock_entry;
        } [10-1:0]DATA_VAULT_CTRL;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } lock_entry;
        } [10-1:0][12-1:0]DATA_VAULT_ENTRY;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } lock_entry;
        } [8-1:0]STICKY_LOCKABLE_SCRATCH_REG_CTRL;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } data;
        } [8-1:0]STICKY_LOCKABLE_SCRATCH_REG;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } lock_entry;
        } [10-1:0]LOCKABLE_SCRATCH_REG_CTRL;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } data;
        } [10-1:0]LOCKABLE_SCRATCH_REG;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } data;
        } [8-1:0]NON_STICKY_GENERIC_SCRATCH_REG;
        struct packed{
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } error_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_en;
            } global_intr_en_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } error_wdt_timer1_timeout_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_wdt_timer2_timeout_en;
            } error0_intr_en_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal31_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal30_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal29_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal28_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal27_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal26_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal25_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal24_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal23_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal22_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal21_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal20_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal19_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal18_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal17_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal16_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal15_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal14_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal13_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal12_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal11_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal10_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal9_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal8_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal7_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal6_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal5_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal4_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal3_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal2_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal1_en;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal0_en;
            } error1_intr_en_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } notif_mcu_sram_ecc_cor_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_clpra_mcu_reset_req_en;
            } notif0_intr_en_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal31_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal30_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal29_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal28_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal27_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal26_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal25_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal24_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal23_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal22_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal21_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal20_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal19_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal18_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal17_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal16_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal15_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal14_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal13_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal12_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal11_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal10_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal9_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal8_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal7_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal6_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal5_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal4_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal3_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal2_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal1_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal0_en;
            } notif1_intr_en_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } agg_sts0;
                struct packed{
                    logic next;
                    logic load_next;
                } agg_sts1;
            } error_global_intr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } agg_sts0;
                struct packed{
                    logic next;
                    logic load_next;
                } agg_sts1;
            } notif_global_intr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } error_wdt_timer1_timeout_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_wdt_timer2_timeout_sts;
            } error0_internal_intr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal31_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal30_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal29_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal28_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal27_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal26_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal25_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal24_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal23_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal22_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal21_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal20_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal19_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal18_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal17_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal16_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal15_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal14_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal13_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal12_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal11_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal10_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal9_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal8_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal7_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal6_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal5_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal4_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal3_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal2_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal1_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal0_sts;
            } error1_internal_intr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } notif_mcu_sram_ecc_cor_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_clpra_mcu_reset_req_sts;
            } notif0_internal_intr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal31_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal30_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal29_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal28_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal27_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal26_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal25_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal24_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal23_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal22_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal21_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal20_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal19_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal18_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal17_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal16_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal15_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal14_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal13_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal12_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal11_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal10_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal9_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal8_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal7_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal6_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal5_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal4_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal3_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal2_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal1_sts;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal0_sts;
            } notif1_internal_intr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } error_wdt_timer1_timeout_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_wdt_timer2_timeout_trig;
            } error0_intr_trig_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal31_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal30_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal29_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal28_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal27_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal26_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal25_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal24_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal23_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal22_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal21_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal20_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal19_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal18_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal17_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal16_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal15_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal14_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal13_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal12_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal11_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal10_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal9_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal8_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal7_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal6_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal5_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal4_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal3_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal2_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal1_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } error_agg_error_fatal0_trig;
            } error1_intr_trig_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } notif_mcu_sram_ecc_cor_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_clpra_mcu_reset_req_trig;
            } notif0_intr_trig_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal31_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal30_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal29_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal28_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal27_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal26_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal25_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal24_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal23_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal22_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal21_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal20_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal19_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal18_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal17_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal16_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal15_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal14_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal13_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal12_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal11_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal10_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal9_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal8_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal7_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal6_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal5_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal4_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal3_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal2_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal1_trig;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_agg_error_non_fatal0_trig;
            } notif1_intr_trig_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_wdt_timer1_timeout_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_wdt_timer2_timeout_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_agg_error_fatal0_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_agg_error_fatal1_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_agg_error_fatal2_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_agg_error_fatal3_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_agg_error_fatal4_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_agg_error_fatal5_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_agg_error_fatal6_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_agg_error_fatal7_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_agg_error_fatal8_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_agg_error_fatal9_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_agg_error_fatal10_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_agg_error_fatal11_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_agg_error_fatal12_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_agg_error_fatal13_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_agg_error_fatal14_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_agg_error_fatal15_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_agg_error_fatal16_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_agg_error_fatal17_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_agg_error_fatal18_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_agg_error_fatal19_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_agg_error_fatal20_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_agg_error_fatal21_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_agg_error_fatal22_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_agg_error_fatal23_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_agg_error_fatal24_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_agg_error_fatal25_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_agg_error_fatal26_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_agg_error_fatal27_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_agg_error_fatal28_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_agg_error_fatal29_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_agg_error_fatal30_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_agg_error_fatal31_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_mcu_sram_ecc_cor_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_clpra_mcu_reset_req_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_agg_error_non_fatal0_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_agg_error_non_fatal1_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_agg_error_non_fatal2_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_agg_error_non_fatal3_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_agg_error_non_fatal4_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_agg_error_non_fatal5_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_agg_error_non_fatal6_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_agg_error_non_fatal7_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_agg_error_non_fatal8_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_agg_error_non_fatal9_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_agg_error_non_fatal10_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_agg_error_non_fatal11_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_agg_error_non_fatal12_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_agg_error_non_fatal13_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_agg_error_non_fatal14_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_agg_error_non_fatal15_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_agg_error_non_fatal16_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_agg_error_non_fatal17_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_agg_error_non_fatal18_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_agg_error_non_fatal19_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_agg_error_non_fatal20_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_agg_error_non_fatal21_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_agg_error_non_fatal22_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_agg_error_non_fatal23_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_agg_error_non_fatal24_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_agg_error_non_fatal25_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_agg_error_non_fatal26_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_agg_error_non_fatal27_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_agg_error_non_fatal28_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_agg_error_non_fatal29_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_agg_error_non_fatal30_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_agg_error_non_fatal31_intr_count_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_wdt_timer1_timeout_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_wdt_timer2_timeout_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_agg_error_fatal0_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_agg_error_fatal1_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_agg_error_fatal2_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_agg_error_fatal3_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_agg_error_fatal4_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_agg_error_fatal5_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_agg_error_fatal6_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_agg_error_fatal7_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_agg_error_fatal8_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_agg_error_fatal9_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_agg_error_fatal10_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_agg_error_fatal11_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_agg_error_fatal12_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_agg_error_fatal13_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_agg_error_fatal14_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_agg_error_fatal15_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_agg_error_fatal16_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_agg_error_fatal17_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_agg_error_fatal18_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_agg_error_fatal19_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_agg_error_fatal20_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_agg_error_fatal21_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_agg_error_fatal22_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_agg_error_fatal23_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_agg_error_fatal24_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_agg_error_fatal25_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_agg_error_fatal26_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_agg_error_fatal27_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_agg_error_fatal28_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_agg_error_fatal29_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_agg_error_fatal30_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_agg_error_fatal31_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_mcu_sram_ecc_cor_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_clpra_mcu_reset_req_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_agg_error_non_fatal0_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_agg_error_non_fatal1_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_agg_error_non_fatal2_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_agg_error_non_fatal3_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_agg_error_non_fatal4_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_agg_error_non_fatal5_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_agg_error_non_fatal6_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_agg_error_non_fatal7_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_agg_error_non_fatal8_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_agg_error_non_fatal9_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_agg_error_non_fatal10_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_agg_error_non_fatal11_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_agg_error_non_fatal12_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_agg_error_non_fatal13_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_agg_error_non_fatal14_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_agg_error_non_fatal15_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_agg_error_non_fatal16_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_agg_error_non_fatal17_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_agg_error_non_fatal18_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_agg_error_non_fatal19_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_agg_error_non_fatal20_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_agg_error_non_fatal21_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_agg_error_non_fatal22_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_agg_error_non_fatal23_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_agg_error_non_fatal24_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_agg_error_non_fatal25_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_agg_error_non_fatal26_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_agg_error_non_fatal27_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_agg_error_non_fatal28_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_agg_error_non_fatal29_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_agg_error_non_fatal30_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_agg_error_non_fatal31_intr_count_incr_r;
        } intr_block_rf;
    } field_combo_t;
    field_combo_t field_combo;

    typedef struct packed{
        struct packed{
            struct packed{
                logic [31:0] value;
            } REV_ID;
        } [2-1:0]FW_REV_ID;
        struct packed{
            struct packed{
                logic [31:0] value;
            } status;
        } BOOT_STATUS;
        struct packed{
            struct packed{
                logic [23:0] value;
            } status;
        } FLOW_STATUS;
        struct packed{
            struct packed{
                logic value;
            } FW_HITLESS_UPD_RESET;
            struct packed{
                logic value;
            } FW_BOOT_UPD_RESET;
            struct packed{
                logic value;
            } WARM_RESET;
        } RESET_REASON;
        struct packed{
            struct packed{
                logic [21:0] value;
            } status;
        } RESET_STATUS;
        struct packed{
            struct packed{
                logic value;
            } mcu_sram_ecc_unc;
            struct packed{
                logic value;
            } nmi_pin;
        } HW_ERROR_FATAL;
        struct packed{
            struct packed{
                logic value;
            } agg_error_fatal31;
            struct packed{
                logic value;
            } agg_error_fatal30;
            struct packed{
                logic value;
            } agg_error_fatal29;
            struct packed{
                logic value;
            } agg_error_fatal28;
            struct packed{
                logic value;
            } agg_error_fatal27;
            struct packed{
                logic value;
            } agg_error_fatal26;
            struct packed{
                logic value;
            } agg_error_fatal25;
            struct packed{
                logic value;
            } agg_error_fatal24;
            struct packed{
                logic value;
            } agg_error_fatal23;
            struct packed{
                logic value;
            } agg_error_fatal22;
            struct packed{
                logic value;
            } agg_error_fatal21;
            struct packed{
                logic value;
            } agg_error_fatal20;
            struct packed{
                logic value;
            } agg_error_fatal19;
            struct packed{
                logic value;
            } agg_error_fatal18;
            struct packed{
                logic value;
            } agg_error_fatal17;
            struct packed{
                logic value;
            } agg_error_fatal16;
            struct packed{
                logic value;
            } agg_error_fatal15;
            struct packed{
                logic value;
            } agg_error_fatal14;
            struct packed{
                logic value;
            } agg_error_fatal13;
            struct packed{
                logic value;
            } agg_error_fatal12;
            struct packed{
                logic value;
            } agg_error_fatal11;
            struct packed{
                logic value;
            } agg_error_fatal10;
            struct packed{
                logic value;
            } agg_error_fatal9;
            struct packed{
                logic value;
            } agg_error_fatal8;
            struct packed{
                logic value;
            } agg_error_fatal7;
            struct packed{
                logic value;
            } agg_error_fatal6;
            struct packed{
                logic value;
            } agg_error_fatal5;
            struct packed{
                logic value;
            } agg_error_fatal4;
            struct packed{
                logic value;
            } agg_error_fatal3;
            struct packed{
                logic value;
            } agg_error_fatal2;
            struct packed{
                logic value;
            } agg_error_fatal1;
            struct packed{
                logic value;
            } agg_error_fatal0;
        } AGG_ERROR_FATAL;
        struct packed{
            struct packed{
                logic value;
            } RSVD;
        } HW_ERROR_NON_FATAL;
        struct packed{
            struct packed{
                logic value;
            } agg_error_non_fatal31;
            struct packed{
                logic value;
            } agg_error_non_fatal30;
            struct packed{
                logic value;
            } agg_error_non_fatal29;
            struct packed{
                logic value;
            } agg_error_non_fatal28;
            struct packed{
                logic value;
            } agg_error_non_fatal27;
            struct packed{
                logic value;
            } agg_error_non_fatal26;
            struct packed{
                logic value;
            } agg_error_non_fatal25;
            struct packed{
                logic value;
            } agg_error_non_fatal24;
            struct packed{
                logic value;
            } agg_error_non_fatal23;
            struct packed{
                logic value;
            } agg_error_non_fatal22;
            struct packed{
                logic value;
            } agg_error_non_fatal21;
            struct packed{
                logic value;
            } agg_error_non_fatal20;
            struct packed{
                logic value;
            } agg_error_non_fatal19;
            struct packed{
                logic value;
            } agg_error_non_fatal18;
            struct packed{
                logic value;
            } agg_error_non_fatal17;
            struct packed{
                logic value;
            } agg_error_non_fatal16;
            struct packed{
                logic value;
            } agg_error_non_fatal15;
            struct packed{
                logic value;
            } agg_error_non_fatal14;
            struct packed{
                logic value;
            } agg_error_non_fatal13;
            struct packed{
                logic value;
            } agg_error_non_fatal12;
            struct packed{
                logic value;
            } agg_error_non_fatal11;
            struct packed{
                logic value;
            } agg_error_non_fatal10;
            struct packed{
                logic value;
            } agg_error_non_fatal9;
            struct packed{
                logic value;
            } agg_error_non_fatal8;
            struct packed{
                logic value;
            } agg_error_non_fatal7;
            struct packed{
                logic value;
            } agg_error_non_fatal6;
            struct packed{
                logic value;
            } agg_error_non_fatal5;
            struct packed{
                logic value;
            } agg_error_non_fatal4;
            struct packed{
                logic value;
            } agg_error_non_fatal3;
            struct packed{
                logic value;
            } agg_error_non_fatal2;
            struct packed{
                logic value;
            } agg_error_non_fatal1;
            struct packed{
                logic value;
            } agg_error_non_fatal0;
        } AGG_ERROR_NON_FATAL;
        struct packed{
            struct packed{
                logic [31:0] value;
            } error_code;
        } FW_ERROR_FATAL;
        struct packed{
            struct packed{
                logic [31:0] value;
            } error_code;
        } FW_ERROR_NON_FATAL;
        struct packed{
            struct packed{
                logic [31:0] value;
            } error_code;
        } HW_ERROR_ENC;
        struct packed{
            struct packed{
                logic [31:0] value;
            } error_code;
        } FW_ERROR_ENC;
        struct packed{
            struct packed{
                logic [31:0] value;
            } error_info;
        } [8-1:0]FW_EXTENDED_ERROR_INFO;
        struct packed{
            struct packed{
                logic value;
            } mask_mcu_sram_ecc_unc;
            struct packed{
                logic value;
            } mask_nmi_pin;
        } internal_hw_error_fatal_mask;
        struct packed{
            struct packed{
                logic value;
            } FIXME;
        } internal_hw_error_non_fatal_mask;
        struct packed{
            struct packed{
                logic value;
            } mask_agg_error_fatal31;
            struct packed{
                logic value;
            } mask_agg_error_fatal30;
            struct packed{
                logic value;
            } mask_agg_error_fatal29;
            struct packed{
                logic value;
            } mask_agg_error_fatal28;
            struct packed{
                logic value;
            } mask_agg_error_fatal27;
            struct packed{
                logic value;
            } mask_agg_error_fatal26;
            struct packed{
                logic value;
            } mask_agg_error_fatal25;
            struct packed{
                logic value;
            } mask_agg_error_fatal24;
            struct packed{
                logic value;
            } mask_agg_error_fatal23;
            struct packed{
                logic value;
            } mask_agg_error_fatal22;
            struct packed{
                logic value;
            } mask_agg_error_fatal21;
            struct packed{
                logic value;
            } mask_agg_error_fatal20;
            struct packed{
                logic value;
            } mask_agg_error_fatal19;
            struct packed{
                logic value;
            } mask_agg_error_fatal18;
            struct packed{
                logic value;
            } mask_agg_error_fatal17;
            struct packed{
                logic value;
            } mask_agg_error_fatal16;
            struct packed{
                logic value;
            } mask_agg_error_fatal15;
            struct packed{
                logic value;
            } mask_agg_error_fatal14;
            struct packed{
                logic value;
            } mask_agg_error_fatal13;
            struct packed{
                logic value;
            } mask_agg_error_fatal12;
            struct packed{
                logic value;
            } mask_agg_error_fatal11;
            struct packed{
                logic value;
            } mask_agg_error_fatal10;
            struct packed{
                logic value;
            } mask_agg_error_fatal9;
            struct packed{
                logic value;
            } mask_agg_error_fatal8;
            struct packed{
                logic value;
            } mask_agg_error_fatal7;
            struct packed{
                logic value;
            } mask_agg_error_fatal6;
            struct packed{
                logic value;
            } mask_agg_error_fatal5;
            struct packed{
                logic value;
            } mask_agg_error_fatal4;
            struct packed{
                logic value;
            } mask_agg_error_fatal3;
            struct packed{
                logic value;
            } mask_agg_error_fatal2;
            struct packed{
                logic value;
            } mask_agg_error_fatal1;
            struct packed{
                logic value;
            } mask_agg_error_fatal0;
        } internal_agg_error_fatal_mask;
        struct packed{
            struct packed{
                logic value;
            } mask_agg_error_non_fatal31;
            struct packed{
                logic value;
            } mask_agg_error_non_fatal30;
            struct packed{
                logic value;
            } mask_agg_error_non_fatal29;
            struct packed{
                logic value;
            } mask_agg_error_non_fatal28;
            struct packed{
                logic value;
            } mask_agg_error_non_fatal27;
            struct packed{
                logic value;
            } mask_agg_error_non_fatal26;
            struct packed{
                logic value;
            } mask_agg_error_non_fatal25;
            struct packed{
                logic value;
            } mask_agg_error_non_fatal24;
            struct packed{
                logic value;
            } mask_agg_error_non_fatal23;
            struct packed{
                logic value;
            } mask_agg_error_non_fatal22;
            struct packed{
                logic value;
            } mask_agg_error_non_fatal21;
            struct packed{
                logic value;
            } mask_agg_error_non_fatal20;
            struct packed{
                logic value;
            } mask_agg_error_non_fatal19;
            struct packed{
                logic value;
            } mask_agg_error_non_fatal18;
            struct packed{
                logic value;
            } mask_agg_error_non_fatal17;
            struct packed{
                logic value;
            } mask_agg_error_non_fatal16;
            struct packed{
                logic value;
            } mask_agg_error_non_fatal15;
            struct packed{
                logic value;
            } mask_agg_error_non_fatal14;
            struct packed{
                logic value;
            } mask_agg_error_non_fatal13;
            struct packed{
                logic value;
            } mask_agg_error_non_fatal12;
            struct packed{
                logic value;
            } mask_agg_error_non_fatal11;
            struct packed{
                logic value;
            } mask_agg_error_non_fatal10;
            struct packed{
                logic value;
            } mask_agg_error_non_fatal9;
            struct packed{
                logic value;
            } mask_agg_error_non_fatal8;
            struct packed{
                logic value;
            } mask_agg_error_non_fatal7;
            struct packed{
                logic value;
            } mask_agg_error_non_fatal6;
            struct packed{
                logic value;
            } mask_agg_error_non_fatal5;
            struct packed{
                logic value;
            } mask_agg_error_non_fatal4;
            struct packed{
                logic value;
            } mask_agg_error_non_fatal3;
            struct packed{
                logic value;
            } mask_agg_error_non_fatal2;
            struct packed{
                logic value;
            } mask_agg_error_non_fatal1;
            struct packed{
                logic value;
            } mask_agg_error_non_fatal0;
        } internal_agg_error_non_fatal_mask;
        struct packed{
            struct packed{
                logic [31:0] value;
            } mask;
        } internal_fw_error_fatal_mask;
        struct packed{
            struct packed{
                logic [31:0] value;
            } mask;
        } internal_fw_error_non_fatal_mask;
        struct packed{
            struct packed{
                logic value;
            } timer1_en;
        } WDT_TIMER1_EN;
        struct packed{
            struct packed{
                logic value;
            } timer1_restart;
        } WDT_TIMER1_CTRL;
        struct packed{
            struct packed{
                logic [31:0] value;
            } timer1_timeout_period;
        } [2-1:0]WDT_TIMER1_TIMEOUT_PERIOD;
        struct packed{
            struct packed{
                logic value;
            } timer2_en;
        } WDT_TIMER2_EN;
        struct packed{
            struct packed{
                logic value;
            } timer2_restart;
        } WDT_TIMER2_CTRL;
        struct packed{
            struct packed{
                logic [31:0] value;
            } timer2_timeout_period;
        } [2-1:0]WDT_TIMER2_TIMEOUT_PERIOD;
        struct packed{
            struct packed{
                logic value;
            } t1_timeout;
            struct packed{
                logic value;
            } t2_timeout;
        } WDT_STATUS;
        struct packed{
            struct packed{
                logic [31:0] value;
            } TIMEOUT;
        } [2-1:0]WDT_CFG;
        struct packed{
            struct packed{
                logic [31:0] value;
            } clk_period;
        } MCU_TIMER_CONFIG;
        struct packed{
            struct packed{
                logic [31:0] value;
            } count_l;
        } MCU_RV_MTIME_L;
        struct packed{
            struct packed{
                logic [31:0] value;
            } count_h;
        } MCU_RV_MTIME_H;
        struct packed{
            struct packed{
                logic [31:0] value;
            } compare_l;
        } MCU_RV_MTIMECMP_L;
        struct packed{
            struct packed{
                logic [31:0] value;
            } compare_h;
        } MCU_RV_MTIMECMP_H;
        struct packed{
            struct packed{
                logic value;
            } mcu_req;
        } RESET_REQUEST;
        struct packed{
            struct packed{
                logic value;
            } go;
        } CALIPTRA_BOOT_GO;
        struct packed{
            struct packed{
                logic [15:0] value;
            } size;
        } FW_SRAM_EXEC_REGION_SIZE;
        struct packed{
            struct packed{
                logic [31:0] value;
            } vec;
        } MCU_NMI_VECTOR;
        struct packed{
            struct packed{
                logic [31:0] value;
            } vec;
        } MCU_RESET_VECTOR;
        struct packed{
            struct packed{
                logic [31:0] value;
            } id;
        } [5-1:0]MBOX0_VALID_AXI_ID;
        struct packed{
            struct packed{
                logic value;
            } lock;
        } [5-1:0]MBOX0_VALID_AXI_ID_LOCK;
        struct packed{
            struct packed{
                logic [31:0] value;
            } id;
        } [5-1:0]MBOX1_VALID_AXI_ID;
        struct packed{
            struct packed{
                logic value;
            } lock;
        } [5-1:0]MBOX1_VALID_AXI_ID_LOCK;
        struct packed{
            struct packed{
                logic [31:0] value;
            } wires;
        } [2-1:0]GENERIC_OUTPUT_WIRES;
        struct packed{
            struct packed{
                logic value;
            } FIXME;
        } DEBUG_IN;
        struct packed{
            struct packed{
                logic value;
            } FIXME;
        } DEBUG_OUT;
        struct packed{
            struct packed{
                logic value;
            } done;
        } FUSE_WR_DONE;
        struct packed{
            struct packed{
                logic [31:0] value;
            } hash;
        } [8-1:0][12-1:0]PROD_DEBUG_UNLOCK_PK_HASH_REG;
        struct packed{
            struct packed{
                logic value;
            } lock_entry;
        } [10-1:0]STICKY_DATA_VAULT_CTRL;
        struct packed{
            struct packed{
                logic value;
            } lock_entry;
        } [10-1:0][12-1:0]STICKY_DATA_VAULT_ENTRY;
        struct packed{
            struct packed{
                logic value;
            } lock_entry;
        } [10-1:0]DATA_VAULT_CTRL;
        struct packed{
            struct packed{
                logic value;
            } lock_entry;
        } [10-1:0][12-1:0]DATA_VAULT_ENTRY;
        struct packed{
            struct packed{
                logic value;
            } lock_entry;
        } [8-1:0]STICKY_LOCKABLE_SCRATCH_REG_CTRL;
        struct packed{
            struct packed{
                logic [31:0] value;
            } data;
        } [8-1:0]STICKY_LOCKABLE_SCRATCH_REG;
        struct packed{
            struct packed{
                logic value;
            } lock_entry;
        } [10-1:0]LOCKABLE_SCRATCH_REG_CTRL;
        struct packed{
            struct packed{
                logic [31:0] value;
            } data;
        } [10-1:0]LOCKABLE_SCRATCH_REG;
        struct packed{
            struct packed{
                logic [31:0] value;
            } data;
        } [8-1:0]NON_STICKY_GENERIC_SCRATCH_REG;
        struct packed{
            struct packed{
                struct packed{
                    logic value;
                } error_en;
                struct packed{
                    logic value;
                } notif_en;
            } global_intr_en_r;
            struct packed{
                struct packed{
                    logic value;
                } error_wdt_timer1_timeout_en;
                struct packed{
                    logic value;
                } error_wdt_timer2_timeout_en;
            } error0_intr_en_r;
            struct packed{
                struct packed{
                    logic value;
                } error_agg_error_fatal31_en;
                struct packed{
                    logic value;
                } error_agg_error_fatal30_en;
                struct packed{
                    logic value;
                } error_agg_error_fatal29_en;
                struct packed{
                    logic value;
                } error_agg_error_fatal28_en;
                struct packed{
                    logic value;
                } error_agg_error_fatal27_en;
                struct packed{
                    logic value;
                } error_agg_error_fatal26_en;
                struct packed{
                    logic value;
                } error_agg_error_fatal25_en;
                struct packed{
                    logic value;
                } error_agg_error_fatal24_en;
                struct packed{
                    logic value;
                } error_agg_error_fatal23_en;
                struct packed{
                    logic value;
                } error_agg_error_fatal22_en;
                struct packed{
                    logic value;
                } error_agg_error_fatal21_en;
                struct packed{
                    logic value;
                } error_agg_error_fatal20_en;
                struct packed{
                    logic value;
                } error_agg_error_fatal19_en;
                struct packed{
                    logic value;
                } error_agg_error_fatal18_en;
                struct packed{
                    logic value;
                } error_agg_error_fatal17_en;
                struct packed{
                    logic value;
                } error_agg_error_fatal16_en;
                struct packed{
                    logic value;
                } error_agg_error_fatal15_en;
                struct packed{
                    logic value;
                } error_agg_error_fatal14_en;
                struct packed{
                    logic value;
                } error_agg_error_fatal13_en;
                struct packed{
                    logic value;
                } error_agg_error_fatal12_en;
                struct packed{
                    logic value;
                } error_agg_error_fatal11_en;
                struct packed{
                    logic value;
                } error_agg_error_fatal10_en;
                struct packed{
                    logic value;
                } error_agg_error_fatal9_en;
                struct packed{
                    logic value;
                } error_agg_error_fatal8_en;
                struct packed{
                    logic value;
                } error_agg_error_fatal7_en;
                struct packed{
                    logic value;
                } error_agg_error_fatal6_en;
                struct packed{
                    logic value;
                } error_agg_error_fatal5_en;
                struct packed{
                    logic value;
                } error_agg_error_fatal4_en;
                struct packed{
                    logic value;
                } error_agg_error_fatal3_en;
                struct packed{
                    logic value;
                } error_agg_error_fatal2_en;
                struct packed{
                    logic value;
                } error_agg_error_fatal1_en;
                struct packed{
                    logic value;
                } error_agg_error_fatal0_en;
            } error1_intr_en_r;
            struct packed{
                struct packed{
                    logic value;
                } notif_mcu_sram_ecc_cor_en;
                struct packed{
                    logic value;
                } notif_clpra_mcu_reset_req_en;
            } notif0_intr_en_r;
            struct packed{
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal31_en;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal30_en;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal29_en;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal28_en;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal27_en;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal26_en;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal25_en;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal24_en;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal23_en;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal22_en;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal21_en;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal20_en;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal19_en;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal18_en;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal17_en;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal16_en;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal15_en;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal14_en;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal13_en;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal12_en;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal11_en;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal10_en;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal9_en;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal8_en;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal7_en;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal6_en;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal5_en;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal4_en;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal3_en;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal2_en;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal1_en;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal0_en;
            } notif1_intr_en_r;
            struct packed{
                struct packed{
                    logic value;
                } agg_sts0;
                struct packed{
                    logic value;
                } agg_sts1;
            } error_global_intr_r;
            struct packed{
                struct packed{
                    logic value;
                } agg_sts0;
                struct packed{
                    logic value;
                } agg_sts1;
            } notif_global_intr_r;
            struct packed{
                struct packed{
                    logic value;
                } error_wdt_timer1_timeout_sts;
                struct packed{
                    logic value;
                } error_wdt_timer2_timeout_sts;
            } error0_internal_intr_r;
            struct packed{
                struct packed{
                    logic value;
                } error_agg_error_fatal31_sts;
                struct packed{
                    logic value;
                } error_agg_error_fatal30_sts;
                struct packed{
                    logic value;
                } error_agg_error_fatal29_sts;
                struct packed{
                    logic value;
                } error_agg_error_fatal28_sts;
                struct packed{
                    logic value;
                } error_agg_error_fatal27_sts;
                struct packed{
                    logic value;
                } error_agg_error_fatal26_sts;
                struct packed{
                    logic value;
                } error_agg_error_fatal25_sts;
                struct packed{
                    logic value;
                } error_agg_error_fatal24_sts;
                struct packed{
                    logic value;
                } error_agg_error_fatal23_sts;
                struct packed{
                    logic value;
                } error_agg_error_fatal22_sts;
                struct packed{
                    logic value;
                } error_agg_error_fatal21_sts;
                struct packed{
                    logic value;
                } error_agg_error_fatal20_sts;
                struct packed{
                    logic value;
                } error_agg_error_fatal19_sts;
                struct packed{
                    logic value;
                } error_agg_error_fatal18_sts;
                struct packed{
                    logic value;
                } error_agg_error_fatal17_sts;
                struct packed{
                    logic value;
                } error_agg_error_fatal16_sts;
                struct packed{
                    logic value;
                } error_agg_error_fatal15_sts;
                struct packed{
                    logic value;
                } error_agg_error_fatal14_sts;
                struct packed{
                    logic value;
                } error_agg_error_fatal13_sts;
                struct packed{
                    logic value;
                } error_agg_error_fatal12_sts;
                struct packed{
                    logic value;
                } error_agg_error_fatal11_sts;
                struct packed{
                    logic value;
                } error_agg_error_fatal10_sts;
                struct packed{
                    logic value;
                } error_agg_error_fatal9_sts;
                struct packed{
                    logic value;
                } error_agg_error_fatal8_sts;
                struct packed{
                    logic value;
                } error_agg_error_fatal7_sts;
                struct packed{
                    logic value;
                } error_agg_error_fatal6_sts;
                struct packed{
                    logic value;
                } error_agg_error_fatal5_sts;
                struct packed{
                    logic value;
                } error_agg_error_fatal4_sts;
                struct packed{
                    logic value;
                } error_agg_error_fatal3_sts;
                struct packed{
                    logic value;
                } error_agg_error_fatal2_sts;
                struct packed{
                    logic value;
                } error_agg_error_fatal1_sts;
                struct packed{
                    logic value;
                } error_agg_error_fatal0_sts;
            } error1_internal_intr_r;
            struct packed{
                struct packed{
                    logic value;
                } notif_mcu_sram_ecc_cor_sts;
                struct packed{
                    logic value;
                } notif_clpra_mcu_reset_req_sts;
            } notif0_internal_intr_r;
            struct packed{
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal31_sts;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal30_sts;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal29_sts;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal28_sts;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal27_sts;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal26_sts;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal25_sts;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal24_sts;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal23_sts;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal22_sts;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal21_sts;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal20_sts;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal19_sts;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal18_sts;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal17_sts;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal16_sts;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal15_sts;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal14_sts;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal13_sts;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal12_sts;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal11_sts;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal10_sts;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal9_sts;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal8_sts;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal7_sts;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal6_sts;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal5_sts;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal4_sts;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal3_sts;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal2_sts;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal1_sts;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal0_sts;
            } notif1_internal_intr_r;
            struct packed{
                struct packed{
                    logic value;
                } error_wdt_timer1_timeout_trig;
                struct packed{
                    logic value;
                } error_wdt_timer2_timeout_trig;
            } error0_intr_trig_r;
            struct packed{
                struct packed{
                    logic value;
                } error_agg_error_fatal31_trig;
                struct packed{
                    logic value;
                } error_agg_error_fatal30_trig;
                struct packed{
                    logic value;
                } error_agg_error_fatal29_trig;
                struct packed{
                    logic value;
                } error_agg_error_fatal28_trig;
                struct packed{
                    logic value;
                } error_agg_error_fatal27_trig;
                struct packed{
                    logic value;
                } error_agg_error_fatal26_trig;
                struct packed{
                    logic value;
                } error_agg_error_fatal25_trig;
                struct packed{
                    logic value;
                } error_agg_error_fatal24_trig;
                struct packed{
                    logic value;
                } error_agg_error_fatal23_trig;
                struct packed{
                    logic value;
                } error_agg_error_fatal22_trig;
                struct packed{
                    logic value;
                } error_agg_error_fatal21_trig;
                struct packed{
                    logic value;
                } error_agg_error_fatal20_trig;
                struct packed{
                    logic value;
                } error_agg_error_fatal19_trig;
                struct packed{
                    logic value;
                } error_agg_error_fatal18_trig;
                struct packed{
                    logic value;
                } error_agg_error_fatal17_trig;
                struct packed{
                    logic value;
                } error_agg_error_fatal16_trig;
                struct packed{
                    logic value;
                } error_agg_error_fatal15_trig;
                struct packed{
                    logic value;
                } error_agg_error_fatal14_trig;
                struct packed{
                    logic value;
                } error_agg_error_fatal13_trig;
                struct packed{
                    logic value;
                } error_agg_error_fatal12_trig;
                struct packed{
                    logic value;
                } error_agg_error_fatal11_trig;
                struct packed{
                    logic value;
                } error_agg_error_fatal10_trig;
                struct packed{
                    logic value;
                } error_agg_error_fatal9_trig;
                struct packed{
                    logic value;
                } error_agg_error_fatal8_trig;
                struct packed{
                    logic value;
                } error_agg_error_fatal7_trig;
                struct packed{
                    logic value;
                } error_agg_error_fatal6_trig;
                struct packed{
                    logic value;
                } error_agg_error_fatal5_trig;
                struct packed{
                    logic value;
                } error_agg_error_fatal4_trig;
                struct packed{
                    logic value;
                } error_agg_error_fatal3_trig;
                struct packed{
                    logic value;
                } error_agg_error_fatal2_trig;
                struct packed{
                    logic value;
                } error_agg_error_fatal1_trig;
                struct packed{
                    logic value;
                } error_agg_error_fatal0_trig;
            } error1_intr_trig_r;
            struct packed{
                struct packed{
                    logic value;
                } notif_mcu_sram_ecc_cor_trig;
                struct packed{
                    logic value;
                } notif_clpra_mcu_reset_req_trig;
            } notif0_intr_trig_r;
            struct packed{
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal31_trig;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal30_trig;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal29_trig;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal28_trig;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal27_trig;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal26_trig;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal25_trig;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal24_trig;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal23_trig;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal22_trig;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal21_trig;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal20_trig;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal19_trig;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal18_trig;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal17_trig;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal16_trig;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal15_trig;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal14_trig;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal13_trig;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal12_trig;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal11_trig;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal10_trig;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal9_trig;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal8_trig;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal7_trig;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal6_trig;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal5_trig;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal4_trig;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal3_trig;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal2_trig;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal1_trig;
                struct packed{
                    logic value;
                } notif_agg_error_non_fatal0_trig;
            } notif1_intr_trig_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_wdt_timer1_timeout_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_wdt_timer2_timeout_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_agg_error_fatal0_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_agg_error_fatal1_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_agg_error_fatal2_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_agg_error_fatal3_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_agg_error_fatal4_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_agg_error_fatal5_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_agg_error_fatal6_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_agg_error_fatal7_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_agg_error_fatal8_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_agg_error_fatal9_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_agg_error_fatal10_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_agg_error_fatal11_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_agg_error_fatal12_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_agg_error_fatal13_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_agg_error_fatal14_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_agg_error_fatal15_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_agg_error_fatal16_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_agg_error_fatal17_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_agg_error_fatal18_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_agg_error_fatal19_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_agg_error_fatal20_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_agg_error_fatal21_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_agg_error_fatal22_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_agg_error_fatal23_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_agg_error_fatal24_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_agg_error_fatal25_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_agg_error_fatal26_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_agg_error_fatal27_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_agg_error_fatal28_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_agg_error_fatal29_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_agg_error_fatal30_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_agg_error_fatal31_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_mcu_sram_ecc_cor_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_clpra_mcu_reset_req_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_agg_error_non_fatal0_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_agg_error_non_fatal1_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_agg_error_non_fatal2_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_agg_error_non_fatal3_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_agg_error_non_fatal4_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_agg_error_non_fatal5_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_agg_error_non_fatal6_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_agg_error_non_fatal7_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_agg_error_non_fatal8_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_agg_error_non_fatal9_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_agg_error_non_fatal10_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_agg_error_non_fatal11_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_agg_error_non_fatal12_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_agg_error_non_fatal13_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_agg_error_non_fatal14_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_agg_error_non_fatal15_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_agg_error_non_fatal16_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_agg_error_non_fatal17_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_agg_error_non_fatal18_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_agg_error_non_fatal19_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_agg_error_non_fatal20_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_agg_error_non_fatal21_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_agg_error_non_fatal22_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_agg_error_non_fatal23_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_agg_error_non_fatal24_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_agg_error_non_fatal25_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_agg_error_non_fatal26_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_agg_error_non_fatal27_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_agg_error_non_fatal28_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_agg_error_non_fatal29_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_agg_error_non_fatal30_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_agg_error_non_fatal31_intr_count_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_wdt_timer1_timeout_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_wdt_timer2_timeout_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_agg_error_fatal0_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_agg_error_fatal1_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_agg_error_fatal2_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_agg_error_fatal3_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_agg_error_fatal4_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_agg_error_fatal5_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_agg_error_fatal6_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_agg_error_fatal7_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_agg_error_fatal8_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_agg_error_fatal9_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_agg_error_fatal10_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_agg_error_fatal11_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_agg_error_fatal12_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_agg_error_fatal13_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_agg_error_fatal14_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_agg_error_fatal15_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_agg_error_fatal16_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_agg_error_fatal17_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_agg_error_fatal18_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_agg_error_fatal19_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_agg_error_fatal20_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_agg_error_fatal21_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_agg_error_fatal22_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_agg_error_fatal23_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_agg_error_fatal24_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_agg_error_fatal25_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_agg_error_fatal26_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_agg_error_fatal27_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_agg_error_fatal28_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_agg_error_fatal29_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_agg_error_fatal30_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_agg_error_fatal31_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_mcu_sram_ecc_cor_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_clpra_mcu_reset_req_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_agg_error_non_fatal0_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_agg_error_non_fatal1_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_agg_error_non_fatal2_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_agg_error_non_fatal3_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_agg_error_non_fatal4_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_agg_error_non_fatal5_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_agg_error_non_fatal6_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_agg_error_non_fatal7_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_agg_error_non_fatal8_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_agg_error_non_fatal9_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_agg_error_non_fatal10_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_agg_error_non_fatal11_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_agg_error_non_fatal12_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_agg_error_non_fatal13_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_agg_error_non_fatal14_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_agg_error_non_fatal15_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_agg_error_non_fatal16_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_agg_error_non_fatal17_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_agg_error_non_fatal18_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_agg_error_non_fatal19_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_agg_error_non_fatal20_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_agg_error_non_fatal21_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_agg_error_non_fatal22_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_agg_error_non_fatal23_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_agg_error_non_fatal24_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_agg_error_non_fatal25_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_agg_error_non_fatal26_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_agg_error_non_fatal27_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_agg_error_non_fatal28_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_agg_error_non_fatal29_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_agg_error_non_fatal30_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_agg_error_non_fatal31_intr_count_incr_r;
        } intr_block_rf;
    } field_storage_t;
    field_storage_t field_storage;

    for(genvar i0=0; i0<2; i0++) begin
        // Field: mci_reg.FW_REV_ID[].REV_ID
        always_comb begin
            automatic logic [31:0] next_c = field_storage.FW_REV_ID[i0].REV_ID.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.FW_REV_ID[i0] && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
                next_c = (field_storage.FW_REV_ID[i0].REV_ID.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo.FW_REV_ID[i0].REV_ID.next = next_c;
            field_combo.FW_REV_ID[i0].REV_ID.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
            if(~hwif_in.mci_rst_b) begin
                field_storage.FW_REV_ID[i0].REV_ID.value <= 32'h0;
            end else if(field_combo.FW_REV_ID[i0].REV_ID.load_next) begin
                field_storage.FW_REV_ID[i0].REV_ID.value <= field_combo.FW_REV_ID[i0].REV_ID.next;
            end
        end
    end
    // Field: mci_reg.BOOT_STATUS.status
    always_comb begin
        automatic logic [31:0] next_c = field_storage.BOOT_STATUS.status.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.BOOT_STATUS && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.BOOT_STATUS.status.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.BOOT_STATUS.status.next = next_c;
        field_combo.BOOT_STATUS.status.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.BOOT_STATUS.status.value <= 32'h0;
        end else if(field_combo.BOOT_STATUS.status.load_next) begin
            field_storage.BOOT_STATUS.status.value <= field_combo.BOOT_STATUS.status.next;
        end
    end
    assign hwif_out.BOOT_STATUS.status.value = field_storage.BOOT_STATUS.status.value;
    // Field: mci_reg.FLOW_STATUS.status
    always_comb begin
        automatic logic [23:0] next_c = field_storage.FLOW_STATUS.status.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.FLOW_STATUS && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.FLOW_STATUS.status.value & ~decoded_wr_biten[23:0]) | (decoded_wr_data[23:0] & decoded_wr_biten[23:0]);
            load_next_c = '1;
        end
        field_combo.FLOW_STATUS.status.next = next_c;
        field_combo.FLOW_STATUS.status.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.FLOW_STATUS.status.value <= 24'h0;
        end else if(field_combo.FLOW_STATUS.status.load_next) begin
            field_storage.FLOW_STATUS.status.value <= field_combo.FLOW_STATUS.status.next;
        end
    end
    assign hwif_out.FLOW_STATUS.status.value = field_storage.FLOW_STATUS.status.value;
    // Field: mci_reg.RESET_REASON.FW_HITLESS_UPD_RESET
    always_comb begin
        automatic logic [0:0] next_c = field_storage.RESET_REASON.FW_HITLESS_UPD_RESET.value;
        automatic logic load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.RESET_REASON.FW_HITLESS_UPD_RESET.next;
        load_next_c = '1;
        field_combo.RESET_REASON.FW_HITLESS_UPD_RESET.next = next_c;
        field_combo.RESET_REASON.FW_HITLESS_UPD_RESET.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.RESET_REASON.FW_HITLESS_UPD_RESET.value <= 1'h0;
        end else if(field_combo.RESET_REASON.FW_HITLESS_UPD_RESET.load_next) begin
            field_storage.RESET_REASON.FW_HITLESS_UPD_RESET.value <= field_combo.RESET_REASON.FW_HITLESS_UPD_RESET.next;
        end
    end
    assign hwif_out.RESET_REASON.FW_HITLESS_UPD_RESET.value = field_storage.RESET_REASON.FW_HITLESS_UPD_RESET.value;
    // Field: mci_reg.RESET_REASON.FW_BOOT_UPD_RESET
    always_comb begin
        automatic logic [0:0] next_c = field_storage.RESET_REASON.FW_BOOT_UPD_RESET.value;
        automatic logic load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.RESET_REASON.FW_BOOT_UPD_RESET.next;
        load_next_c = '1;
        field_combo.RESET_REASON.FW_BOOT_UPD_RESET.next = next_c;
        field_combo.RESET_REASON.FW_BOOT_UPD_RESET.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.RESET_REASON.FW_BOOT_UPD_RESET.value <= 1'h0;
        end else if(field_combo.RESET_REASON.FW_BOOT_UPD_RESET.load_next) begin
            field_storage.RESET_REASON.FW_BOOT_UPD_RESET.value <= field_combo.RESET_REASON.FW_BOOT_UPD_RESET.next;
        end
    end
    assign hwif_out.RESET_REASON.FW_BOOT_UPD_RESET.value = field_storage.RESET_REASON.FW_BOOT_UPD_RESET.value;
    // Field: mci_reg.RESET_REASON.WARM_RESET
    always_comb begin
        automatic logic [0:0] next_c = field_storage.RESET_REASON.WARM_RESET.value;
        automatic logic load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.RESET_REASON.WARM_RESET.next;
        load_next_c = '1;
        field_combo.RESET_REASON.WARM_RESET.next = next_c;
        field_combo.RESET_REASON.WARM_RESET.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.RESET_REASON.WARM_RESET.value <= 1'h0;
        end else if(field_combo.RESET_REASON.WARM_RESET.load_next) begin
            field_storage.RESET_REASON.WARM_RESET.value <= field_combo.RESET_REASON.WARM_RESET.next;
        end
    end
    assign hwif_out.RESET_REASON.WARM_RESET.value = field_storage.RESET_REASON.WARM_RESET.value;
    // Field: mci_reg.RESET_STATUS.status
    always_comb begin
        automatic logic [21:0] next_c = field_storage.RESET_STATUS.status.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.RESET_STATUS && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.RESET_STATUS.status.value & ~decoded_wr_biten[21:0]) | (decoded_wr_data[21:0] & decoded_wr_biten[21:0]);
            load_next_c = '1;
        end
        field_combo.RESET_STATUS.status.next = next_c;
        field_combo.RESET_STATUS.status.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.RESET_STATUS.status.value <= 22'h0;
        end else if(field_combo.RESET_STATUS.status.load_next) begin
            field_storage.RESET_STATUS.status.value <= field_combo.RESET_STATUS.status.next;
        end
    end
    assign hwif_out.RESET_STATUS.status.value = field_storage.RESET_STATUS.status.value;
    // Field: mci_reg.HW_ERROR_FATAL.mcu_sram_ecc_unc
    always_comb begin
        automatic logic [0:0] next_c = field_storage.HW_ERROR_FATAL.mcu_sram_ecc_unc.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.HW_ERROR_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.HW_ERROR_FATAL.mcu_sram_ecc_unc.value & ~(decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else if(hwif_in.HW_ERROR_FATAL.mcu_sram_ecc_unc.we) begin // HW Write - we
            next_c = hwif_in.HW_ERROR_FATAL.mcu_sram_ecc_unc.next;
            load_next_c = '1;
        end
        field_combo.HW_ERROR_FATAL.mcu_sram_ecc_unc.next = next_c;
        field_combo.HW_ERROR_FATAL.mcu_sram_ecc_unc.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.HW_ERROR_FATAL.mcu_sram_ecc_unc.value <= 1'h0;
        end else if(field_combo.HW_ERROR_FATAL.mcu_sram_ecc_unc.load_next) begin
            field_storage.HW_ERROR_FATAL.mcu_sram_ecc_unc.value <= field_combo.HW_ERROR_FATAL.mcu_sram_ecc_unc.next;
        end
    end
    assign hwif_out.HW_ERROR_FATAL.mcu_sram_ecc_unc.value = field_storage.HW_ERROR_FATAL.mcu_sram_ecc_unc.value;
    // Field: mci_reg.HW_ERROR_FATAL.nmi_pin
    always_comb begin
        automatic logic [0:0] next_c = field_storage.HW_ERROR_FATAL.nmi_pin.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.HW_ERROR_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.HW_ERROR_FATAL.nmi_pin.value & ~(decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end else if(hwif_in.HW_ERROR_FATAL.nmi_pin.we) begin // HW Write - we
            next_c = hwif_in.HW_ERROR_FATAL.nmi_pin.next;
            load_next_c = '1;
        end
        field_combo.HW_ERROR_FATAL.nmi_pin.next = next_c;
        field_combo.HW_ERROR_FATAL.nmi_pin.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.HW_ERROR_FATAL.nmi_pin.value <= 1'h0;
        end else if(field_combo.HW_ERROR_FATAL.nmi_pin.load_next) begin
            field_storage.HW_ERROR_FATAL.nmi_pin.value <= field_combo.HW_ERROR_FATAL.nmi_pin.next;
        end
    end
    assign hwif_out.HW_ERROR_FATAL.nmi_pin.value = field_storage.HW_ERROR_FATAL.nmi_pin.value;
    // Field: mci_reg.AGG_ERROR_FATAL.agg_error_fatal31
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal31.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal31.value & ~(decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_FATAL.agg_error_fatal31.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_FATAL.agg_error_fatal31.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_FATAL.agg_error_fatal31.next = next_c;
        field_combo.AGG_ERROR_FATAL.agg_error_fatal31.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal31.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_FATAL.agg_error_fatal31.load_next) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal31.value <= field_combo.AGG_ERROR_FATAL.agg_error_fatal31.next;
        end
    end
    assign hwif_out.AGG_ERROR_FATAL.agg_error_fatal31.value = field_storage.AGG_ERROR_FATAL.agg_error_fatal31.value;
    // Field: mci_reg.AGG_ERROR_FATAL.agg_error_fatal30
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal30.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal30.value & ~(decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_FATAL.agg_error_fatal30.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_FATAL.agg_error_fatal30.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_FATAL.agg_error_fatal30.next = next_c;
        field_combo.AGG_ERROR_FATAL.agg_error_fatal30.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal30.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_FATAL.agg_error_fatal30.load_next) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal30.value <= field_combo.AGG_ERROR_FATAL.agg_error_fatal30.next;
        end
    end
    assign hwif_out.AGG_ERROR_FATAL.agg_error_fatal30.value = field_storage.AGG_ERROR_FATAL.agg_error_fatal30.value;
    // Field: mci_reg.AGG_ERROR_FATAL.agg_error_fatal29
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal29.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal29.value & ~(decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_FATAL.agg_error_fatal29.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_FATAL.agg_error_fatal29.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_FATAL.agg_error_fatal29.next = next_c;
        field_combo.AGG_ERROR_FATAL.agg_error_fatal29.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal29.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_FATAL.agg_error_fatal29.load_next) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal29.value <= field_combo.AGG_ERROR_FATAL.agg_error_fatal29.next;
        end
    end
    assign hwif_out.AGG_ERROR_FATAL.agg_error_fatal29.value = field_storage.AGG_ERROR_FATAL.agg_error_fatal29.value;
    // Field: mci_reg.AGG_ERROR_FATAL.agg_error_fatal28
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal28.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal28.value & ~(decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_FATAL.agg_error_fatal28.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_FATAL.agg_error_fatal28.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_FATAL.agg_error_fatal28.next = next_c;
        field_combo.AGG_ERROR_FATAL.agg_error_fatal28.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal28.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_FATAL.agg_error_fatal28.load_next) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal28.value <= field_combo.AGG_ERROR_FATAL.agg_error_fatal28.next;
        end
    end
    assign hwif_out.AGG_ERROR_FATAL.agg_error_fatal28.value = field_storage.AGG_ERROR_FATAL.agg_error_fatal28.value;
    // Field: mci_reg.AGG_ERROR_FATAL.agg_error_fatal27
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal27.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal27.value & ~(decoded_wr_data[4:4] & decoded_wr_biten[4:4]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_FATAL.agg_error_fatal27.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_FATAL.agg_error_fatal27.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_FATAL.agg_error_fatal27.next = next_c;
        field_combo.AGG_ERROR_FATAL.agg_error_fatal27.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal27.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_FATAL.agg_error_fatal27.load_next) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal27.value <= field_combo.AGG_ERROR_FATAL.agg_error_fatal27.next;
        end
    end
    assign hwif_out.AGG_ERROR_FATAL.agg_error_fatal27.value = field_storage.AGG_ERROR_FATAL.agg_error_fatal27.value;
    // Field: mci_reg.AGG_ERROR_FATAL.agg_error_fatal26
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal26.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal26.value & ~(decoded_wr_data[5:5] & decoded_wr_biten[5:5]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_FATAL.agg_error_fatal26.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_FATAL.agg_error_fatal26.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_FATAL.agg_error_fatal26.next = next_c;
        field_combo.AGG_ERROR_FATAL.agg_error_fatal26.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal26.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_FATAL.agg_error_fatal26.load_next) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal26.value <= field_combo.AGG_ERROR_FATAL.agg_error_fatal26.next;
        end
    end
    assign hwif_out.AGG_ERROR_FATAL.agg_error_fatal26.value = field_storage.AGG_ERROR_FATAL.agg_error_fatal26.value;
    // Field: mci_reg.AGG_ERROR_FATAL.agg_error_fatal25
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal25.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal25.value & ~(decoded_wr_data[6:6] & decoded_wr_biten[6:6]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_FATAL.agg_error_fatal25.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_FATAL.agg_error_fatal25.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_FATAL.agg_error_fatal25.next = next_c;
        field_combo.AGG_ERROR_FATAL.agg_error_fatal25.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal25.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_FATAL.agg_error_fatal25.load_next) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal25.value <= field_combo.AGG_ERROR_FATAL.agg_error_fatal25.next;
        end
    end
    assign hwif_out.AGG_ERROR_FATAL.agg_error_fatal25.value = field_storage.AGG_ERROR_FATAL.agg_error_fatal25.value;
    // Field: mci_reg.AGG_ERROR_FATAL.agg_error_fatal24
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal24.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal24.value & ~(decoded_wr_data[7:7] & decoded_wr_biten[7:7]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_FATAL.agg_error_fatal24.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_FATAL.agg_error_fatal24.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_FATAL.agg_error_fatal24.next = next_c;
        field_combo.AGG_ERROR_FATAL.agg_error_fatal24.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal24.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_FATAL.agg_error_fatal24.load_next) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal24.value <= field_combo.AGG_ERROR_FATAL.agg_error_fatal24.next;
        end
    end
    assign hwif_out.AGG_ERROR_FATAL.agg_error_fatal24.value = field_storage.AGG_ERROR_FATAL.agg_error_fatal24.value;
    // Field: mci_reg.AGG_ERROR_FATAL.agg_error_fatal23
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal23.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal23.value & ~(decoded_wr_data[8:8] & decoded_wr_biten[8:8]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_FATAL.agg_error_fatal23.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_FATAL.agg_error_fatal23.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_FATAL.agg_error_fatal23.next = next_c;
        field_combo.AGG_ERROR_FATAL.agg_error_fatal23.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal23.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_FATAL.agg_error_fatal23.load_next) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal23.value <= field_combo.AGG_ERROR_FATAL.agg_error_fatal23.next;
        end
    end
    assign hwif_out.AGG_ERROR_FATAL.agg_error_fatal23.value = field_storage.AGG_ERROR_FATAL.agg_error_fatal23.value;
    // Field: mci_reg.AGG_ERROR_FATAL.agg_error_fatal22
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal22.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal22.value & ~(decoded_wr_data[9:9] & decoded_wr_biten[9:9]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_FATAL.agg_error_fatal22.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_FATAL.agg_error_fatal22.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_FATAL.agg_error_fatal22.next = next_c;
        field_combo.AGG_ERROR_FATAL.agg_error_fatal22.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal22.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_FATAL.agg_error_fatal22.load_next) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal22.value <= field_combo.AGG_ERROR_FATAL.agg_error_fatal22.next;
        end
    end
    assign hwif_out.AGG_ERROR_FATAL.agg_error_fatal22.value = field_storage.AGG_ERROR_FATAL.agg_error_fatal22.value;
    // Field: mci_reg.AGG_ERROR_FATAL.agg_error_fatal21
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal21.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal21.value & ~(decoded_wr_data[10:10] & decoded_wr_biten[10:10]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_FATAL.agg_error_fatal21.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_FATAL.agg_error_fatal21.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_FATAL.agg_error_fatal21.next = next_c;
        field_combo.AGG_ERROR_FATAL.agg_error_fatal21.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal21.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_FATAL.agg_error_fatal21.load_next) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal21.value <= field_combo.AGG_ERROR_FATAL.agg_error_fatal21.next;
        end
    end
    assign hwif_out.AGG_ERROR_FATAL.agg_error_fatal21.value = field_storage.AGG_ERROR_FATAL.agg_error_fatal21.value;
    // Field: mci_reg.AGG_ERROR_FATAL.agg_error_fatal20
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal20.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal20.value & ~(decoded_wr_data[11:11] & decoded_wr_biten[11:11]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_FATAL.agg_error_fatal20.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_FATAL.agg_error_fatal20.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_FATAL.agg_error_fatal20.next = next_c;
        field_combo.AGG_ERROR_FATAL.agg_error_fatal20.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal20.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_FATAL.agg_error_fatal20.load_next) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal20.value <= field_combo.AGG_ERROR_FATAL.agg_error_fatal20.next;
        end
    end
    assign hwif_out.AGG_ERROR_FATAL.agg_error_fatal20.value = field_storage.AGG_ERROR_FATAL.agg_error_fatal20.value;
    // Field: mci_reg.AGG_ERROR_FATAL.agg_error_fatal19
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal19.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal19.value & ~(decoded_wr_data[12:12] & decoded_wr_biten[12:12]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_FATAL.agg_error_fatal19.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_FATAL.agg_error_fatal19.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_FATAL.agg_error_fatal19.next = next_c;
        field_combo.AGG_ERROR_FATAL.agg_error_fatal19.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal19.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_FATAL.agg_error_fatal19.load_next) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal19.value <= field_combo.AGG_ERROR_FATAL.agg_error_fatal19.next;
        end
    end
    assign hwif_out.AGG_ERROR_FATAL.agg_error_fatal19.value = field_storage.AGG_ERROR_FATAL.agg_error_fatal19.value;
    // Field: mci_reg.AGG_ERROR_FATAL.agg_error_fatal18
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal18.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal18.value & ~(decoded_wr_data[13:13] & decoded_wr_biten[13:13]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_FATAL.agg_error_fatal18.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_FATAL.agg_error_fatal18.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_FATAL.agg_error_fatal18.next = next_c;
        field_combo.AGG_ERROR_FATAL.agg_error_fatal18.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal18.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_FATAL.agg_error_fatal18.load_next) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal18.value <= field_combo.AGG_ERROR_FATAL.agg_error_fatal18.next;
        end
    end
    assign hwif_out.AGG_ERROR_FATAL.agg_error_fatal18.value = field_storage.AGG_ERROR_FATAL.agg_error_fatal18.value;
    // Field: mci_reg.AGG_ERROR_FATAL.agg_error_fatal17
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal17.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal17.value & ~(decoded_wr_data[14:14] & decoded_wr_biten[14:14]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_FATAL.agg_error_fatal17.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_FATAL.agg_error_fatal17.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_FATAL.agg_error_fatal17.next = next_c;
        field_combo.AGG_ERROR_FATAL.agg_error_fatal17.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal17.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_FATAL.agg_error_fatal17.load_next) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal17.value <= field_combo.AGG_ERROR_FATAL.agg_error_fatal17.next;
        end
    end
    assign hwif_out.AGG_ERROR_FATAL.agg_error_fatal17.value = field_storage.AGG_ERROR_FATAL.agg_error_fatal17.value;
    // Field: mci_reg.AGG_ERROR_FATAL.agg_error_fatal16
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal16.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal16.value & ~(decoded_wr_data[15:15] & decoded_wr_biten[15:15]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_FATAL.agg_error_fatal16.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_FATAL.agg_error_fatal16.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_FATAL.agg_error_fatal16.next = next_c;
        field_combo.AGG_ERROR_FATAL.agg_error_fatal16.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal16.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_FATAL.agg_error_fatal16.load_next) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal16.value <= field_combo.AGG_ERROR_FATAL.agg_error_fatal16.next;
        end
    end
    assign hwif_out.AGG_ERROR_FATAL.agg_error_fatal16.value = field_storage.AGG_ERROR_FATAL.agg_error_fatal16.value;
    // Field: mci_reg.AGG_ERROR_FATAL.agg_error_fatal15
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal15.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal15.value & ~(decoded_wr_data[16:16] & decoded_wr_biten[16:16]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_FATAL.agg_error_fatal15.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_FATAL.agg_error_fatal15.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_FATAL.agg_error_fatal15.next = next_c;
        field_combo.AGG_ERROR_FATAL.agg_error_fatal15.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal15.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_FATAL.agg_error_fatal15.load_next) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal15.value <= field_combo.AGG_ERROR_FATAL.agg_error_fatal15.next;
        end
    end
    assign hwif_out.AGG_ERROR_FATAL.agg_error_fatal15.value = field_storage.AGG_ERROR_FATAL.agg_error_fatal15.value;
    // Field: mci_reg.AGG_ERROR_FATAL.agg_error_fatal14
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal14.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal14.value & ~(decoded_wr_data[17:17] & decoded_wr_biten[17:17]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_FATAL.agg_error_fatal14.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_FATAL.agg_error_fatal14.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_FATAL.agg_error_fatal14.next = next_c;
        field_combo.AGG_ERROR_FATAL.agg_error_fatal14.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal14.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_FATAL.agg_error_fatal14.load_next) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal14.value <= field_combo.AGG_ERROR_FATAL.agg_error_fatal14.next;
        end
    end
    assign hwif_out.AGG_ERROR_FATAL.agg_error_fatal14.value = field_storage.AGG_ERROR_FATAL.agg_error_fatal14.value;
    // Field: mci_reg.AGG_ERROR_FATAL.agg_error_fatal13
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal13.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal13.value & ~(decoded_wr_data[18:18] & decoded_wr_biten[18:18]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_FATAL.agg_error_fatal13.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_FATAL.agg_error_fatal13.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_FATAL.agg_error_fatal13.next = next_c;
        field_combo.AGG_ERROR_FATAL.agg_error_fatal13.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal13.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_FATAL.agg_error_fatal13.load_next) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal13.value <= field_combo.AGG_ERROR_FATAL.agg_error_fatal13.next;
        end
    end
    assign hwif_out.AGG_ERROR_FATAL.agg_error_fatal13.value = field_storage.AGG_ERROR_FATAL.agg_error_fatal13.value;
    // Field: mci_reg.AGG_ERROR_FATAL.agg_error_fatal12
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal12.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal12.value & ~(decoded_wr_data[19:19] & decoded_wr_biten[19:19]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_FATAL.agg_error_fatal12.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_FATAL.agg_error_fatal12.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_FATAL.agg_error_fatal12.next = next_c;
        field_combo.AGG_ERROR_FATAL.agg_error_fatal12.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal12.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_FATAL.agg_error_fatal12.load_next) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal12.value <= field_combo.AGG_ERROR_FATAL.agg_error_fatal12.next;
        end
    end
    assign hwif_out.AGG_ERROR_FATAL.agg_error_fatal12.value = field_storage.AGG_ERROR_FATAL.agg_error_fatal12.value;
    // Field: mci_reg.AGG_ERROR_FATAL.agg_error_fatal11
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal11.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal11.value & ~(decoded_wr_data[20:20] & decoded_wr_biten[20:20]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_FATAL.agg_error_fatal11.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_FATAL.agg_error_fatal11.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_FATAL.agg_error_fatal11.next = next_c;
        field_combo.AGG_ERROR_FATAL.agg_error_fatal11.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal11.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_FATAL.agg_error_fatal11.load_next) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal11.value <= field_combo.AGG_ERROR_FATAL.agg_error_fatal11.next;
        end
    end
    assign hwif_out.AGG_ERROR_FATAL.agg_error_fatal11.value = field_storage.AGG_ERROR_FATAL.agg_error_fatal11.value;
    // Field: mci_reg.AGG_ERROR_FATAL.agg_error_fatal10
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal10.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal10.value & ~(decoded_wr_data[21:21] & decoded_wr_biten[21:21]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_FATAL.agg_error_fatal10.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_FATAL.agg_error_fatal10.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_FATAL.agg_error_fatal10.next = next_c;
        field_combo.AGG_ERROR_FATAL.agg_error_fatal10.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal10.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_FATAL.agg_error_fatal10.load_next) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal10.value <= field_combo.AGG_ERROR_FATAL.agg_error_fatal10.next;
        end
    end
    assign hwif_out.AGG_ERROR_FATAL.agg_error_fatal10.value = field_storage.AGG_ERROR_FATAL.agg_error_fatal10.value;
    // Field: mci_reg.AGG_ERROR_FATAL.agg_error_fatal9
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal9.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal9.value & ~(decoded_wr_data[22:22] & decoded_wr_biten[22:22]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_FATAL.agg_error_fatal9.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_FATAL.agg_error_fatal9.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_FATAL.agg_error_fatal9.next = next_c;
        field_combo.AGG_ERROR_FATAL.agg_error_fatal9.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal9.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_FATAL.agg_error_fatal9.load_next) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal9.value <= field_combo.AGG_ERROR_FATAL.agg_error_fatal9.next;
        end
    end
    assign hwif_out.AGG_ERROR_FATAL.agg_error_fatal9.value = field_storage.AGG_ERROR_FATAL.agg_error_fatal9.value;
    // Field: mci_reg.AGG_ERROR_FATAL.agg_error_fatal8
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal8.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal8.value & ~(decoded_wr_data[23:23] & decoded_wr_biten[23:23]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_FATAL.agg_error_fatal8.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_FATAL.agg_error_fatal8.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_FATAL.agg_error_fatal8.next = next_c;
        field_combo.AGG_ERROR_FATAL.agg_error_fatal8.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal8.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_FATAL.agg_error_fatal8.load_next) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal8.value <= field_combo.AGG_ERROR_FATAL.agg_error_fatal8.next;
        end
    end
    assign hwif_out.AGG_ERROR_FATAL.agg_error_fatal8.value = field_storage.AGG_ERROR_FATAL.agg_error_fatal8.value;
    // Field: mci_reg.AGG_ERROR_FATAL.agg_error_fatal7
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal7.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal7.value & ~(decoded_wr_data[24:24] & decoded_wr_biten[24:24]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_FATAL.agg_error_fatal7.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_FATAL.agg_error_fatal7.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_FATAL.agg_error_fatal7.next = next_c;
        field_combo.AGG_ERROR_FATAL.agg_error_fatal7.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal7.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_FATAL.agg_error_fatal7.load_next) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal7.value <= field_combo.AGG_ERROR_FATAL.agg_error_fatal7.next;
        end
    end
    assign hwif_out.AGG_ERROR_FATAL.agg_error_fatal7.value = field_storage.AGG_ERROR_FATAL.agg_error_fatal7.value;
    // Field: mci_reg.AGG_ERROR_FATAL.agg_error_fatal6
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal6.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal6.value & ~(decoded_wr_data[25:25] & decoded_wr_biten[25:25]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_FATAL.agg_error_fatal6.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_FATAL.agg_error_fatal6.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_FATAL.agg_error_fatal6.next = next_c;
        field_combo.AGG_ERROR_FATAL.agg_error_fatal6.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal6.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_FATAL.agg_error_fatal6.load_next) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal6.value <= field_combo.AGG_ERROR_FATAL.agg_error_fatal6.next;
        end
    end
    assign hwif_out.AGG_ERROR_FATAL.agg_error_fatal6.value = field_storage.AGG_ERROR_FATAL.agg_error_fatal6.value;
    // Field: mci_reg.AGG_ERROR_FATAL.agg_error_fatal5
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal5.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal5.value & ~(decoded_wr_data[26:26] & decoded_wr_biten[26:26]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_FATAL.agg_error_fatal5.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_FATAL.agg_error_fatal5.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_FATAL.agg_error_fatal5.next = next_c;
        field_combo.AGG_ERROR_FATAL.agg_error_fatal5.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal5.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_FATAL.agg_error_fatal5.load_next) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal5.value <= field_combo.AGG_ERROR_FATAL.agg_error_fatal5.next;
        end
    end
    assign hwif_out.AGG_ERROR_FATAL.agg_error_fatal5.value = field_storage.AGG_ERROR_FATAL.agg_error_fatal5.value;
    // Field: mci_reg.AGG_ERROR_FATAL.agg_error_fatal4
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal4.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal4.value & ~(decoded_wr_data[27:27] & decoded_wr_biten[27:27]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_FATAL.agg_error_fatal4.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_FATAL.agg_error_fatal4.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_FATAL.agg_error_fatal4.next = next_c;
        field_combo.AGG_ERROR_FATAL.agg_error_fatal4.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal4.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_FATAL.agg_error_fatal4.load_next) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal4.value <= field_combo.AGG_ERROR_FATAL.agg_error_fatal4.next;
        end
    end
    assign hwif_out.AGG_ERROR_FATAL.agg_error_fatal4.value = field_storage.AGG_ERROR_FATAL.agg_error_fatal4.value;
    // Field: mci_reg.AGG_ERROR_FATAL.agg_error_fatal3
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal3.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal3.value & ~(decoded_wr_data[28:28] & decoded_wr_biten[28:28]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_FATAL.agg_error_fatal3.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_FATAL.agg_error_fatal3.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_FATAL.agg_error_fatal3.next = next_c;
        field_combo.AGG_ERROR_FATAL.agg_error_fatal3.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal3.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_FATAL.agg_error_fatal3.load_next) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal3.value <= field_combo.AGG_ERROR_FATAL.agg_error_fatal3.next;
        end
    end
    assign hwif_out.AGG_ERROR_FATAL.agg_error_fatal3.value = field_storage.AGG_ERROR_FATAL.agg_error_fatal3.value;
    // Field: mci_reg.AGG_ERROR_FATAL.agg_error_fatal2
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal2.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal2.value & ~(decoded_wr_data[29:29] & decoded_wr_biten[29:29]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_FATAL.agg_error_fatal2.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_FATAL.agg_error_fatal2.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_FATAL.agg_error_fatal2.next = next_c;
        field_combo.AGG_ERROR_FATAL.agg_error_fatal2.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal2.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_FATAL.agg_error_fatal2.load_next) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal2.value <= field_combo.AGG_ERROR_FATAL.agg_error_fatal2.next;
        end
    end
    assign hwif_out.AGG_ERROR_FATAL.agg_error_fatal2.value = field_storage.AGG_ERROR_FATAL.agg_error_fatal2.value;
    // Field: mci_reg.AGG_ERROR_FATAL.agg_error_fatal1
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal1.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal1.value & ~(decoded_wr_data[30:30] & decoded_wr_biten[30:30]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_FATAL.agg_error_fatal1.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_FATAL.agg_error_fatal1.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_FATAL.agg_error_fatal1.next = next_c;
        field_combo.AGG_ERROR_FATAL.agg_error_fatal1.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal1.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_FATAL.agg_error_fatal1.load_next) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal1.value <= field_combo.AGG_ERROR_FATAL.agg_error_fatal1.next;
        end
    end
    assign hwif_out.AGG_ERROR_FATAL.agg_error_fatal1.value = field_storage.AGG_ERROR_FATAL.agg_error_fatal1.value;
    // Field: mci_reg.AGG_ERROR_FATAL.agg_error_fatal0
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal0.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_FATAL.agg_error_fatal0.value & ~(decoded_wr_data[31:31] & decoded_wr_biten[31:31]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_FATAL.agg_error_fatal0.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_FATAL.agg_error_fatal0.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_FATAL.agg_error_fatal0.next = next_c;
        field_combo.AGG_ERROR_FATAL.agg_error_fatal0.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal0.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_FATAL.agg_error_fatal0.load_next) begin
            field_storage.AGG_ERROR_FATAL.agg_error_fatal0.value <= field_combo.AGG_ERROR_FATAL.agg_error_fatal0.next;
        end
    end
    assign hwif_out.AGG_ERROR_FATAL.agg_error_fatal0.value = field_storage.AGG_ERROR_FATAL.agg_error_fatal0.value;
    // Field: mci_reg.HW_ERROR_NON_FATAL.RSVD
    always_comb begin
        automatic logic [0:0] next_c = field_storage.HW_ERROR_NON_FATAL.RSVD.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.HW_ERROR_NON_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.HW_ERROR_NON_FATAL.RSVD.value & ~(decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else if(hwif_in.HW_ERROR_NON_FATAL.RSVD.we) begin // HW Write - we
            next_c = hwif_in.HW_ERROR_NON_FATAL.RSVD.next;
            load_next_c = '1;
        end
        field_combo.HW_ERROR_NON_FATAL.RSVD.next = next_c;
        field_combo.HW_ERROR_NON_FATAL.RSVD.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.HW_ERROR_NON_FATAL.RSVD.value <= 1'h0;
        end else if(field_combo.HW_ERROR_NON_FATAL.RSVD.load_next) begin
            field_storage.HW_ERROR_NON_FATAL.RSVD.value <= field_combo.HW_ERROR_NON_FATAL.RSVD.next;
        end
    end
    assign hwif_out.HW_ERROR_NON_FATAL.RSVD.value = field_storage.HW_ERROR_NON_FATAL.RSVD.value;
    // Field: mci_reg.AGG_ERROR_NON_FATAL.agg_error_non_fatal31
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal31.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_NON_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal31.value & ~(decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal31.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal31.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal31.next = next_c;
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal31.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal31.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal31.load_next) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal31.value <= field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal31.next;
        end
    end
    assign hwif_out.AGG_ERROR_NON_FATAL.agg_error_non_fatal31.value = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal31.value;
    // Field: mci_reg.AGG_ERROR_NON_FATAL.agg_error_non_fatal30
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal30.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_NON_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal30.value & ~(decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal30.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal30.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal30.next = next_c;
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal30.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal30.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal30.load_next) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal30.value <= field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal30.next;
        end
    end
    assign hwif_out.AGG_ERROR_NON_FATAL.agg_error_non_fatal30.value = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal30.value;
    // Field: mci_reg.AGG_ERROR_NON_FATAL.agg_error_non_fatal29
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal29.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_NON_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal29.value & ~(decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal29.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal29.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal29.next = next_c;
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal29.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal29.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal29.load_next) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal29.value <= field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal29.next;
        end
    end
    assign hwif_out.AGG_ERROR_NON_FATAL.agg_error_non_fatal29.value = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal29.value;
    // Field: mci_reg.AGG_ERROR_NON_FATAL.agg_error_non_fatal28
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal28.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_NON_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal28.value & ~(decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal28.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal28.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal28.next = next_c;
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal28.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal28.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal28.load_next) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal28.value <= field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal28.next;
        end
    end
    assign hwif_out.AGG_ERROR_NON_FATAL.agg_error_non_fatal28.value = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal28.value;
    // Field: mci_reg.AGG_ERROR_NON_FATAL.agg_error_non_fatal27
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal27.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_NON_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal27.value & ~(decoded_wr_data[4:4] & decoded_wr_biten[4:4]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal27.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal27.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal27.next = next_c;
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal27.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal27.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal27.load_next) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal27.value <= field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal27.next;
        end
    end
    assign hwif_out.AGG_ERROR_NON_FATAL.agg_error_non_fatal27.value = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal27.value;
    // Field: mci_reg.AGG_ERROR_NON_FATAL.agg_error_non_fatal26
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal26.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_NON_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal26.value & ~(decoded_wr_data[5:5] & decoded_wr_biten[5:5]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal26.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal26.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal26.next = next_c;
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal26.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal26.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal26.load_next) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal26.value <= field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal26.next;
        end
    end
    assign hwif_out.AGG_ERROR_NON_FATAL.agg_error_non_fatal26.value = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal26.value;
    // Field: mci_reg.AGG_ERROR_NON_FATAL.agg_error_non_fatal25
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal25.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_NON_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal25.value & ~(decoded_wr_data[6:6] & decoded_wr_biten[6:6]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal25.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal25.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal25.next = next_c;
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal25.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal25.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal25.load_next) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal25.value <= field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal25.next;
        end
    end
    assign hwif_out.AGG_ERROR_NON_FATAL.agg_error_non_fatal25.value = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal25.value;
    // Field: mci_reg.AGG_ERROR_NON_FATAL.agg_error_non_fatal24
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal24.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_NON_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal24.value & ~(decoded_wr_data[7:7] & decoded_wr_biten[7:7]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal24.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal24.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal24.next = next_c;
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal24.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal24.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal24.load_next) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal24.value <= field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal24.next;
        end
    end
    assign hwif_out.AGG_ERROR_NON_FATAL.agg_error_non_fatal24.value = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal24.value;
    // Field: mci_reg.AGG_ERROR_NON_FATAL.agg_error_non_fatal23
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal23.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_NON_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal23.value & ~(decoded_wr_data[8:8] & decoded_wr_biten[8:8]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal23.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal23.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal23.next = next_c;
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal23.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal23.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal23.load_next) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal23.value <= field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal23.next;
        end
    end
    assign hwif_out.AGG_ERROR_NON_FATAL.agg_error_non_fatal23.value = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal23.value;
    // Field: mci_reg.AGG_ERROR_NON_FATAL.agg_error_non_fatal22
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal22.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_NON_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal22.value & ~(decoded_wr_data[9:9] & decoded_wr_biten[9:9]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal22.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal22.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal22.next = next_c;
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal22.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal22.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal22.load_next) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal22.value <= field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal22.next;
        end
    end
    assign hwif_out.AGG_ERROR_NON_FATAL.agg_error_non_fatal22.value = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal22.value;
    // Field: mci_reg.AGG_ERROR_NON_FATAL.agg_error_non_fatal21
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal21.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_NON_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal21.value & ~(decoded_wr_data[10:10] & decoded_wr_biten[10:10]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal21.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal21.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal21.next = next_c;
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal21.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal21.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal21.load_next) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal21.value <= field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal21.next;
        end
    end
    assign hwif_out.AGG_ERROR_NON_FATAL.agg_error_non_fatal21.value = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal21.value;
    // Field: mci_reg.AGG_ERROR_NON_FATAL.agg_error_non_fatal20
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal20.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_NON_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal20.value & ~(decoded_wr_data[11:11] & decoded_wr_biten[11:11]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal20.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal20.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal20.next = next_c;
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal20.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal20.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal20.load_next) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal20.value <= field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal20.next;
        end
    end
    assign hwif_out.AGG_ERROR_NON_FATAL.agg_error_non_fatal20.value = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal20.value;
    // Field: mci_reg.AGG_ERROR_NON_FATAL.agg_error_non_fatal19
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal19.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_NON_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal19.value & ~(decoded_wr_data[12:12] & decoded_wr_biten[12:12]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal19.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal19.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal19.next = next_c;
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal19.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal19.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal19.load_next) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal19.value <= field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal19.next;
        end
    end
    assign hwif_out.AGG_ERROR_NON_FATAL.agg_error_non_fatal19.value = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal19.value;
    // Field: mci_reg.AGG_ERROR_NON_FATAL.agg_error_non_fatal18
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal18.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_NON_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal18.value & ~(decoded_wr_data[13:13] & decoded_wr_biten[13:13]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal18.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal18.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal18.next = next_c;
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal18.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal18.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal18.load_next) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal18.value <= field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal18.next;
        end
    end
    assign hwif_out.AGG_ERROR_NON_FATAL.agg_error_non_fatal18.value = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal18.value;
    // Field: mci_reg.AGG_ERROR_NON_FATAL.agg_error_non_fatal17
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal17.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_NON_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal17.value & ~(decoded_wr_data[14:14] & decoded_wr_biten[14:14]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal17.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal17.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal17.next = next_c;
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal17.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal17.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal17.load_next) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal17.value <= field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal17.next;
        end
    end
    assign hwif_out.AGG_ERROR_NON_FATAL.agg_error_non_fatal17.value = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal17.value;
    // Field: mci_reg.AGG_ERROR_NON_FATAL.agg_error_non_fatal16
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal16.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_NON_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal16.value & ~(decoded_wr_data[15:15] & decoded_wr_biten[15:15]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal16.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal16.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal16.next = next_c;
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal16.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal16.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal16.load_next) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal16.value <= field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal16.next;
        end
    end
    assign hwif_out.AGG_ERROR_NON_FATAL.agg_error_non_fatal16.value = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal16.value;
    // Field: mci_reg.AGG_ERROR_NON_FATAL.agg_error_non_fatal15
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal15.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_NON_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal15.value & ~(decoded_wr_data[16:16] & decoded_wr_biten[16:16]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal15.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal15.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal15.next = next_c;
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal15.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal15.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal15.load_next) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal15.value <= field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal15.next;
        end
    end
    assign hwif_out.AGG_ERROR_NON_FATAL.agg_error_non_fatal15.value = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal15.value;
    // Field: mci_reg.AGG_ERROR_NON_FATAL.agg_error_non_fatal14
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal14.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_NON_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal14.value & ~(decoded_wr_data[17:17] & decoded_wr_biten[17:17]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal14.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal14.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal14.next = next_c;
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal14.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal14.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal14.load_next) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal14.value <= field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal14.next;
        end
    end
    assign hwif_out.AGG_ERROR_NON_FATAL.agg_error_non_fatal14.value = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal14.value;
    // Field: mci_reg.AGG_ERROR_NON_FATAL.agg_error_non_fatal13
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal13.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_NON_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal13.value & ~(decoded_wr_data[18:18] & decoded_wr_biten[18:18]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal13.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal13.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal13.next = next_c;
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal13.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal13.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal13.load_next) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal13.value <= field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal13.next;
        end
    end
    assign hwif_out.AGG_ERROR_NON_FATAL.agg_error_non_fatal13.value = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal13.value;
    // Field: mci_reg.AGG_ERROR_NON_FATAL.agg_error_non_fatal12
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal12.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_NON_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal12.value & ~(decoded_wr_data[19:19] & decoded_wr_biten[19:19]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal12.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal12.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal12.next = next_c;
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal12.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal12.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal12.load_next) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal12.value <= field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal12.next;
        end
    end
    assign hwif_out.AGG_ERROR_NON_FATAL.agg_error_non_fatal12.value = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal12.value;
    // Field: mci_reg.AGG_ERROR_NON_FATAL.agg_error_non_fatal11
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal11.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_NON_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal11.value & ~(decoded_wr_data[20:20] & decoded_wr_biten[20:20]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal11.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal11.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal11.next = next_c;
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal11.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal11.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal11.load_next) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal11.value <= field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal11.next;
        end
    end
    assign hwif_out.AGG_ERROR_NON_FATAL.agg_error_non_fatal11.value = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal11.value;
    // Field: mci_reg.AGG_ERROR_NON_FATAL.agg_error_non_fatal10
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal10.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_NON_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal10.value & ~(decoded_wr_data[21:21] & decoded_wr_biten[21:21]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal10.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal10.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal10.next = next_c;
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal10.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal10.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal10.load_next) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal10.value <= field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal10.next;
        end
    end
    assign hwif_out.AGG_ERROR_NON_FATAL.agg_error_non_fatal10.value = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal10.value;
    // Field: mci_reg.AGG_ERROR_NON_FATAL.agg_error_non_fatal9
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal9.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_NON_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal9.value & ~(decoded_wr_data[22:22] & decoded_wr_biten[22:22]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal9.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal9.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal9.next = next_c;
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal9.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal9.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal9.load_next) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal9.value <= field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal9.next;
        end
    end
    assign hwif_out.AGG_ERROR_NON_FATAL.agg_error_non_fatal9.value = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal9.value;
    // Field: mci_reg.AGG_ERROR_NON_FATAL.agg_error_non_fatal8
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal8.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_NON_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal8.value & ~(decoded_wr_data[23:23] & decoded_wr_biten[23:23]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal8.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal8.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal8.next = next_c;
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal8.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal8.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal8.load_next) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal8.value <= field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal8.next;
        end
    end
    assign hwif_out.AGG_ERROR_NON_FATAL.agg_error_non_fatal8.value = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal8.value;
    // Field: mci_reg.AGG_ERROR_NON_FATAL.agg_error_non_fatal7
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal7.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_NON_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal7.value & ~(decoded_wr_data[24:24] & decoded_wr_biten[24:24]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal7.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal7.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal7.next = next_c;
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal7.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal7.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal7.load_next) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal7.value <= field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal7.next;
        end
    end
    assign hwif_out.AGG_ERROR_NON_FATAL.agg_error_non_fatal7.value = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal7.value;
    // Field: mci_reg.AGG_ERROR_NON_FATAL.agg_error_non_fatal6
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal6.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_NON_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal6.value & ~(decoded_wr_data[25:25] & decoded_wr_biten[25:25]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal6.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal6.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal6.next = next_c;
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal6.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal6.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal6.load_next) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal6.value <= field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal6.next;
        end
    end
    assign hwif_out.AGG_ERROR_NON_FATAL.agg_error_non_fatal6.value = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal6.value;
    // Field: mci_reg.AGG_ERROR_NON_FATAL.agg_error_non_fatal5
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal5.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_NON_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal5.value & ~(decoded_wr_data[26:26] & decoded_wr_biten[26:26]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal5.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal5.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal5.next = next_c;
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal5.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal5.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal5.load_next) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal5.value <= field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal5.next;
        end
    end
    assign hwif_out.AGG_ERROR_NON_FATAL.agg_error_non_fatal5.value = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal5.value;
    // Field: mci_reg.AGG_ERROR_NON_FATAL.agg_error_non_fatal4
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal4.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_NON_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal4.value & ~(decoded_wr_data[27:27] & decoded_wr_biten[27:27]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal4.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal4.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal4.next = next_c;
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal4.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal4.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal4.load_next) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal4.value <= field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal4.next;
        end
    end
    assign hwif_out.AGG_ERROR_NON_FATAL.agg_error_non_fatal4.value = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal4.value;
    // Field: mci_reg.AGG_ERROR_NON_FATAL.agg_error_non_fatal3
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal3.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_NON_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal3.value & ~(decoded_wr_data[28:28] & decoded_wr_biten[28:28]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal3.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal3.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal3.next = next_c;
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal3.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal3.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal3.load_next) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal3.value <= field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal3.next;
        end
    end
    assign hwif_out.AGG_ERROR_NON_FATAL.agg_error_non_fatal3.value = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal3.value;
    // Field: mci_reg.AGG_ERROR_NON_FATAL.agg_error_non_fatal2
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal2.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_NON_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal2.value & ~(decoded_wr_data[29:29] & decoded_wr_biten[29:29]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal2.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal2.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal2.next = next_c;
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal2.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal2.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal2.load_next) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal2.value <= field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal2.next;
        end
    end
    assign hwif_out.AGG_ERROR_NON_FATAL.agg_error_non_fatal2.value = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal2.value;
    // Field: mci_reg.AGG_ERROR_NON_FATAL.agg_error_non_fatal1
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal1.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_NON_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal1.value & ~(decoded_wr_data[30:30] & decoded_wr_biten[30:30]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal1.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal1.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal1.next = next_c;
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal1.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal1.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal1.load_next) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal1.value <= field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal1.next;
        end
    end
    assign hwif_out.AGG_ERROR_NON_FATAL.agg_error_non_fatal1.value = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal1.value;
    // Field: mci_reg.AGG_ERROR_NON_FATAL.agg_error_non_fatal0
    always_comb begin
        automatic logic [0:0] next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal0.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.AGG_ERROR_NON_FATAL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal0.value & ~(decoded_wr_data[31:31] & decoded_wr_biten[31:31]);
            load_next_c = '1;
        end else if(hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal0.we) begin // HW Write - we
            next_c = hwif_in.AGG_ERROR_NON_FATAL.agg_error_non_fatal0.next;
            load_next_c = '1;
        end
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal0.next = next_c;
        field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal0.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal0.value <= 1'h0;
        end else if(field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal0.load_next) begin
            field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal0.value <= field_combo.AGG_ERROR_NON_FATAL.agg_error_non_fatal0.next;
        end
    end
    assign hwif_out.AGG_ERROR_NON_FATAL.agg_error_non_fatal0.value = field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal0.value;
    // Field: mci_reg.FW_ERROR_FATAL.error_code
    always_comb begin
        automatic logic [31:0] next_c = field_storage.FW_ERROR_FATAL.error_code.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.FW_ERROR_FATAL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.FW_ERROR_FATAL.error_code.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.FW_ERROR_FATAL.error_code.we) begin // HW Write - we
            next_c = hwif_in.FW_ERROR_FATAL.error_code.next;
            load_next_c = '1;
        end
        field_combo.FW_ERROR_FATAL.error_code.next = next_c;
        field_combo.FW_ERROR_FATAL.error_code.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.FW_ERROR_FATAL.error_code.value <= 32'h0;
        end else if(field_combo.FW_ERROR_FATAL.error_code.load_next) begin
            field_storage.FW_ERROR_FATAL.error_code.value <= field_combo.FW_ERROR_FATAL.error_code.next;
        end
    end
    assign hwif_out.FW_ERROR_FATAL.error_code.value = field_storage.FW_ERROR_FATAL.error_code.value;
    assign hwif_out.FW_ERROR_FATAL.error_code.swmod = decoded_reg_strb.FW_ERROR_FATAL && decoded_req_is_wr;
    // Field: mci_reg.FW_ERROR_NON_FATAL.error_code
    always_comb begin
        automatic logic [31:0] next_c = field_storage.FW_ERROR_NON_FATAL.error_code.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.FW_ERROR_NON_FATAL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.FW_ERROR_NON_FATAL.error_code.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.FW_ERROR_NON_FATAL.error_code.we) begin // HW Write - we
            next_c = hwif_in.FW_ERROR_NON_FATAL.error_code.next;
            load_next_c = '1;
        end
        field_combo.FW_ERROR_NON_FATAL.error_code.next = next_c;
        field_combo.FW_ERROR_NON_FATAL.error_code.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.FW_ERROR_NON_FATAL.error_code.value <= 32'h0;
        end else if(field_combo.FW_ERROR_NON_FATAL.error_code.load_next) begin
            field_storage.FW_ERROR_NON_FATAL.error_code.value <= field_combo.FW_ERROR_NON_FATAL.error_code.next;
        end
    end
    assign hwif_out.FW_ERROR_NON_FATAL.error_code.value = field_storage.FW_ERROR_NON_FATAL.error_code.value;
    assign hwif_out.FW_ERROR_NON_FATAL.error_code.swmod = decoded_reg_strb.FW_ERROR_NON_FATAL && decoded_req_is_wr;
    // Field: mci_reg.HW_ERROR_ENC.error_code
    always_comb begin
        automatic logic [31:0] next_c = field_storage.HW_ERROR_ENC.error_code.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.HW_ERROR_ENC && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.HW_ERROR_ENC.error_code.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.HW_ERROR_ENC.error_code.next = next_c;
        field_combo.HW_ERROR_ENC.error_code.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.HW_ERROR_ENC.error_code.value <= 32'h0;
        end else if(field_combo.HW_ERROR_ENC.error_code.load_next) begin
            field_storage.HW_ERROR_ENC.error_code.value <= field_combo.HW_ERROR_ENC.error_code.next;
        end
    end
    assign hwif_out.HW_ERROR_ENC.error_code.value = field_storage.HW_ERROR_ENC.error_code.value;
    // Field: mci_reg.FW_ERROR_ENC.error_code
    always_comb begin
        automatic logic [31:0] next_c = field_storage.FW_ERROR_ENC.error_code.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.FW_ERROR_ENC && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.FW_ERROR_ENC.error_code.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.FW_ERROR_ENC.error_code.next = next_c;
        field_combo.FW_ERROR_ENC.error_code.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.FW_ERROR_ENC.error_code.value <= 32'h0;
        end else if(field_combo.FW_ERROR_ENC.error_code.load_next) begin
            field_storage.FW_ERROR_ENC.error_code.value <= field_combo.FW_ERROR_ENC.error_code.next;
        end
    end
    assign hwif_out.FW_ERROR_ENC.error_code.value = field_storage.FW_ERROR_ENC.error_code.value;
    for(genvar i0=0; i0<8; i0++) begin
        // Field: mci_reg.FW_EXTENDED_ERROR_INFO[].error_info
        always_comb begin
            automatic logic [31:0] next_c = field_storage.FW_EXTENDED_ERROR_INFO[i0].error_info.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.FW_EXTENDED_ERROR_INFO[i0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage.FW_EXTENDED_ERROR_INFO[i0].error_info.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo.FW_EXTENDED_ERROR_INFO[i0].error_info.next = next_c;
            field_combo.FW_EXTENDED_ERROR_INFO[i0].error_info.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
            if(~hwif_in.mci_pwrgood) begin
                field_storage.FW_EXTENDED_ERROR_INFO[i0].error_info.value <= 32'h0;
            end else if(field_combo.FW_EXTENDED_ERROR_INFO[i0].error_info.load_next) begin
                field_storage.FW_EXTENDED_ERROR_INFO[i0].error_info.value <= field_combo.FW_EXTENDED_ERROR_INFO[i0].error_info.next;
            end
        end
        assign hwif_out.FW_EXTENDED_ERROR_INFO[i0].error_info.value = field_storage.FW_EXTENDED_ERROR_INFO[i0].error_info.value;
    end
    // Field: mci_reg.internal_hw_error_fatal_mask.mask_mcu_sram_ecc_unc
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_hw_error_fatal_mask.mask_mcu_sram_ecc_unc.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_hw_error_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_hw_error_fatal_mask.mask_mcu_sram_ecc_unc.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.internal_hw_error_fatal_mask.mask_mcu_sram_ecc_unc.next = next_c;
        field_combo.internal_hw_error_fatal_mask.mask_mcu_sram_ecc_unc.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_hw_error_fatal_mask.mask_mcu_sram_ecc_unc.value <= 1'h0;
        end else if(field_combo.internal_hw_error_fatal_mask.mask_mcu_sram_ecc_unc.load_next) begin
            field_storage.internal_hw_error_fatal_mask.mask_mcu_sram_ecc_unc.value <= field_combo.internal_hw_error_fatal_mask.mask_mcu_sram_ecc_unc.next;
        end
    end
    assign hwif_out.internal_hw_error_fatal_mask.mask_mcu_sram_ecc_unc.value = field_storage.internal_hw_error_fatal_mask.mask_mcu_sram_ecc_unc.value;
    // Field: mci_reg.internal_hw_error_fatal_mask.mask_nmi_pin
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_hw_error_fatal_mask.mask_nmi_pin.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_hw_error_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_hw_error_fatal_mask.mask_nmi_pin.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.internal_hw_error_fatal_mask.mask_nmi_pin.next = next_c;
        field_combo.internal_hw_error_fatal_mask.mask_nmi_pin.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_hw_error_fatal_mask.mask_nmi_pin.value <= 1'h0;
        end else if(field_combo.internal_hw_error_fatal_mask.mask_nmi_pin.load_next) begin
            field_storage.internal_hw_error_fatal_mask.mask_nmi_pin.value <= field_combo.internal_hw_error_fatal_mask.mask_nmi_pin.next;
        end
    end
    assign hwif_out.internal_hw_error_fatal_mask.mask_nmi_pin.value = field_storage.internal_hw_error_fatal_mask.mask_nmi_pin.value;
    // Field: mci_reg.internal_hw_error_non_fatal_mask.FIXME
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_hw_error_non_fatal_mask.FIXME.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_hw_error_non_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_hw_error_non_fatal_mask.FIXME.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.internal_hw_error_non_fatal_mask.FIXME.next = next_c;
        field_combo.internal_hw_error_non_fatal_mask.FIXME.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_hw_error_non_fatal_mask.FIXME.value <= 1'h0;
        end else if(field_combo.internal_hw_error_non_fatal_mask.FIXME.load_next) begin
            field_storage.internal_hw_error_non_fatal_mask.FIXME.value <= field_combo.internal_hw_error_non_fatal_mask.FIXME.next;
        end
    end
    assign hwif_out.internal_hw_error_non_fatal_mask.FIXME.value = field_storage.internal_hw_error_non_fatal_mask.FIXME.value;
    // Field: mci_reg.internal_agg_error_fatal_mask.mask_agg_error_fatal31
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal31.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal31.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal31.next = next_c;
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal31.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal31.value <= 1'h0;
        end else if(field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal31.load_next) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal31.value <= field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal31.next;
        end
    end
    assign hwif_out.internal_agg_error_fatal_mask.mask_agg_error_fatal31.value = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal31.value;
    // Field: mci_reg.internal_agg_error_fatal_mask.mask_agg_error_fatal30
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal30.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal30.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal30.next = next_c;
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal30.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal30.value <= 1'h0;
        end else if(field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal30.load_next) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal30.value <= field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal30.next;
        end
    end
    assign hwif_out.internal_agg_error_fatal_mask.mask_agg_error_fatal30.value = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal30.value;
    // Field: mci_reg.internal_agg_error_fatal_mask.mask_agg_error_fatal29
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal29.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal29.value & ~decoded_wr_biten[2:2]) | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal29.next = next_c;
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal29.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal29.value <= 1'h0;
        end else if(field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal29.load_next) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal29.value <= field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal29.next;
        end
    end
    assign hwif_out.internal_agg_error_fatal_mask.mask_agg_error_fatal29.value = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal29.value;
    // Field: mci_reg.internal_agg_error_fatal_mask.mask_agg_error_fatal28
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal28.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal28.value & ~decoded_wr_biten[3:3]) | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal28.next = next_c;
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal28.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal28.value <= 1'h0;
        end else if(field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal28.load_next) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal28.value <= field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal28.next;
        end
    end
    assign hwif_out.internal_agg_error_fatal_mask.mask_agg_error_fatal28.value = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal28.value;
    // Field: mci_reg.internal_agg_error_fatal_mask.mask_agg_error_fatal27
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal27.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal27.value & ~decoded_wr_biten[4:4]) | (decoded_wr_data[4:4] & decoded_wr_biten[4:4]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal27.next = next_c;
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal27.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal27.value <= 1'h0;
        end else if(field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal27.load_next) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal27.value <= field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal27.next;
        end
    end
    assign hwif_out.internal_agg_error_fatal_mask.mask_agg_error_fatal27.value = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal27.value;
    // Field: mci_reg.internal_agg_error_fatal_mask.mask_agg_error_fatal26
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal26.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal26.value & ~decoded_wr_biten[5:5]) | (decoded_wr_data[5:5] & decoded_wr_biten[5:5]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal26.next = next_c;
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal26.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal26.value <= 1'h0;
        end else if(field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal26.load_next) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal26.value <= field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal26.next;
        end
    end
    assign hwif_out.internal_agg_error_fatal_mask.mask_agg_error_fatal26.value = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal26.value;
    // Field: mci_reg.internal_agg_error_fatal_mask.mask_agg_error_fatal25
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal25.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal25.value & ~decoded_wr_biten[6:6]) | (decoded_wr_data[6:6] & decoded_wr_biten[6:6]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal25.next = next_c;
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal25.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal25.value <= 1'h0;
        end else if(field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal25.load_next) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal25.value <= field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal25.next;
        end
    end
    assign hwif_out.internal_agg_error_fatal_mask.mask_agg_error_fatal25.value = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal25.value;
    // Field: mci_reg.internal_agg_error_fatal_mask.mask_agg_error_fatal24
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal24.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal24.value & ~decoded_wr_biten[7:7]) | (decoded_wr_data[7:7] & decoded_wr_biten[7:7]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal24.next = next_c;
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal24.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal24.value <= 1'h0;
        end else if(field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal24.load_next) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal24.value <= field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal24.next;
        end
    end
    assign hwif_out.internal_agg_error_fatal_mask.mask_agg_error_fatal24.value = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal24.value;
    // Field: mci_reg.internal_agg_error_fatal_mask.mask_agg_error_fatal23
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal23.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal23.value & ~decoded_wr_biten[8:8]) | (decoded_wr_data[8:8] & decoded_wr_biten[8:8]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal23.next = next_c;
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal23.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal23.value <= 1'h0;
        end else if(field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal23.load_next) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal23.value <= field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal23.next;
        end
    end
    assign hwif_out.internal_agg_error_fatal_mask.mask_agg_error_fatal23.value = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal23.value;
    // Field: mci_reg.internal_agg_error_fatal_mask.mask_agg_error_fatal22
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal22.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal22.value & ~decoded_wr_biten[9:9]) | (decoded_wr_data[9:9] & decoded_wr_biten[9:9]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal22.next = next_c;
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal22.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal22.value <= 1'h0;
        end else if(field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal22.load_next) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal22.value <= field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal22.next;
        end
    end
    assign hwif_out.internal_agg_error_fatal_mask.mask_agg_error_fatal22.value = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal22.value;
    // Field: mci_reg.internal_agg_error_fatal_mask.mask_agg_error_fatal21
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal21.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal21.value & ~decoded_wr_biten[10:10]) | (decoded_wr_data[10:10] & decoded_wr_biten[10:10]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal21.next = next_c;
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal21.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal21.value <= 1'h0;
        end else if(field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal21.load_next) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal21.value <= field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal21.next;
        end
    end
    assign hwif_out.internal_agg_error_fatal_mask.mask_agg_error_fatal21.value = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal21.value;
    // Field: mci_reg.internal_agg_error_fatal_mask.mask_agg_error_fatal20
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal20.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal20.value & ~decoded_wr_biten[11:11]) | (decoded_wr_data[11:11] & decoded_wr_biten[11:11]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal20.next = next_c;
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal20.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal20.value <= 1'h0;
        end else if(field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal20.load_next) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal20.value <= field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal20.next;
        end
    end
    assign hwif_out.internal_agg_error_fatal_mask.mask_agg_error_fatal20.value = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal20.value;
    // Field: mci_reg.internal_agg_error_fatal_mask.mask_agg_error_fatal19
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal19.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal19.value & ~decoded_wr_biten[12:12]) | (decoded_wr_data[12:12] & decoded_wr_biten[12:12]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal19.next = next_c;
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal19.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal19.value <= 1'h0;
        end else if(field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal19.load_next) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal19.value <= field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal19.next;
        end
    end
    assign hwif_out.internal_agg_error_fatal_mask.mask_agg_error_fatal19.value = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal19.value;
    // Field: mci_reg.internal_agg_error_fatal_mask.mask_agg_error_fatal18
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal18.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal18.value & ~decoded_wr_biten[13:13]) | (decoded_wr_data[13:13] & decoded_wr_biten[13:13]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal18.next = next_c;
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal18.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal18.value <= 1'h0;
        end else if(field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal18.load_next) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal18.value <= field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal18.next;
        end
    end
    assign hwif_out.internal_agg_error_fatal_mask.mask_agg_error_fatal18.value = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal18.value;
    // Field: mci_reg.internal_agg_error_fatal_mask.mask_agg_error_fatal17
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal17.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal17.value & ~decoded_wr_biten[14:14]) | (decoded_wr_data[14:14] & decoded_wr_biten[14:14]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal17.next = next_c;
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal17.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal17.value <= 1'h0;
        end else if(field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal17.load_next) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal17.value <= field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal17.next;
        end
    end
    assign hwif_out.internal_agg_error_fatal_mask.mask_agg_error_fatal17.value = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal17.value;
    // Field: mci_reg.internal_agg_error_fatal_mask.mask_agg_error_fatal16
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal16.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal16.value & ~decoded_wr_biten[15:15]) | (decoded_wr_data[15:15] & decoded_wr_biten[15:15]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal16.next = next_c;
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal16.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal16.value <= 1'h0;
        end else if(field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal16.load_next) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal16.value <= field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal16.next;
        end
    end
    assign hwif_out.internal_agg_error_fatal_mask.mask_agg_error_fatal16.value = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal16.value;
    // Field: mci_reg.internal_agg_error_fatal_mask.mask_agg_error_fatal15
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal15.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal15.value & ~decoded_wr_biten[16:16]) | (decoded_wr_data[16:16] & decoded_wr_biten[16:16]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal15.next = next_c;
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal15.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal15.value <= 1'h0;
        end else if(field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal15.load_next) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal15.value <= field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal15.next;
        end
    end
    assign hwif_out.internal_agg_error_fatal_mask.mask_agg_error_fatal15.value = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal15.value;
    // Field: mci_reg.internal_agg_error_fatal_mask.mask_agg_error_fatal14
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal14.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal14.value & ~decoded_wr_biten[17:17]) | (decoded_wr_data[17:17] & decoded_wr_biten[17:17]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal14.next = next_c;
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal14.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal14.value <= 1'h0;
        end else if(field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal14.load_next) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal14.value <= field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal14.next;
        end
    end
    assign hwif_out.internal_agg_error_fatal_mask.mask_agg_error_fatal14.value = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal14.value;
    // Field: mci_reg.internal_agg_error_fatal_mask.mask_agg_error_fatal13
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal13.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal13.value & ~decoded_wr_biten[18:18]) | (decoded_wr_data[18:18] & decoded_wr_biten[18:18]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal13.next = next_c;
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal13.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal13.value <= 1'h0;
        end else if(field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal13.load_next) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal13.value <= field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal13.next;
        end
    end
    assign hwif_out.internal_agg_error_fatal_mask.mask_agg_error_fatal13.value = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal13.value;
    // Field: mci_reg.internal_agg_error_fatal_mask.mask_agg_error_fatal12
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal12.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal12.value & ~decoded_wr_biten[19:19]) | (decoded_wr_data[19:19] & decoded_wr_biten[19:19]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal12.next = next_c;
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal12.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal12.value <= 1'h0;
        end else if(field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal12.load_next) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal12.value <= field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal12.next;
        end
    end
    assign hwif_out.internal_agg_error_fatal_mask.mask_agg_error_fatal12.value = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal12.value;
    // Field: mci_reg.internal_agg_error_fatal_mask.mask_agg_error_fatal11
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal11.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal11.value & ~decoded_wr_biten[20:20]) | (decoded_wr_data[20:20] & decoded_wr_biten[20:20]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal11.next = next_c;
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal11.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal11.value <= 1'h0;
        end else if(field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal11.load_next) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal11.value <= field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal11.next;
        end
    end
    assign hwif_out.internal_agg_error_fatal_mask.mask_agg_error_fatal11.value = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal11.value;
    // Field: mci_reg.internal_agg_error_fatal_mask.mask_agg_error_fatal10
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal10.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal10.value & ~decoded_wr_biten[21:21]) | (decoded_wr_data[21:21] & decoded_wr_biten[21:21]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal10.next = next_c;
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal10.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal10.value <= 1'h0;
        end else if(field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal10.load_next) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal10.value <= field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal10.next;
        end
    end
    assign hwif_out.internal_agg_error_fatal_mask.mask_agg_error_fatal10.value = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal10.value;
    // Field: mci_reg.internal_agg_error_fatal_mask.mask_agg_error_fatal9
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal9.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal9.value & ~decoded_wr_biten[22:22]) | (decoded_wr_data[22:22] & decoded_wr_biten[22:22]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal9.next = next_c;
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal9.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal9.value <= 1'h0;
        end else if(field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal9.load_next) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal9.value <= field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal9.next;
        end
    end
    assign hwif_out.internal_agg_error_fatal_mask.mask_agg_error_fatal9.value = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal9.value;
    // Field: mci_reg.internal_agg_error_fatal_mask.mask_agg_error_fatal8
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal8.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal8.value & ~decoded_wr_biten[23:23]) | (decoded_wr_data[23:23] & decoded_wr_biten[23:23]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal8.next = next_c;
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal8.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal8.value <= 1'h0;
        end else if(field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal8.load_next) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal8.value <= field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal8.next;
        end
    end
    assign hwif_out.internal_agg_error_fatal_mask.mask_agg_error_fatal8.value = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal8.value;
    // Field: mci_reg.internal_agg_error_fatal_mask.mask_agg_error_fatal7
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal7.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal7.value & ~decoded_wr_biten[24:24]) | (decoded_wr_data[24:24] & decoded_wr_biten[24:24]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal7.next = next_c;
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal7.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal7.value <= 1'h0;
        end else if(field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal7.load_next) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal7.value <= field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal7.next;
        end
    end
    assign hwif_out.internal_agg_error_fatal_mask.mask_agg_error_fatal7.value = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal7.value;
    // Field: mci_reg.internal_agg_error_fatal_mask.mask_agg_error_fatal6
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal6.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal6.value & ~decoded_wr_biten[25:25]) | (decoded_wr_data[25:25] & decoded_wr_biten[25:25]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal6.next = next_c;
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal6.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal6.value <= 1'h0;
        end else if(field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal6.load_next) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal6.value <= field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal6.next;
        end
    end
    assign hwif_out.internal_agg_error_fatal_mask.mask_agg_error_fatal6.value = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal6.value;
    // Field: mci_reg.internal_agg_error_fatal_mask.mask_agg_error_fatal5
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal5.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal5.value & ~decoded_wr_biten[26:26]) | (decoded_wr_data[26:26] & decoded_wr_biten[26:26]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal5.next = next_c;
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal5.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal5.value <= 1'h0;
        end else if(field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal5.load_next) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal5.value <= field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal5.next;
        end
    end
    assign hwif_out.internal_agg_error_fatal_mask.mask_agg_error_fatal5.value = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal5.value;
    // Field: mci_reg.internal_agg_error_fatal_mask.mask_agg_error_fatal4
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal4.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal4.value & ~decoded_wr_biten[27:27]) | (decoded_wr_data[27:27] & decoded_wr_biten[27:27]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal4.next = next_c;
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal4.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal4.value <= 1'h0;
        end else if(field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal4.load_next) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal4.value <= field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal4.next;
        end
    end
    assign hwif_out.internal_agg_error_fatal_mask.mask_agg_error_fatal4.value = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal4.value;
    // Field: mci_reg.internal_agg_error_fatal_mask.mask_agg_error_fatal3
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal3.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal3.value & ~decoded_wr_biten[28:28]) | (decoded_wr_data[28:28] & decoded_wr_biten[28:28]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal3.next = next_c;
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal3.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal3.value <= 1'h0;
        end else if(field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal3.load_next) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal3.value <= field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal3.next;
        end
    end
    assign hwif_out.internal_agg_error_fatal_mask.mask_agg_error_fatal3.value = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal3.value;
    // Field: mci_reg.internal_agg_error_fatal_mask.mask_agg_error_fatal2
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal2.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal2.value & ~decoded_wr_biten[29:29]) | (decoded_wr_data[29:29] & decoded_wr_biten[29:29]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal2.next = next_c;
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal2.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal2.value <= 1'h0;
        end else if(field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal2.load_next) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal2.value <= field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal2.next;
        end
    end
    assign hwif_out.internal_agg_error_fatal_mask.mask_agg_error_fatal2.value = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal2.value;
    // Field: mci_reg.internal_agg_error_fatal_mask.mask_agg_error_fatal1
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal1.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal1.value & ~decoded_wr_biten[30:30]) | (decoded_wr_data[30:30] & decoded_wr_biten[30:30]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal1.next = next_c;
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal1.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal1.value <= 1'h0;
        end else if(field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal1.load_next) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal1.value <= field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal1.next;
        end
    end
    assign hwif_out.internal_agg_error_fatal_mask.mask_agg_error_fatal1.value = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal1.value;
    // Field: mci_reg.internal_agg_error_fatal_mask.mask_agg_error_fatal0
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal0.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal0.value & ~decoded_wr_biten[31:31]) | (decoded_wr_data[31:31] & decoded_wr_biten[31:31]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal0.next = next_c;
        field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal0.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal0.value <= 1'h0;
        end else if(field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal0.load_next) begin
            field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal0.value <= field_combo.internal_agg_error_fatal_mask.mask_agg_error_fatal0.next;
        end
    end
    assign hwif_out.internal_agg_error_fatal_mask.mask_agg_error_fatal0.value = field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal0.value;
    // Field: mci_reg.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal31
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal31.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_non_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal31.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal31.next = next_c;
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal31.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal31.value <= 1'h0;
        end else if(field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal31.load_next) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal31.value <= field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal31.next;
        end
    end
    assign hwif_out.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal31.value = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal31.value;
    // Field: mci_reg.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal30
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal30.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_non_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal30.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal30.next = next_c;
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal30.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal30.value <= 1'h0;
        end else if(field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal30.load_next) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal30.value <= field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal30.next;
        end
    end
    assign hwif_out.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal30.value = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal30.value;
    // Field: mci_reg.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal29
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal29.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_non_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal29.value & ~decoded_wr_biten[2:2]) | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal29.next = next_c;
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal29.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal29.value <= 1'h0;
        end else if(field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal29.load_next) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal29.value <= field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal29.next;
        end
    end
    assign hwif_out.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal29.value = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal29.value;
    // Field: mci_reg.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal28
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal28.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_non_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal28.value & ~decoded_wr_biten[3:3]) | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal28.next = next_c;
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal28.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal28.value <= 1'h0;
        end else if(field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal28.load_next) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal28.value <= field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal28.next;
        end
    end
    assign hwif_out.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal28.value = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal28.value;
    // Field: mci_reg.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal27
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal27.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_non_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal27.value & ~decoded_wr_biten[4:4]) | (decoded_wr_data[4:4] & decoded_wr_biten[4:4]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal27.next = next_c;
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal27.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal27.value <= 1'h0;
        end else if(field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal27.load_next) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal27.value <= field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal27.next;
        end
    end
    assign hwif_out.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal27.value = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal27.value;
    // Field: mci_reg.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal26
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal26.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_non_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal26.value & ~decoded_wr_biten[5:5]) | (decoded_wr_data[5:5] & decoded_wr_biten[5:5]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal26.next = next_c;
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal26.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal26.value <= 1'h0;
        end else if(field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal26.load_next) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal26.value <= field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal26.next;
        end
    end
    assign hwif_out.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal26.value = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal26.value;
    // Field: mci_reg.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal25
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal25.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_non_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal25.value & ~decoded_wr_biten[6:6]) | (decoded_wr_data[6:6] & decoded_wr_biten[6:6]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal25.next = next_c;
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal25.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal25.value <= 1'h0;
        end else if(field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal25.load_next) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal25.value <= field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal25.next;
        end
    end
    assign hwif_out.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal25.value = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal25.value;
    // Field: mci_reg.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal24
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal24.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_non_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal24.value & ~decoded_wr_biten[7:7]) | (decoded_wr_data[7:7] & decoded_wr_biten[7:7]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal24.next = next_c;
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal24.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal24.value <= 1'h0;
        end else if(field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal24.load_next) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal24.value <= field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal24.next;
        end
    end
    assign hwif_out.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal24.value = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal24.value;
    // Field: mci_reg.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal23
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal23.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_non_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal23.value & ~decoded_wr_biten[8:8]) | (decoded_wr_data[8:8] & decoded_wr_biten[8:8]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal23.next = next_c;
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal23.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal23.value <= 1'h0;
        end else if(field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal23.load_next) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal23.value <= field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal23.next;
        end
    end
    assign hwif_out.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal23.value = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal23.value;
    // Field: mci_reg.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal22
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal22.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_non_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal22.value & ~decoded_wr_biten[9:9]) | (decoded_wr_data[9:9] & decoded_wr_biten[9:9]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal22.next = next_c;
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal22.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal22.value <= 1'h0;
        end else if(field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal22.load_next) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal22.value <= field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal22.next;
        end
    end
    assign hwif_out.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal22.value = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal22.value;
    // Field: mci_reg.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal21
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal21.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_non_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal21.value & ~decoded_wr_biten[10:10]) | (decoded_wr_data[10:10] & decoded_wr_biten[10:10]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal21.next = next_c;
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal21.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal21.value <= 1'h0;
        end else if(field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal21.load_next) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal21.value <= field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal21.next;
        end
    end
    assign hwif_out.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal21.value = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal21.value;
    // Field: mci_reg.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal20
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal20.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_non_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal20.value & ~decoded_wr_biten[11:11]) | (decoded_wr_data[11:11] & decoded_wr_biten[11:11]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal20.next = next_c;
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal20.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal20.value <= 1'h0;
        end else if(field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal20.load_next) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal20.value <= field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal20.next;
        end
    end
    assign hwif_out.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal20.value = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal20.value;
    // Field: mci_reg.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal19
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal19.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_non_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal19.value & ~decoded_wr_biten[12:12]) | (decoded_wr_data[12:12] & decoded_wr_biten[12:12]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal19.next = next_c;
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal19.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal19.value <= 1'h0;
        end else if(field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal19.load_next) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal19.value <= field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal19.next;
        end
    end
    assign hwif_out.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal19.value = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal19.value;
    // Field: mci_reg.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal18
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal18.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_non_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal18.value & ~decoded_wr_biten[13:13]) | (decoded_wr_data[13:13] & decoded_wr_biten[13:13]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal18.next = next_c;
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal18.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal18.value <= 1'h0;
        end else if(field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal18.load_next) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal18.value <= field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal18.next;
        end
    end
    assign hwif_out.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal18.value = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal18.value;
    // Field: mci_reg.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal17
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal17.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_non_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal17.value & ~decoded_wr_biten[14:14]) | (decoded_wr_data[14:14] & decoded_wr_biten[14:14]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal17.next = next_c;
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal17.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal17.value <= 1'h0;
        end else if(field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal17.load_next) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal17.value <= field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal17.next;
        end
    end
    assign hwif_out.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal17.value = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal17.value;
    // Field: mci_reg.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal16
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal16.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_non_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal16.value & ~decoded_wr_biten[15:15]) | (decoded_wr_data[15:15] & decoded_wr_biten[15:15]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal16.next = next_c;
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal16.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal16.value <= 1'h0;
        end else if(field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal16.load_next) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal16.value <= field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal16.next;
        end
    end
    assign hwif_out.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal16.value = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal16.value;
    // Field: mci_reg.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal15
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal15.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_non_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal15.value & ~decoded_wr_biten[16:16]) | (decoded_wr_data[16:16] & decoded_wr_biten[16:16]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal15.next = next_c;
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal15.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal15.value <= 1'h0;
        end else if(field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal15.load_next) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal15.value <= field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal15.next;
        end
    end
    assign hwif_out.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal15.value = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal15.value;
    // Field: mci_reg.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal14
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal14.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_non_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal14.value & ~decoded_wr_biten[17:17]) | (decoded_wr_data[17:17] & decoded_wr_biten[17:17]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal14.next = next_c;
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal14.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal14.value <= 1'h0;
        end else if(field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal14.load_next) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal14.value <= field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal14.next;
        end
    end
    assign hwif_out.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal14.value = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal14.value;
    // Field: mci_reg.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal13
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal13.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_non_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal13.value & ~decoded_wr_biten[18:18]) | (decoded_wr_data[18:18] & decoded_wr_biten[18:18]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal13.next = next_c;
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal13.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal13.value <= 1'h0;
        end else if(field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal13.load_next) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal13.value <= field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal13.next;
        end
    end
    assign hwif_out.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal13.value = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal13.value;
    // Field: mci_reg.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal12
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal12.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_non_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal12.value & ~decoded_wr_biten[19:19]) | (decoded_wr_data[19:19] & decoded_wr_biten[19:19]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal12.next = next_c;
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal12.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal12.value <= 1'h0;
        end else if(field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal12.load_next) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal12.value <= field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal12.next;
        end
    end
    assign hwif_out.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal12.value = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal12.value;
    // Field: mci_reg.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal11
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal11.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_non_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal11.value & ~decoded_wr_biten[20:20]) | (decoded_wr_data[20:20] & decoded_wr_biten[20:20]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal11.next = next_c;
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal11.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal11.value <= 1'h0;
        end else if(field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal11.load_next) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal11.value <= field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal11.next;
        end
    end
    assign hwif_out.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal11.value = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal11.value;
    // Field: mci_reg.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal10
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal10.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_non_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal10.value & ~decoded_wr_biten[21:21]) | (decoded_wr_data[21:21] & decoded_wr_biten[21:21]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal10.next = next_c;
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal10.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal10.value <= 1'h0;
        end else if(field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal10.load_next) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal10.value <= field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal10.next;
        end
    end
    assign hwif_out.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal10.value = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal10.value;
    // Field: mci_reg.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal9
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal9.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_non_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal9.value & ~decoded_wr_biten[22:22]) | (decoded_wr_data[22:22] & decoded_wr_biten[22:22]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal9.next = next_c;
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal9.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal9.value <= 1'h0;
        end else if(field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal9.load_next) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal9.value <= field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal9.next;
        end
    end
    assign hwif_out.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal9.value = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal9.value;
    // Field: mci_reg.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal8
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal8.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_non_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal8.value & ~decoded_wr_biten[23:23]) | (decoded_wr_data[23:23] & decoded_wr_biten[23:23]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal8.next = next_c;
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal8.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal8.value <= 1'h0;
        end else if(field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal8.load_next) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal8.value <= field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal8.next;
        end
    end
    assign hwif_out.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal8.value = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal8.value;
    // Field: mci_reg.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal7
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal7.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_non_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal7.value & ~decoded_wr_biten[24:24]) | (decoded_wr_data[24:24] & decoded_wr_biten[24:24]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal7.next = next_c;
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal7.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal7.value <= 1'h0;
        end else if(field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal7.load_next) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal7.value <= field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal7.next;
        end
    end
    assign hwif_out.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal7.value = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal7.value;
    // Field: mci_reg.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal6
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal6.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_non_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal6.value & ~decoded_wr_biten[25:25]) | (decoded_wr_data[25:25] & decoded_wr_biten[25:25]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal6.next = next_c;
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal6.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal6.value <= 1'h0;
        end else if(field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal6.load_next) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal6.value <= field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal6.next;
        end
    end
    assign hwif_out.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal6.value = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal6.value;
    // Field: mci_reg.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal5
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal5.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_non_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal5.value & ~decoded_wr_biten[26:26]) | (decoded_wr_data[26:26] & decoded_wr_biten[26:26]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal5.next = next_c;
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal5.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal5.value <= 1'h0;
        end else if(field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal5.load_next) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal5.value <= field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal5.next;
        end
    end
    assign hwif_out.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal5.value = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal5.value;
    // Field: mci_reg.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal4
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal4.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_non_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal4.value & ~decoded_wr_biten[27:27]) | (decoded_wr_data[27:27] & decoded_wr_biten[27:27]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal4.next = next_c;
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal4.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal4.value <= 1'h0;
        end else if(field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal4.load_next) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal4.value <= field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal4.next;
        end
    end
    assign hwif_out.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal4.value = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal4.value;
    // Field: mci_reg.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal3
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal3.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_non_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal3.value & ~decoded_wr_biten[28:28]) | (decoded_wr_data[28:28] & decoded_wr_biten[28:28]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal3.next = next_c;
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal3.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal3.value <= 1'h0;
        end else if(field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal3.load_next) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal3.value <= field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal3.next;
        end
    end
    assign hwif_out.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal3.value = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal3.value;
    // Field: mci_reg.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal2
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal2.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_non_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal2.value & ~decoded_wr_biten[29:29]) | (decoded_wr_data[29:29] & decoded_wr_biten[29:29]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal2.next = next_c;
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal2.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal2.value <= 1'h0;
        end else if(field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal2.load_next) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal2.value <= field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal2.next;
        end
    end
    assign hwif_out.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal2.value = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal2.value;
    // Field: mci_reg.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal1
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal1.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_non_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal1.value & ~decoded_wr_biten[30:30]) | (decoded_wr_data[30:30] & decoded_wr_biten[30:30]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal1.next = next_c;
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal1.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal1.value <= 1'h0;
        end else if(field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal1.load_next) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal1.value <= field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal1.next;
        end
    end
    assign hwif_out.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal1.value = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal1.value;
    // Field: mci_reg.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal0
    always_comb begin
        automatic logic [0:0] next_c = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal0.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_agg_error_non_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal0.value & ~decoded_wr_biten[31:31]) | (decoded_wr_data[31:31] & decoded_wr_biten[31:31]);
            load_next_c = '1;
        end
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal0.next = next_c;
        field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal0.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal0.value <= 1'h0;
        end else if(field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal0.load_next) begin
            field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal0.value <= field_combo.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal0.next;
        end
    end
    assign hwif_out.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal0.value = field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal0.value;
    // Field: mci_reg.internal_fw_error_fatal_mask.mask
    always_comb begin
        automatic logic [31:0] next_c = field_storage.internal_fw_error_fatal_mask.mask.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_fw_error_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_fw_error_fatal_mask.mask.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.internal_fw_error_fatal_mask.mask.next = next_c;
        field_combo.internal_fw_error_fatal_mask.mask.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_fw_error_fatal_mask.mask.value <= 32'h0;
        end else if(field_combo.internal_fw_error_fatal_mask.mask.load_next) begin
            field_storage.internal_fw_error_fatal_mask.mask.value <= field_combo.internal_fw_error_fatal_mask.mask.next;
        end
    end
    assign hwif_out.internal_fw_error_fatal_mask.mask.value = field_storage.internal_fw_error_fatal_mask.mask.value;
    // Field: mci_reg.internal_fw_error_non_fatal_mask.mask
    always_comb begin
        automatic logic [31:0] next_c = field_storage.internal_fw_error_non_fatal_mask.mask.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.internal_fw_error_non_fatal_mask && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.internal_fw_error_non_fatal_mask.mask.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.internal_fw_error_non_fatal_mask.mask.next = next_c;
        field_combo.internal_fw_error_non_fatal_mask.mask.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.internal_fw_error_non_fatal_mask.mask.value <= 32'h0;
        end else if(field_combo.internal_fw_error_non_fatal_mask.mask.load_next) begin
            field_storage.internal_fw_error_non_fatal_mask.mask.value <= field_combo.internal_fw_error_non_fatal_mask.mask.next;
        end
    end
    assign hwif_out.internal_fw_error_non_fatal_mask.mask.value = field_storage.internal_fw_error_non_fatal_mask.mask.value;
    // Field: mci_reg.WDT_TIMER1_EN.timer1_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.WDT_TIMER1_EN.timer1_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.WDT_TIMER1_EN && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.WDT_TIMER1_EN.timer1_en.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.WDT_TIMER1_EN.timer1_en.next = next_c;
        field_combo.WDT_TIMER1_EN.timer1_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.WDT_TIMER1_EN.timer1_en.value <= 1'h0;
        end else if(field_combo.WDT_TIMER1_EN.timer1_en.load_next) begin
            field_storage.WDT_TIMER1_EN.timer1_en.value <= field_combo.WDT_TIMER1_EN.timer1_en.next;
        end
    end
    assign hwif_out.WDT_TIMER1_EN.timer1_en.value = field_storage.WDT_TIMER1_EN.timer1_en.value;
    // Field: mci_reg.WDT_TIMER1_CTRL.timer1_restart
    always_comb begin
        automatic logic [0:0] next_c = field_storage.WDT_TIMER1_CTRL.timer1_restart.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.WDT_TIMER1_CTRL && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.WDT_TIMER1_CTRL.timer1_restart.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.WDT_TIMER1_CTRL.timer1_restart.next = next_c;
        field_combo.WDT_TIMER1_CTRL.timer1_restart.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.WDT_TIMER1_CTRL.timer1_restart.value <= 1'h0;
        end else if(field_combo.WDT_TIMER1_CTRL.timer1_restart.load_next) begin
            field_storage.WDT_TIMER1_CTRL.timer1_restart.value <= field_combo.WDT_TIMER1_CTRL.timer1_restart.next;
        end
    end
    assign hwif_out.WDT_TIMER1_CTRL.timer1_restart.value = field_storage.WDT_TIMER1_CTRL.timer1_restart.value;
    for(genvar i0=0; i0<2; i0++) begin
        // Field: mci_reg.WDT_TIMER1_TIMEOUT_PERIOD[].timer1_timeout_period
        always_comb begin
            automatic logic [31:0] next_c = field_storage.WDT_TIMER1_TIMEOUT_PERIOD[i0].timer1_timeout_period.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.WDT_TIMER1_TIMEOUT_PERIOD[i0] && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
                next_c = (field_storage.WDT_TIMER1_TIMEOUT_PERIOD[i0].timer1_timeout_period.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo.WDT_TIMER1_TIMEOUT_PERIOD[i0].timer1_timeout_period.next = next_c;
            field_combo.WDT_TIMER1_TIMEOUT_PERIOD[i0].timer1_timeout_period.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
            if(~hwif_in.mci_rst_b) begin
                field_storage.WDT_TIMER1_TIMEOUT_PERIOD[i0].timer1_timeout_period.value <= 32'hffffffff;
            end else if(field_combo.WDT_TIMER1_TIMEOUT_PERIOD[i0].timer1_timeout_period.load_next) begin
                field_storage.WDT_TIMER1_TIMEOUT_PERIOD[i0].timer1_timeout_period.value <= field_combo.WDT_TIMER1_TIMEOUT_PERIOD[i0].timer1_timeout_period.next;
            end
        end
        assign hwif_out.WDT_TIMER1_TIMEOUT_PERIOD[i0].timer1_timeout_period.value = field_storage.WDT_TIMER1_TIMEOUT_PERIOD[i0].timer1_timeout_period.value;
    end
    // Field: mci_reg.WDT_TIMER2_EN.timer2_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.WDT_TIMER2_EN.timer2_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.WDT_TIMER2_EN && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.WDT_TIMER2_EN.timer2_en.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.WDT_TIMER2_EN.timer2_en.next = next_c;
        field_combo.WDT_TIMER2_EN.timer2_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.WDT_TIMER2_EN.timer2_en.value <= 1'h0;
        end else if(field_combo.WDT_TIMER2_EN.timer2_en.load_next) begin
            field_storage.WDT_TIMER2_EN.timer2_en.value <= field_combo.WDT_TIMER2_EN.timer2_en.next;
        end
    end
    assign hwif_out.WDT_TIMER2_EN.timer2_en.value = field_storage.WDT_TIMER2_EN.timer2_en.value;
    // Field: mci_reg.WDT_TIMER2_CTRL.timer2_restart
    always_comb begin
        automatic logic [0:0] next_c = field_storage.WDT_TIMER2_CTRL.timer2_restart.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.WDT_TIMER2_CTRL && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.WDT_TIMER2_CTRL.timer2_restart.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.WDT_TIMER2_CTRL.timer2_restart.next = next_c;
        field_combo.WDT_TIMER2_CTRL.timer2_restart.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.WDT_TIMER2_CTRL.timer2_restart.value <= 1'h0;
        end else if(field_combo.WDT_TIMER2_CTRL.timer2_restart.load_next) begin
            field_storage.WDT_TIMER2_CTRL.timer2_restart.value <= field_combo.WDT_TIMER2_CTRL.timer2_restart.next;
        end
    end
    assign hwif_out.WDT_TIMER2_CTRL.timer2_restart.value = field_storage.WDT_TIMER2_CTRL.timer2_restart.value;
    for(genvar i0=0; i0<2; i0++) begin
        // Field: mci_reg.WDT_TIMER2_TIMEOUT_PERIOD[].timer2_timeout_period
        always_comb begin
            automatic logic [31:0] next_c = field_storage.WDT_TIMER2_TIMEOUT_PERIOD[i0].timer2_timeout_period.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.WDT_TIMER2_TIMEOUT_PERIOD[i0] && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
                next_c = (field_storage.WDT_TIMER2_TIMEOUT_PERIOD[i0].timer2_timeout_period.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo.WDT_TIMER2_TIMEOUT_PERIOD[i0].timer2_timeout_period.next = next_c;
            field_combo.WDT_TIMER2_TIMEOUT_PERIOD[i0].timer2_timeout_period.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
            if(~hwif_in.mci_rst_b) begin
                field_storage.WDT_TIMER2_TIMEOUT_PERIOD[i0].timer2_timeout_period.value <= 32'hffffffff;
            end else if(field_combo.WDT_TIMER2_TIMEOUT_PERIOD[i0].timer2_timeout_period.load_next) begin
                field_storage.WDT_TIMER2_TIMEOUT_PERIOD[i0].timer2_timeout_period.value <= field_combo.WDT_TIMER2_TIMEOUT_PERIOD[i0].timer2_timeout_period.next;
            end
        end
        assign hwif_out.WDT_TIMER2_TIMEOUT_PERIOD[i0].timer2_timeout_period.value = field_storage.WDT_TIMER2_TIMEOUT_PERIOD[i0].timer2_timeout_period.value;
    end
    // Field: mci_reg.WDT_STATUS.t1_timeout
    always_comb begin
        automatic logic [0:0] next_c = field_storage.WDT_STATUS.t1_timeout.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.WDT_STATUS && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.WDT_STATUS.t1_timeout.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.WDT_STATUS.t1_timeout.next;
            load_next_c = '1;
        end
        field_combo.WDT_STATUS.t1_timeout.next = next_c;
        field_combo.WDT_STATUS.t1_timeout.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.WDT_STATUS.t1_timeout.value <= 1'h0;
        end else if(field_combo.WDT_STATUS.t1_timeout.load_next) begin
            field_storage.WDT_STATUS.t1_timeout.value <= field_combo.WDT_STATUS.t1_timeout.next;
        end
    end
    assign hwif_out.WDT_STATUS.t1_timeout.value = field_storage.WDT_STATUS.t1_timeout.value;
    // Field: mci_reg.WDT_STATUS.t2_timeout
    always_comb begin
        automatic logic [0:0] next_c = field_storage.WDT_STATUS.t2_timeout.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.WDT_STATUS && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.WDT_STATUS.t2_timeout.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.WDT_STATUS.t2_timeout.next;
            load_next_c = '1;
        end
        field_combo.WDT_STATUS.t2_timeout.next = next_c;
        field_combo.WDT_STATUS.t2_timeout.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.WDT_STATUS.t2_timeout.value <= 1'h0;
        end else if(field_combo.WDT_STATUS.t2_timeout.load_next) begin
            field_storage.WDT_STATUS.t2_timeout.value <= field_combo.WDT_STATUS.t2_timeout.next;
        end
    end
    assign hwif_out.WDT_STATUS.t2_timeout.value = field_storage.WDT_STATUS.t2_timeout.value;
    for(genvar i0=0; i0<2; i0++) begin
        // Field: mci_reg.WDT_CFG[].TIMEOUT
        always_comb begin
            automatic logic [31:0] next_c = field_storage.WDT_CFG[i0].TIMEOUT.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.WDT_CFG[i0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage.WDT_CFG[i0].TIMEOUT.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo.WDT_CFG[i0].TIMEOUT.next = next_c;
            field_combo.WDT_CFG[i0].TIMEOUT.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
            if(~hwif_in.mci_pwrgood) begin
                field_storage.WDT_CFG[i0].TIMEOUT.value <= 32'h0;
            end else if(field_combo.WDT_CFG[i0].TIMEOUT.load_next) begin
                field_storage.WDT_CFG[i0].TIMEOUT.value <= field_combo.WDT_CFG[i0].TIMEOUT.next;
            end
        end
    end
    // Field: mci_reg.MCU_TIMER_CONFIG.clk_period
    always_comb begin
        automatic logic [31:0] next_c = field_storage.MCU_TIMER_CONFIG.clk_period.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.MCU_TIMER_CONFIG && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.MCU_TIMER_CONFIG.clk_period.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.MCU_TIMER_CONFIG.clk_period.next = next_c;
        field_combo.MCU_TIMER_CONFIG.clk_period.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.MCU_TIMER_CONFIG.clk_period.value <= 32'h0;
        end else if(field_combo.MCU_TIMER_CONFIG.clk_period.load_next) begin
            field_storage.MCU_TIMER_CONFIG.clk_period.value <= field_combo.MCU_TIMER_CONFIG.clk_period.next;
        end
    end
    // Field: mci_reg.MCU_RV_MTIME_L.count_l
    always_comb begin
        automatic logic [31:0] next_c = field_storage.MCU_RV_MTIME_L.count_l.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.MCU_RV_MTIME_L && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.MCU_RV_MTIME_L.count_l.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(hwif_in.MCU_RV_MTIME_L.count_l.incr) begin // increment
            field_combo.MCU_RV_MTIME_L.count_l.overflow = (((33)'(next_c) + 32'h1) > 32'hffffffff);
            next_c = next_c + 32'h1;
            load_next_c = '1;
        end else begin
            field_combo.MCU_RV_MTIME_L.count_l.overflow = '0;
        end
        field_combo.MCU_RV_MTIME_L.count_l.incrthreshold = (field_storage.MCU_RV_MTIME_L.count_l.value >= 32'hffffffff);
        field_combo.MCU_RV_MTIME_L.count_l.next = next_c;
        field_combo.MCU_RV_MTIME_L.count_l.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.MCU_RV_MTIME_L.count_l.value <= 32'h0;
        end else if(field_combo.MCU_RV_MTIME_L.count_l.load_next) begin
            field_storage.MCU_RV_MTIME_L.count_l.value <= field_combo.MCU_RV_MTIME_L.count_l.next;
        end
    end
    assign hwif_out.MCU_RV_MTIME_L.count_l.value = field_storage.MCU_RV_MTIME_L.count_l.value;
    assign hwif_out.MCU_RV_MTIME_L.count_l.swmod = decoded_reg_strb.MCU_RV_MTIME_L && decoded_req_is_wr;
    assign hwif_out.MCU_RV_MTIME_L.count_l.overflow = field_combo.MCU_RV_MTIME_L.count_l.overflow;
    // Field: mci_reg.MCU_RV_MTIME_H.count_h
    always_comb begin
        automatic logic [31:0] next_c = field_storage.MCU_RV_MTIME_H.count_h.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.MCU_RV_MTIME_H && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.MCU_RV_MTIME_H.count_h.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(hwif_in.MCU_RV_MTIME_H.count_h.incr) begin // increment
            field_combo.MCU_RV_MTIME_H.count_h.overflow = (((33)'(next_c) + 32'h1) > 32'hffffffff);
            next_c = next_c + 32'h1;
            load_next_c = '1;
        end else begin
            field_combo.MCU_RV_MTIME_H.count_h.overflow = '0;
        end
        field_combo.MCU_RV_MTIME_H.count_h.incrthreshold = (field_storage.MCU_RV_MTIME_H.count_h.value >= 32'hffffffff);
        field_combo.MCU_RV_MTIME_H.count_h.next = next_c;
        field_combo.MCU_RV_MTIME_H.count_h.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.MCU_RV_MTIME_H.count_h.value <= 32'h0;
        end else if(field_combo.MCU_RV_MTIME_H.count_h.load_next) begin
            field_storage.MCU_RV_MTIME_H.count_h.value <= field_combo.MCU_RV_MTIME_H.count_h.next;
        end
    end
    assign hwif_out.MCU_RV_MTIME_H.count_h.value = field_storage.MCU_RV_MTIME_H.count_h.value;
    assign hwif_out.MCU_RV_MTIME_H.count_h.swmod = decoded_reg_strb.MCU_RV_MTIME_H && decoded_req_is_wr;
    // Field: mci_reg.MCU_RV_MTIMECMP_L.compare_l
    always_comb begin
        automatic logic [31:0] next_c = field_storage.MCU_RV_MTIMECMP_L.compare_l.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.MCU_RV_MTIMECMP_L && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.MCU_RV_MTIMECMP_L.compare_l.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.MCU_RV_MTIMECMP_L.compare_l.next = next_c;
        field_combo.MCU_RV_MTIMECMP_L.compare_l.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.MCU_RV_MTIMECMP_L.compare_l.value <= 32'h0;
        end else if(field_combo.MCU_RV_MTIMECMP_L.compare_l.load_next) begin
            field_storage.MCU_RV_MTIMECMP_L.compare_l.value <= field_combo.MCU_RV_MTIMECMP_L.compare_l.next;
        end
    end
    assign hwif_out.MCU_RV_MTIMECMP_L.compare_l.value = field_storage.MCU_RV_MTIMECMP_L.compare_l.value;
    // Field: mci_reg.MCU_RV_MTIMECMP_H.compare_h
    always_comb begin
        automatic logic [31:0] next_c = field_storage.MCU_RV_MTIMECMP_H.compare_h.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.MCU_RV_MTIMECMP_H && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.MCU_RV_MTIMECMP_H.compare_h.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.MCU_RV_MTIMECMP_H.compare_h.next = next_c;
        field_combo.MCU_RV_MTIMECMP_H.compare_h.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.MCU_RV_MTIMECMP_H.compare_h.value <= 32'h0;
        end else if(field_combo.MCU_RV_MTIMECMP_H.compare_h.load_next) begin
            field_storage.MCU_RV_MTIMECMP_H.compare_h.value <= field_combo.MCU_RV_MTIMECMP_H.compare_h.next;
        end
    end
    assign hwif_out.MCU_RV_MTIMECMP_H.compare_h.value = field_storage.MCU_RV_MTIMECMP_H.compare_h.value;
    // Field: mci_reg.RESET_REQUEST.mcu_req
    always_comb begin
        automatic logic [0:0] next_c = field_storage.RESET_REQUEST.mcu_req.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.RESET_REQUEST && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.RESET_REQUEST.mcu_req.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else if(hwif_in.RESET_REQUEST.mcu_req.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.RESET_REQUEST.mcu_req.next = next_c;
        field_combo.RESET_REQUEST.mcu_req.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.RESET_REQUEST.mcu_req.value <= 1'h0;
        end else if(field_combo.RESET_REQUEST.mcu_req.load_next) begin
            field_storage.RESET_REQUEST.mcu_req.value <= field_combo.RESET_REQUEST.mcu_req.next;
        end
    end
    assign hwif_out.RESET_REQUEST.mcu_req.value = field_storage.RESET_REQUEST.mcu_req.value;
    // Field: mci_reg.CALIPTRA_BOOT_GO.go
    always_comb begin
        automatic logic [0:0] next_c = field_storage.CALIPTRA_BOOT_GO.go.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.CALIPTRA_BOOT_GO && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.CALIPTRA_BOOT_GO.go.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.CALIPTRA_BOOT_GO.go.next = next_c;
        field_combo.CALIPTRA_BOOT_GO.go.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.CALIPTRA_BOOT_GO.go.value <= 1'h0;
        end else if(field_combo.CALIPTRA_BOOT_GO.go.load_next) begin
            field_storage.CALIPTRA_BOOT_GO.go.value <= field_combo.CALIPTRA_BOOT_GO.go.next;
        end
    end
    assign hwif_out.CALIPTRA_BOOT_GO.go.value = field_storage.CALIPTRA_BOOT_GO.go.value;
    // Field: mci_reg.FW_SRAM_EXEC_REGION_SIZE.size
    always_comb begin
        automatic logic [15:0] next_c = field_storage.FW_SRAM_EXEC_REGION_SIZE.size.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.FW_SRAM_EXEC_REGION_SIZE && decoded_req_is_wr && hwif_in.FW_SRAM_EXEC_REGION_SIZE.size.swwe) begin // SW write
            next_c = (field_storage.FW_SRAM_EXEC_REGION_SIZE.size.value & ~decoded_wr_biten[15:0]) | (decoded_wr_data[15:0] & decoded_wr_biten[15:0]);
            load_next_c = '1;
        end
        field_combo.FW_SRAM_EXEC_REGION_SIZE.size.next = next_c;
        field_combo.FW_SRAM_EXEC_REGION_SIZE.size.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.FW_SRAM_EXEC_REGION_SIZE.size.value <= 16'h0;
        end else if(field_combo.FW_SRAM_EXEC_REGION_SIZE.size.load_next) begin
            field_storage.FW_SRAM_EXEC_REGION_SIZE.size.value <= field_combo.FW_SRAM_EXEC_REGION_SIZE.size.next;
        end
    end
    assign hwif_out.FW_SRAM_EXEC_REGION_SIZE.size.value = field_storage.FW_SRAM_EXEC_REGION_SIZE.size.value;
    // Field: mci_reg.MCU_NMI_VECTOR.vec
    always_comb begin
        automatic logic [31:0] next_c = field_storage.MCU_NMI_VECTOR.vec.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.MCU_NMI_VECTOR && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.MCU_NMI_VECTOR.vec.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.MCU_NMI_VECTOR.vec.next = next_c;
        field_combo.MCU_NMI_VECTOR.vec.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.MCU_NMI_VECTOR.vec.value <= 32'h0;
        end else if(field_combo.MCU_NMI_VECTOR.vec.load_next) begin
            field_storage.MCU_NMI_VECTOR.vec.value <= field_combo.MCU_NMI_VECTOR.vec.next;
        end
    end
    assign hwif_out.MCU_NMI_VECTOR.vec.value = field_storage.MCU_NMI_VECTOR.vec.value;
    // Field: mci_reg.MCU_RESET_VECTOR.vec
    always_comb begin
        automatic logic [31:0] next_c = field_storage.MCU_RESET_VECTOR.vec.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.MCU_RESET_VECTOR && decoded_req_is_wr && hwif_in.cptra_req) begin // SW write
            next_c = (field_storage.MCU_RESET_VECTOR.vec.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.MCU_RESET_VECTOR.vec.we) begin // HW Write - we
            next_c = hwif_in.MCU_RESET_VECTOR.vec.next;
            load_next_c = '1;
        end
        field_combo.MCU_RESET_VECTOR.vec.next = next_c;
        field_combo.MCU_RESET_VECTOR.vec.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.MCU_RESET_VECTOR.vec.value <= 32'h0;
        end else if(field_combo.MCU_RESET_VECTOR.vec.load_next) begin
            field_storage.MCU_RESET_VECTOR.vec.value <= field_combo.MCU_RESET_VECTOR.vec.next;
        end
    end
    assign hwif_out.MCU_RESET_VECTOR.vec.value = field_storage.MCU_RESET_VECTOR.vec.value;
    for(genvar i0=0; i0<5; i0++) begin
        // Field: mci_reg.MBOX0_VALID_AXI_ID[].id
        always_comb begin
            automatic logic [31:0] next_c = field_storage.MBOX0_VALID_AXI_ID[i0].id.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.MBOX0_VALID_AXI_ID[i0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage.MBOX0_VALID_AXI_ID[i0].id.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo.MBOX0_VALID_AXI_ID[i0].id.next = next_c;
            field_combo.MBOX0_VALID_AXI_ID[i0].id.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
            if(~hwif_in.mci_rst_b) begin
                field_storage.MBOX0_VALID_AXI_ID[i0].id.value <= 32'h0;
            end else if(field_combo.MBOX0_VALID_AXI_ID[i0].id.load_next) begin
                field_storage.MBOX0_VALID_AXI_ID[i0].id.value <= field_combo.MBOX0_VALID_AXI_ID[i0].id.next;
            end
        end
    end
    for(genvar i0=0; i0<5; i0++) begin
        // Field: mci_reg.MBOX0_VALID_AXI_ID_LOCK[].lock
        always_comb begin
            automatic logic [0:0] next_c = field_storage.MBOX0_VALID_AXI_ID_LOCK[i0].lock.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.MBOX0_VALID_AXI_ID_LOCK[i0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage.MBOX0_VALID_AXI_ID_LOCK[i0].lock.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
                load_next_c = '1;
            end
            field_combo.MBOX0_VALID_AXI_ID_LOCK[i0].lock.next = next_c;
            field_combo.MBOX0_VALID_AXI_ID_LOCK[i0].lock.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
            if(~hwif_in.mci_rst_b) begin
                field_storage.MBOX0_VALID_AXI_ID_LOCK[i0].lock.value <= 1'h0;
            end else if(field_combo.MBOX0_VALID_AXI_ID_LOCK[i0].lock.load_next) begin
                field_storage.MBOX0_VALID_AXI_ID_LOCK[i0].lock.value <= field_combo.MBOX0_VALID_AXI_ID_LOCK[i0].lock.next;
            end
        end
    end
    for(genvar i0=0; i0<5; i0++) begin
        // Field: mci_reg.MBOX1_VALID_AXI_ID[].id
        always_comb begin
            automatic logic [31:0] next_c = field_storage.MBOX1_VALID_AXI_ID[i0].id.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.MBOX1_VALID_AXI_ID[i0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage.MBOX1_VALID_AXI_ID[i0].id.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo.MBOX1_VALID_AXI_ID[i0].id.next = next_c;
            field_combo.MBOX1_VALID_AXI_ID[i0].id.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
            if(~hwif_in.mci_rst_b) begin
                field_storage.MBOX1_VALID_AXI_ID[i0].id.value <= 32'h0;
            end else if(field_combo.MBOX1_VALID_AXI_ID[i0].id.load_next) begin
                field_storage.MBOX1_VALID_AXI_ID[i0].id.value <= field_combo.MBOX1_VALID_AXI_ID[i0].id.next;
            end
        end
    end
    for(genvar i0=0; i0<5; i0++) begin
        // Field: mci_reg.MBOX1_VALID_AXI_ID_LOCK[].lock
        always_comb begin
            automatic logic [0:0] next_c = field_storage.MBOX1_VALID_AXI_ID_LOCK[i0].lock.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.MBOX1_VALID_AXI_ID_LOCK[i0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage.MBOX1_VALID_AXI_ID_LOCK[i0].lock.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
                load_next_c = '1;
            end
            field_combo.MBOX1_VALID_AXI_ID_LOCK[i0].lock.next = next_c;
            field_combo.MBOX1_VALID_AXI_ID_LOCK[i0].lock.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
            if(~hwif_in.mci_rst_b) begin
                field_storage.MBOX1_VALID_AXI_ID_LOCK[i0].lock.value <= 1'h0;
            end else if(field_combo.MBOX1_VALID_AXI_ID_LOCK[i0].lock.load_next) begin
                field_storage.MBOX1_VALID_AXI_ID_LOCK[i0].lock.value <= field_combo.MBOX1_VALID_AXI_ID_LOCK[i0].lock.next;
            end
        end
    end
    for(genvar i0=0; i0<2; i0++) begin
        // Field: mci_reg.GENERIC_OUTPUT_WIRES[].wires
        always_comb begin
            automatic logic [31:0] next_c = field_storage.GENERIC_OUTPUT_WIRES[i0].wires.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.GENERIC_OUTPUT_WIRES[i0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage.GENERIC_OUTPUT_WIRES[i0].wires.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo.GENERIC_OUTPUT_WIRES[i0].wires.next = next_c;
            field_combo.GENERIC_OUTPUT_WIRES[i0].wires.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
            if(~hwif_in.mci_rst_b) begin
                field_storage.GENERIC_OUTPUT_WIRES[i0].wires.value <= 32'h0;
            end else if(field_combo.GENERIC_OUTPUT_WIRES[i0].wires.load_next) begin
                field_storage.GENERIC_OUTPUT_WIRES[i0].wires.value <= field_combo.GENERIC_OUTPUT_WIRES[i0].wires.next;
            end
        end
        assign hwif_out.GENERIC_OUTPUT_WIRES[i0].wires.value = field_storage.GENERIC_OUTPUT_WIRES[i0].wires.value;
    end
    // Field: mci_reg.DEBUG_IN.FIXME
    always_comb begin
        automatic logic [0:0] next_c = field_storage.DEBUG_IN.FIXME.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.DEBUG_IN && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.DEBUG_IN.FIXME.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.DEBUG_IN.FIXME.next = next_c;
        field_combo.DEBUG_IN.FIXME.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.DEBUG_IN.FIXME.value <= 1'h0;
        end else if(field_combo.DEBUG_IN.FIXME.load_next) begin
            field_storage.DEBUG_IN.FIXME.value <= field_combo.DEBUG_IN.FIXME.next;
        end
    end
    // Field: mci_reg.DEBUG_OUT.FIXME
    always_comb begin
        automatic logic [0:0] next_c = field_storage.DEBUG_OUT.FIXME.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.DEBUG_OUT && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.DEBUG_OUT.FIXME.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.DEBUG_OUT.FIXME.next = next_c;
        field_combo.DEBUG_OUT.FIXME.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.DEBUG_OUT.FIXME.value <= 1'h0;
        end else if(field_combo.DEBUG_OUT.FIXME.load_next) begin
            field_storage.DEBUG_OUT.FIXME.value <= field_combo.DEBUG_OUT.FIXME.next;
        end
    end
    // Field: mci_reg.FUSE_WR_DONE.done
    always_comb begin
        automatic logic [0:0] next_c = field_storage.FUSE_WR_DONE.done.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.FUSE_WR_DONE && decoded_req_is_wr && hwif_in.FUSE_WR_DONE.done.swwe) begin // SW write
            next_c = (field_storage.FUSE_WR_DONE.done.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.FUSE_WR_DONE.done.next = next_c;
        field_combo.FUSE_WR_DONE.done.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.FUSE_WR_DONE.done.value <= 1'h0;
        end else if(field_combo.FUSE_WR_DONE.done.load_next) begin
            field_storage.FUSE_WR_DONE.done.value <= field_combo.FUSE_WR_DONE.done.next;
        end
    end
    assign hwif_out.FUSE_WR_DONE.done.value = field_storage.FUSE_WR_DONE.done.value;
    assign hwif_out.FUSE_WR_DONE.done.swmod = decoded_reg_strb.FUSE_WR_DONE && decoded_req_is_wr;
    for(genvar i0=0; i0<8; i0++) begin
        for(genvar i1=0; i1<12; i1++) begin
            // Field: mci_reg.PROD_DEBUG_UNLOCK_PK_HASH_REG[][].hash
            always_comb begin
                automatic logic [31:0] next_c = field_storage.PROD_DEBUG_UNLOCK_PK_HASH_REG[i0][i1].hash.value;
                automatic logic load_next_c = '0;
                if(decoded_reg_strb.PROD_DEBUG_UNLOCK_PK_HASH_REG[i0][i1] && decoded_req_is_wr && !(hwif_in.PROD_DEBUG_UNLOCK_PK_HASH_REG[i0][i1].hash.swwel)) begin // SW write
                    next_c = (field_storage.PROD_DEBUG_UNLOCK_PK_HASH_REG[i0][i1].hash.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                    load_next_c = '1;
                end else if(hwif_in.PROD_DEBUG_UNLOCK_PK_HASH_REG[i0][i1].hash.we) begin // HW Write - we
                    next_c = hwif_in.PROD_DEBUG_UNLOCK_PK_HASH_REG[i0][i1].hash.next;
                    load_next_c = '1;
                end
                field_combo.PROD_DEBUG_UNLOCK_PK_HASH_REG[i0][i1].hash.next = next_c;
                field_combo.PROD_DEBUG_UNLOCK_PK_HASH_REG[i0][i1].hash.load_next = load_next_c;
            end
            always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
                if(~hwif_in.mci_pwrgood) begin
                    field_storage.PROD_DEBUG_UNLOCK_PK_HASH_REG[i0][i1].hash.value <= 32'h0;
                end else if(field_combo.PROD_DEBUG_UNLOCK_PK_HASH_REG[i0][i1].hash.load_next) begin
                    field_storage.PROD_DEBUG_UNLOCK_PK_HASH_REG[i0][i1].hash.value <= field_combo.PROD_DEBUG_UNLOCK_PK_HASH_REG[i0][i1].hash.next;
                end
            end
            assign hwif_out.PROD_DEBUG_UNLOCK_PK_HASH_REG[i0][i1].hash.value = field_storage.PROD_DEBUG_UNLOCK_PK_HASH_REG[i0][i1].hash.value;
        end
    end
    for(genvar i0=0; i0<10; i0++) begin
        // Field: mci_reg.STICKY_DATA_VAULT_CTRL[].lock_entry
        always_comb begin
            automatic logic [0:0] next_c = field_storage.STICKY_DATA_VAULT_CTRL[i0].lock_entry.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.STICKY_DATA_VAULT_CTRL[i0] && decoded_req_is_wr && !(hwif_in.STICKY_DATA_VAULT_CTRL[i0].lock_entry.swwel)) begin // SW write
                next_c = (field_storage.STICKY_DATA_VAULT_CTRL[i0].lock_entry.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
                load_next_c = '1;
            end
            field_combo.STICKY_DATA_VAULT_CTRL[i0].lock_entry.next = next_c;
            field_combo.STICKY_DATA_VAULT_CTRL[i0].lock_entry.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
            if(~hwif_in.mci_pwrgood) begin
                field_storage.STICKY_DATA_VAULT_CTRL[i0].lock_entry.value <= 1'h0;
            end else if(field_combo.STICKY_DATA_VAULT_CTRL[i0].lock_entry.load_next) begin
                field_storage.STICKY_DATA_VAULT_CTRL[i0].lock_entry.value <= field_combo.STICKY_DATA_VAULT_CTRL[i0].lock_entry.next;
            end
        end
        assign hwif_out.STICKY_DATA_VAULT_CTRL[i0].lock_entry.value = field_storage.STICKY_DATA_VAULT_CTRL[i0].lock_entry.value;
    end
    for(genvar i0=0; i0<10; i0++) begin
        for(genvar i1=0; i1<12; i1++) begin
            // Field: mci_reg.STICKY_DATA_VAULT_ENTRY[][].lock_entry
            always_comb begin
                automatic logic [0:0] next_c = field_storage.STICKY_DATA_VAULT_ENTRY[i0][i1].lock_entry.value;
                automatic logic load_next_c = '0;
                if(decoded_reg_strb.STICKY_DATA_VAULT_ENTRY[i0][i1] && decoded_req_is_wr && !(hwif_in.STICKY_DATA_VAULT_ENTRY[i0][i1].lock_entry.swwel)) begin // SW write
                    next_c = (field_storage.STICKY_DATA_VAULT_ENTRY[i0][i1].lock_entry.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
                    load_next_c = '1;
                end
                field_combo.STICKY_DATA_VAULT_ENTRY[i0][i1].lock_entry.next = next_c;
                field_combo.STICKY_DATA_VAULT_ENTRY[i0][i1].lock_entry.load_next = load_next_c;
            end
            always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
                if(~hwif_in.mci_pwrgood) begin
                    field_storage.STICKY_DATA_VAULT_ENTRY[i0][i1].lock_entry.value <= 1'h0;
                end else if(field_combo.STICKY_DATA_VAULT_ENTRY[i0][i1].lock_entry.load_next) begin
                    field_storage.STICKY_DATA_VAULT_ENTRY[i0][i1].lock_entry.value <= field_combo.STICKY_DATA_VAULT_ENTRY[i0][i1].lock_entry.next;
                end
            end
        end
    end
    for(genvar i0=0; i0<10; i0++) begin
        // Field: mci_reg.DATA_VAULT_CTRL[].lock_entry
        always_comb begin
            automatic logic [0:0] next_c = field_storage.DATA_VAULT_CTRL[i0].lock_entry.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.DATA_VAULT_CTRL[i0] && decoded_req_is_wr && !(hwif_in.DATA_VAULT_CTRL[i0].lock_entry.swwel)) begin // SW write
                next_c = (field_storage.DATA_VAULT_CTRL[i0].lock_entry.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
                load_next_c = '1;
            end
            field_combo.DATA_VAULT_CTRL[i0].lock_entry.next = next_c;
            field_combo.DATA_VAULT_CTRL[i0].lock_entry.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.mcu_rst_b) begin
            if(~hwif_in.mcu_rst_b) begin
                field_storage.DATA_VAULT_CTRL[i0].lock_entry.value <= 1'h0;
            end else if(field_combo.DATA_VAULT_CTRL[i0].lock_entry.load_next) begin
                field_storage.DATA_VAULT_CTRL[i0].lock_entry.value <= field_combo.DATA_VAULT_CTRL[i0].lock_entry.next;
            end
        end
        assign hwif_out.DATA_VAULT_CTRL[i0].lock_entry.value = field_storage.DATA_VAULT_CTRL[i0].lock_entry.value;
    end
    for(genvar i0=0; i0<10; i0++) begin
        for(genvar i1=0; i1<12; i1++) begin
            // Field: mci_reg.DATA_VAULT_ENTRY[][].lock_entry
            always_comb begin
                automatic logic [0:0] next_c = field_storage.DATA_VAULT_ENTRY[i0][i1].lock_entry.value;
                automatic logic load_next_c = '0;
                if(decoded_reg_strb.DATA_VAULT_ENTRY[i0][i1] && decoded_req_is_wr && !(hwif_in.DATA_VAULT_ENTRY[i0][i1].lock_entry.swwel)) begin // SW write
                    next_c = (field_storage.DATA_VAULT_ENTRY[i0][i1].lock_entry.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
                    load_next_c = '1;
                end
                field_combo.DATA_VAULT_ENTRY[i0][i1].lock_entry.next = next_c;
                field_combo.DATA_VAULT_ENTRY[i0][i1].lock_entry.load_next = load_next_c;
            end
            always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
                if(~hwif_in.mci_pwrgood) begin
                    field_storage.DATA_VAULT_ENTRY[i0][i1].lock_entry.value <= 1'h0;
                end else if(field_combo.DATA_VAULT_ENTRY[i0][i1].lock_entry.load_next) begin
                    field_storage.DATA_VAULT_ENTRY[i0][i1].lock_entry.value <= field_combo.DATA_VAULT_ENTRY[i0][i1].lock_entry.next;
                end
            end
        end
    end
    for(genvar i0=0; i0<8; i0++) begin
        // Field: mci_reg.STICKY_LOCKABLE_SCRATCH_REG_CTRL[].lock_entry
        always_comb begin
            automatic logic [0:0] next_c = field_storage.STICKY_LOCKABLE_SCRATCH_REG_CTRL[i0].lock_entry.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.STICKY_LOCKABLE_SCRATCH_REG_CTRL[i0] && decoded_req_is_wr && !(hwif_in.STICKY_LOCKABLE_SCRATCH_REG_CTRL[i0].lock_entry.swwel)) begin // SW write
                next_c = (field_storage.STICKY_LOCKABLE_SCRATCH_REG_CTRL[i0].lock_entry.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
                load_next_c = '1;
            end
            field_combo.STICKY_LOCKABLE_SCRATCH_REG_CTRL[i0].lock_entry.next = next_c;
            field_combo.STICKY_LOCKABLE_SCRATCH_REG_CTRL[i0].lock_entry.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
            if(~hwif_in.mci_pwrgood) begin
                field_storage.STICKY_LOCKABLE_SCRATCH_REG_CTRL[i0].lock_entry.value <= 1'h0;
            end else if(field_combo.STICKY_LOCKABLE_SCRATCH_REG_CTRL[i0].lock_entry.load_next) begin
                field_storage.STICKY_LOCKABLE_SCRATCH_REG_CTRL[i0].lock_entry.value <= field_combo.STICKY_LOCKABLE_SCRATCH_REG_CTRL[i0].lock_entry.next;
            end
        end
        assign hwif_out.STICKY_LOCKABLE_SCRATCH_REG_CTRL[i0].lock_entry.value = field_storage.STICKY_LOCKABLE_SCRATCH_REG_CTRL[i0].lock_entry.value;
    end
    for(genvar i0=0; i0<8; i0++) begin
        // Field: mci_reg.STICKY_LOCKABLE_SCRATCH_REG[].data
        always_comb begin
            automatic logic [31:0] next_c = field_storage.STICKY_LOCKABLE_SCRATCH_REG[i0].data.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.STICKY_LOCKABLE_SCRATCH_REG[i0] && decoded_req_is_wr && !(hwif_in.STICKY_LOCKABLE_SCRATCH_REG[i0].data.swwel)) begin // SW write
                next_c = (field_storage.STICKY_LOCKABLE_SCRATCH_REG[i0].data.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo.STICKY_LOCKABLE_SCRATCH_REG[i0].data.next = next_c;
            field_combo.STICKY_LOCKABLE_SCRATCH_REG[i0].data.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
            if(~hwif_in.mci_pwrgood) begin
                field_storage.STICKY_LOCKABLE_SCRATCH_REG[i0].data.value <= 32'h0;
            end else if(field_combo.STICKY_LOCKABLE_SCRATCH_REG[i0].data.load_next) begin
                field_storage.STICKY_LOCKABLE_SCRATCH_REG[i0].data.value <= field_combo.STICKY_LOCKABLE_SCRATCH_REG[i0].data.next;
            end
        end
    end
    for(genvar i0=0; i0<10; i0++) begin
        // Field: mci_reg.LOCKABLE_SCRATCH_REG_CTRL[].lock_entry
        always_comb begin
            automatic logic [0:0] next_c = field_storage.LOCKABLE_SCRATCH_REG_CTRL[i0].lock_entry.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.LOCKABLE_SCRATCH_REG_CTRL[i0] && decoded_req_is_wr && !(hwif_in.LOCKABLE_SCRATCH_REG_CTRL[i0].lock_entry.swwel)) begin // SW write
                next_c = (field_storage.LOCKABLE_SCRATCH_REG_CTRL[i0].lock_entry.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
                load_next_c = '1;
            end
            field_combo.LOCKABLE_SCRATCH_REG_CTRL[i0].lock_entry.next = next_c;
            field_combo.LOCKABLE_SCRATCH_REG_CTRL[i0].lock_entry.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.mcu_rst_b) begin
            if(~hwif_in.mcu_rst_b) begin
                field_storage.LOCKABLE_SCRATCH_REG_CTRL[i0].lock_entry.value <= 1'h0;
            end else if(field_combo.LOCKABLE_SCRATCH_REG_CTRL[i0].lock_entry.load_next) begin
                field_storage.LOCKABLE_SCRATCH_REG_CTRL[i0].lock_entry.value <= field_combo.LOCKABLE_SCRATCH_REG_CTRL[i0].lock_entry.next;
            end
        end
        assign hwif_out.LOCKABLE_SCRATCH_REG_CTRL[i0].lock_entry.value = field_storage.LOCKABLE_SCRATCH_REG_CTRL[i0].lock_entry.value;
    end
    for(genvar i0=0; i0<10; i0++) begin
        // Field: mci_reg.LOCKABLE_SCRATCH_REG[].data
        always_comb begin
            automatic logic [31:0] next_c = field_storage.LOCKABLE_SCRATCH_REG[i0].data.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.LOCKABLE_SCRATCH_REG[i0] && decoded_req_is_wr && !(hwif_in.LOCKABLE_SCRATCH_REG[i0].data.swwel)) begin // SW write
                next_c = (field_storage.LOCKABLE_SCRATCH_REG[i0].data.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo.LOCKABLE_SCRATCH_REG[i0].data.next = next_c;
            field_combo.LOCKABLE_SCRATCH_REG[i0].data.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
            if(~hwif_in.mci_pwrgood) begin
                field_storage.LOCKABLE_SCRATCH_REG[i0].data.value <= 32'h0;
            end else if(field_combo.LOCKABLE_SCRATCH_REG[i0].data.load_next) begin
                field_storage.LOCKABLE_SCRATCH_REG[i0].data.value <= field_combo.LOCKABLE_SCRATCH_REG[i0].data.next;
            end
        end
    end
    for(genvar i0=0; i0<8; i0++) begin
        // Field: mci_reg.NON_STICKY_GENERIC_SCRATCH_REG[].data
        always_comb begin
            automatic logic [31:0] next_c = field_storage.NON_STICKY_GENERIC_SCRATCH_REG[i0].data.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.NON_STICKY_GENERIC_SCRATCH_REG[i0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage.NON_STICKY_GENERIC_SCRATCH_REG[i0].data.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo.NON_STICKY_GENERIC_SCRATCH_REG[i0].data.next = next_c;
            field_combo.NON_STICKY_GENERIC_SCRATCH_REG[i0].data.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
            if(~hwif_in.mci_rst_b) begin
                field_storage.NON_STICKY_GENERIC_SCRATCH_REG[i0].data.value <= 32'h0;
            end else if(field_combo.NON_STICKY_GENERIC_SCRATCH_REG[i0].data.load_next) begin
                field_storage.NON_STICKY_GENERIC_SCRATCH_REG[i0].data.value <= field_combo.NON_STICKY_GENERIC_SCRATCH_REG[i0].data.next;
            end
        end
    end
    // Field: mci_reg.intr_block_rf.global_intr_en_r.error_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.global_intr_en_r.error_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.global_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.global_intr_en_r.error_en.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.global_intr_en_r.error_en.next = next_c;
        field_combo.intr_block_rf.global_intr_en_r.error_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.global_intr_en_r.error_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.global_intr_en_r.error_en.load_next) begin
            field_storage.intr_block_rf.global_intr_en_r.error_en.value <= field_combo.intr_block_rf.global_intr_en_r.error_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.global_intr_en_r.notif_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.global_intr_en_r.notif_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.global_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.global_intr_en_r.notif_en.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.global_intr_en_r.notif_en.next = next_c;
        field_combo.intr_block_rf.global_intr_en_r.notif_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.global_intr_en_r.notif_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.global_intr_en_r.notif_en.load_next) begin
            field_storage.intr_block_rf.global_intr_en_r.notif_en.value <= field_combo.intr_block_rf.global_intr_en_r.notif_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error0_intr_en_r.error_wdt_timer1_timeout_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error0_intr_en_r.error_wdt_timer1_timeout_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error0_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error0_intr_en_r.error_wdt_timer1_timeout_en.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error0_intr_en_r.error_wdt_timer1_timeout_en.next = next_c;
        field_combo.intr_block_rf.error0_intr_en_r.error_wdt_timer1_timeout_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error0_intr_en_r.error_wdt_timer1_timeout_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error0_intr_en_r.error_wdt_timer1_timeout_en.load_next) begin
            field_storage.intr_block_rf.error0_intr_en_r.error_wdt_timer1_timeout_en.value <= field_combo.intr_block_rf.error0_intr_en_r.error_wdt_timer1_timeout_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error0_intr_en_r.error_wdt_timer2_timeout_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error0_intr_en_r.error_wdt_timer2_timeout_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error0_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error0_intr_en_r.error_wdt_timer2_timeout_en.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error0_intr_en_r.error_wdt_timer2_timeout_en.next = next_c;
        field_combo.intr_block_rf.error0_intr_en_r.error_wdt_timer2_timeout_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error0_intr_en_r.error_wdt_timer2_timeout_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error0_intr_en_r.error_wdt_timer2_timeout_en.load_next) begin
            field_storage.intr_block_rf.error0_intr_en_r.error_wdt_timer2_timeout_en.value <= field_combo.intr_block_rf.error0_intr_en_r.error_wdt_timer2_timeout_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_en_r.error_agg_error_fatal31_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal31_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal31_en.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal31_en.next = next_c;
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal31_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal31_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal31_en.load_next) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal31_en.value <= field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal31_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_en_r.error_agg_error_fatal30_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal30_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal30_en.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal30_en.next = next_c;
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal30_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal30_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal30_en.load_next) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal30_en.value <= field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal30_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_en_r.error_agg_error_fatal29_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal29_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal29_en.value & ~decoded_wr_biten[2:2]) | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal29_en.next = next_c;
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal29_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal29_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal29_en.load_next) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal29_en.value <= field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal29_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_en_r.error_agg_error_fatal28_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal28_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal28_en.value & ~decoded_wr_biten[3:3]) | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal28_en.next = next_c;
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal28_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal28_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal28_en.load_next) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal28_en.value <= field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal28_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_en_r.error_agg_error_fatal27_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal27_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal27_en.value & ~decoded_wr_biten[4:4]) | (decoded_wr_data[4:4] & decoded_wr_biten[4:4]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal27_en.next = next_c;
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal27_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal27_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal27_en.load_next) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal27_en.value <= field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal27_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_en_r.error_agg_error_fatal26_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal26_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal26_en.value & ~decoded_wr_biten[5:5]) | (decoded_wr_data[5:5] & decoded_wr_biten[5:5]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal26_en.next = next_c;
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal26_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal26_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal26_en.load_next) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal26_en.value <= field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal26_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_en_r.error_agg_error_fatal25_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal25_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal25_en.value & ~decoded_wr_biten[6:6]) | (decoded_wr_data[6:6] & decoded_wr_biten[6:6]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal25_en.next = next_c;
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal25_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal25_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal25_en.load_next) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal25_en.value <= field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal25_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_en_r.error_agg_error_fatal24_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal24_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal24_en.value & ~decoded_wr_biten[7:7]) | (decoded_wr_data[7:7] & decoded_wr_biten[7:7]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal24_en.next = next_c;
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal24_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal24_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal24_en.load_next) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal24_en.value <= field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal24_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_en_r.error_agg_error_fatal23_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal23_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal23_en.value & ~decoded_wr_biten[8:8]) | (decoded_wr_data[8:8] & decoded_wr_biten[8:8]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal23_en.next = next_c;
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal23_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal23_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal23_en.load_next) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal23_en.value <= field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal23_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_en_r.error_agg_error_fatal22_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal22_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal22_en.value & ~decoded_wr_biten[9:9]) | (decoded_wr_data[9:9] & decoded_wr_biten[9:9]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal22_en.next = next_c;
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal22_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal22_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal22_en.load_next) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal22_en.value <= field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal22_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_en_r.error_agg_error_fatal21_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal21_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal21_en.value & ~decoded_wr_biten[10:10]) | (decoded_wr_data[10:10] & decoded_wr_biten[10:10]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal21_en.next = next_c;
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal21_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal21_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal21_en.load_next) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal21_en.value <= field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal21_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_en_r.error_agg_error_fatal20_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal20_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal20_en.value & ~decoded_wr_biten[11:11]) | (decoded_wr_data[11:11] & decoded_wr_biten[11:11]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal20_en.next = next_c;
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal20_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal20_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal20_en.load_next) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal20_en.value <= field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal20_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_en_r.error_agg_error_fatal19_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal19_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal19_en.value & ~decoded_wr_biten[12:12]) | (decoded_wr_data[12:12] & decoded_wr_biten[12:12]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal19_en.next = next_c;
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal19_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal19_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal19_en.load_next) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal19_en.value <= field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal19_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_en_r.error_agg_error_fatal18_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal18_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal18_en.value & ~decoded_wr_biten[13:13]) | (decoded_wr_data[13:13] & decoded_wr_biten[13:13]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal18_en.next = next_c;
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal18_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal18_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal18_en.load_next) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal18_en.value <= field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal18_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_en_r.error_agg_error_fatal17_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal17_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal17_en.value & ~decoded_wr_biten[14:14]) | (decoded_wr_data[14:14] & decoded_wr_biten[14:14]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal17_en.next = next_c;
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal17_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal17_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal17_en.load_next) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal17_en.value <= field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal17_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_en_r.error_agg_error_fatal16_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal16_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal16_en.value & ~decoded_wr_biten[15:15]) | (decoded_wr_data[15:15] & decoded_wr_biten[15:15]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal16_en.next = next_c;
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal16_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal16_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal16_en.load_next) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal16_en.value <= field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal16_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_en_r.error_agg_error_fatal15_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal15_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal15_en.value & ~decoded_wr_biten[16:16]) | (decoded_wr_data[16:16] & decoded_wr_biten[16:16]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal15_en.next = next_c;
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal15_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal15_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal15_en.load_next) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal15_en.value <= field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal15_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_en_r.error_agg_error_fatal14_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal14_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal14_en.value & ~decoded_wr_biten[17:17]) | (decoded_wr_data[17:17] & decoded_wr_biten[17:17]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal14_en.next = next_c;
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal14_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal14_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal14_en.load_next) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal14_en.value <= field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal14_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_en_r.error_agg_error_fatal13_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal13_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal13_en.value & ~decoded_wr_biten[18:18]) | (decoded_wr_data[18:18] & decoded_wr_biten[18:18]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal13_en.next = next_c;
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal13_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal13_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal13_en.load_next) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal13_en.value <= field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal13_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_en_r.error_agg_error_fatal12_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal12_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal12_en.value & ~decoded_wr_biten[19:19]) | (decoded_wr_data[19:19] & decoded_wr_biten[19:19]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal12_en.next = next_c;
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal12_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal12_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal12_en.load_next) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal12_en.value <= field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal12_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_en_r.error_agg_error_fatal11_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal11_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal11_en.value & ~decoded_wr_biten[20:20]) | (decoded_wr_data[20:20] & decoded_wr_biten[20:20]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal11_en.next = next_c;
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal11_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal11_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal11_en.load_next) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal11_en.value <= field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal11_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_en_r.error_agg_error_fatal10_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal10_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal10_en.value & ~decoded_wr_biten[21:21]) | (decoded_wr_data[21:21] & decoded_wr_biten[21:21]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal10_en.next = next_c;
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal10_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal10_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal10_en.load_next) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal10_en.value <= field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal10_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_en_r.error_agg_error_fatal9_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal9_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal9_en.value & ~decoded_wr_biten[22:22]) | (decoded_wr_data[22:22] & decoded_wr_biten[22:22]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal9_en.next = next_c;
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal9_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal9_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal9_en.load_next) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal9_en.value <= field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal9_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_en_r.error_agg_error_fatal8_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal8_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal8_en.value & ~decoded_wr_biten[23:23]) | (decoded_wr_data[23:23] & decoded_wr_biten[23:23]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal8_en.next = next_c;
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal8_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal8_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal8_en.load_next) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal8_en.value <= field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal8_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_en_r.error_agg_error_fatal7_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal7_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal7_en.value & ~decoded_wr_biten[24:24]) | (decoded_wr_data[24:24] & decoded_wr_biten[24:24]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal7_en.next = next_c;
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal7_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal7_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal7_en.load_next) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal7_en.value <= field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal7_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_en_r.error_agg_error_fatal6_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal6_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal6_en.value & ~decoded_wr_biten[25:25]) | (decoded_wr_data[25:25] & decoded_wr_biten[25:25]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal6_en.next = next_c;
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal6_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal6_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal6_en.load_next) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal6_en.value <= field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal6_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_en_r.error_agg_error_fatal5_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal5_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal5_en.value & ~decoded_wr_biten[26:26]) | (decoded_wr_data[26:26] & decoded_wr_biten[26:26]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal5_en.next = next_c;
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal5_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal5_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal5_en.load_next) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal5_en.value <= field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal5_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_en_r.error_agg_error_fatal4_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal4_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal4_en.value & ~decoded_wr_biten[27:27]) | (decoded_wr_data[27:27] & decoded_wr_biten[27:27]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal4_en.next = next_c;
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal4_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal4_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal4_en.load_next) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal4_en.value <= field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal4_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_en_r.error_agg_error_fatal3_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal3_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal3_en.value & ~decoded_wr_biten[28:28]) | (decoded_wr_data[28:28] & decoded_wr_biten[28:28]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal3_en.next = next_c;
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal3_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal3_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal3_en.load_next) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal3_en.value <= field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal3_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_en_r.error_agg_error_fatal2_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal2_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal2_en.value & ~decoded_wr_biten[29:29]) | (decoded_wr_data[29:29] & decoded_wr_biten[29:29]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal2_en.next = next_c;
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal2_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal2_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal2_en.load_next) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal2_en.value <= field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal2_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_en_r.error_agg_error_fatal1_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal1_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal1_en.value & ~decoded_wr_biten[30:30]) | (decoded_wr_data[30:30] & decoded_wr_biten[30:30]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal1_en.next = next_c;
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal1_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal1_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal1_en.load_next) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal1_en.value <= field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal1_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_en_r.error_agg_error_fatal0_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal0_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal0_en.value & ~decoded_wr_biten[31:31]) | (decoded_wr_data[31:31] & decoded_wr_biten[31:31]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal0_en.next = next_c;
        field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal0_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal0_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal0_en.load_next) begin
            field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal0_en.value <= field_combo.intr_block_rf.error1_intr_en_r.error_agg_error_fatal0_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif0_intr_en_r.notif_mcu_sram_ecc_cor_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif0_intr_en_r.notif_mcu_sram_ecc_cor_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif0_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif0_intr_en_r.notif_mcu_sram_ecc_cor_en.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif0_intr_en_r.notif_mcu_sram_ecc_cor_en.next = next_c;
        field_combo.intr_block_rf.notif0_intr_en_r.notif_mcu_sram_ecc_cor_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif0_intr_en_r.notif_mcu_sram_ecc_cor_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif0_intr_en_r.notif_mcu_sram_ecc_cor_en.load_next) begin
            field_storage.intr_block_rf.notif0_intr_en_r.notif_mcu_sram_ecc_cor_en.value <= field_combo.intr_block_rf.notif0_intr_en_r.notif_mcu_sram_ecc_cor_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif0_intr_en_r.notif_clpra_mcu_reset_req_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif0_intr_en_r.notif_clpra_mcu_reset_req_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif0_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif0_intr_en_r.notif_clpra_mcu_reset_req_en.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif0_intr_en_r.notif_clpra_mcu_reset_req_en.next = next_c;
        field_combo.intr_block_rf.notif0_intr_en_r.notif_clpra_mcu_reset_req_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif0_intr_en_r.notif_clpra_mcu_reset_req_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif0_intr_en_r.notif_clpra_mcu_reset_req_en.load_next) begin
            field_storage.intr_block_rf.notif0_intr_en_r.notif_clpra_mcu_reset_req_en.value <= field_combo.intr_block_rf.notif0_intr_en_r.notif_clpra_mcu_reset_req_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal31_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal31_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal31_en.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal31_en.next = next_c;
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal31_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal31_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal31_en.load_next) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal31_en.value <= field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal31_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal30_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal30_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal30_en.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal30_en.next = next_c;
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal30_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal30_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal30_en.load_next) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal30_en.value <= field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal30_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal29_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal29_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal29_en.value & ~decoded_wr_biten[2:2]) | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal29_en.next = next_c;
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal29_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal29_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal29_en.load_next) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal29_en.value <= field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal29_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal28_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal28_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal28_en.value & ~decoded_wr_biten[3:3]) | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal28_en.next = next_c;
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal28_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal28_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal28_en.load_next) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal28_en.value <= field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal28_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal27_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal27_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal27_en.value & ~decoded_wr_biten[4:4]) | (decoded_wr_data[4:4] & decoded_wr_biten[4:4]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal27_en.next = next_c;
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal27_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal27_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal27_en.load_next) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal27_en.value <= field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal27_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal26_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal26_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal26_en.value & ~decoded_wr_biten[5:5]) | (decoded_wr_data[5:5] & decoded_wr_biten[5:5]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal26_en.next = next_c;
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal26_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal26_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal26_en.load_next) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal26_en.value <= field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal26_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal25_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal25_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal25_en.value & ~decoded_wr_biten[6:6]) | (decoded_wr_data[6:6] & decoded_wr_biten[6:6]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal25_en.next = next_c;
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal25_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal25_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal25_en.load_next) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal25_en.value <= field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal25_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal24_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal24_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal24_en.value & ~decoded_wr_biten[7:7]) | (decoded_wr_data[7:7] & decoded_wr_biten[7:7]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal24_en.next = next_c;
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal24_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal24_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal24_en.load_next) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal24_en.value <= field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal24_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal23_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal23_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal23_en.value & ~decoded_wr_biten[8:8]) | (decoded_wr_data[8:8] & decoded_wr_biten[8:8]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal23_en.next = next_c;
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal23_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal23_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal23_en.load_next) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal23_en.value <= field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal23_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal22_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal22_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal22_en.value & ~decoded_wr_biten[9:9]) | (decoded_wr_data[9:9] & decoded_wr_biten[9:9]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal22_en.next = next_c;
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal22_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal22_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal22_en.load_next) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal22_en.value <= field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal22_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal21_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal21_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal21_en.value & ~decoded_wr_biten[10:10]) | (decoded_wr_data[10:10] & decoded_wr_biten[10:10]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal21_en.next = next_c;
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal21_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal21_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal21_en.load_next) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal21_en.value <= field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal21_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal20_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal20_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal20_en.value & ~decoded_wr_biten[11:11]) | (decoded_wr_data[11:11] & decoded_wr_biten[11:11]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal20_en.next = next_c;
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal20_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal20_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal20_en.load_next) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal20_en.value <= field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal20_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal19_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal19_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal19_en.value & ~decoded_wr_biten[12:12]) | (decoded_wr_data[12:12] & decoded_wr_biten[12:12]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal19_en.next = next_c;
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal19_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal19_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal19_en.load_next) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal19_en.value <= field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal19_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal18_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal18_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal18_en.value & ~decoded_wr_biten[13:13]) | (decoded_wr_data[13:13] & decoded_wr_biten[13:13]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal18_en.next = next_c;
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal18_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal18_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal18_en.load_next) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal18_en.value <= field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal18_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal17_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal17_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal17_en.value & ~decoded_wr_biten[14:14]) | (decoded_wr_data[14:14] & decoded_wr_biten[14:14]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal17_en.next = next_c;
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal17_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal17_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal17_en.load_next) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal17_en.value <= field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal17_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal16_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal16_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal16_en.value & ~decoded_wr_biten[15:15]) | (decoded_wr_data[15:15] & decoded_wr_biten[15:15]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal16_en.next = next_c;
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal16_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal16_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal16_en.load_next) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal16_en.value <= field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal16_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal15_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal15_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal15_en.value & ~decoded_wr_biten[16:16]) | (decoded_wr_data[16:16] & decoded_wr_biten[16:16]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal15_en.next = next_c;
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal15_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal15_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal15_en.load_next) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal15_en.value <= field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal15_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal14_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal14_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal14_en.value & ~decoded_wr_biten[17:17]) | (decoded_wr_data[17:17] & decoded_wr_biten[17:17]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal14_en.next = next_c;
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal14_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal14_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal14_en.load_next) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal14_en.value <= field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal14_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal13_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal13_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal13_en.value & ~decoded_wr_biten[18:18]) | (decoded_wr_data[18:18] & decoded_wr_biten[18:18]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal13_en.next = next_c;
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal13_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal13_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal13_en.load_next) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal13_en.value <= field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal13_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal12_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal12_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal12_en.value & ~decoded_wr_biten[19:19]) | (decoded_wr_data[19:19] & decoded_wr_biten[19:19]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal12_en.next = next_c;
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal12_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal12_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal12_en.load_next) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal12_en.value <= field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal12_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal11_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal11_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal11_en.value & ~decoded_wr_biten[20:20]) | (decoded_wr_data[20:20] & decoded_wr_biten[20:20]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal11_en.next = next_c;
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal11_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal11_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal11_en.load_next) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal11_en.value <= field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal11_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal10_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal10_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal10_en.value & ~decoded_wr_biten[21:21]) | (decoded_wr_data[21:21] & decoded_wr_biten[21:21]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal10_en.next = next_c;
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal10_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal10_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal10_en.load_next) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal10_en.value <= field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal10_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal9_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal9_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal9_en.value & ~decoded_wr_biten[22:22]) | (decoded_wr_data[22:22] & decoded_wr_biten[22:22]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal9_en.next = next_c;
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal9_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal9_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal9_en.load_next) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal9_en.value <= field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal9_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal8_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal8_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal8_en.value & ~decoded_wr_biten[23:23]) | (decoded_wr_data[23:23] & decoded_wr_biten[23:23]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal8_en.next = next_c;
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal8_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal8_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal8_en.load_next) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal8_en.value <= field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal8_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal7_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal7_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal7_en.value & ~decoded_wr_biten[24:24]) | (decoded_wr_data[24:24] & decoded_wr_biten[24:24]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal7_en.next = next_c;
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal7_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal7_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal7_en.load_next) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal7_en.value <= field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal7_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal6_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal6_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal6_en.value & ~decoded_wr_biten[25:25]) | (decoded_wr_data[25:25] & decoded_wr_biten[25:25]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal6_en.next = next_c;
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal6_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal6_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal6_en.load_next) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal6_en.value <= field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal6_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal5_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal5_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal5_en.value & ~decoded_wr_biten[26:26]) | (decoded_wr_data[26:26] & decoded_wr_biten[26:26]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal5_en.next = next_c;
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal5_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal5_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal5_en.load_next) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal5_en.value <= field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal5_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal4_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal4_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal4_en.value & ~decoded_wr_biten[27:27]) | (decoded_wr_data[27:27] & decoded_wr_biten[27:27]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal4_en.next = next_c;
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal4_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal4_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal4_en.load_next) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal4_en.value <= field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal4_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal3_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal3_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal3_en.value & ~decoded_wr_biten[28:28]) | (decoded_wr_data[28:28] & decoded_wr_biten[28:28]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal3_en.next = next_c;
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal3_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal3_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal3_en.load_next) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal3_en.value <= field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal3_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal2_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal2_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal2_en.value & ~decoded_wr_biten[29:29]) | (decoded_wr_data[29:29] & decoded_wr_biten[29:29]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal2_en.next = next_c;
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal2_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal2_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal2_en.load_next) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal2_en.value <= field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal2_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal1_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal1_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal1_en.value & ~decoded_wr_biten[30:30]) | (decoded_wr_data[30:30] & decoded_wr_biten[30:30]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal1_en.next = next_c;
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal1_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal1_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal1_en.load_next) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal1_en.value <= field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal1_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal0_en
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal0_en.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_en_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal0_en.value & ~decoded_wr_biten[31:31]) | (decoded_wr_data[31:31] & decoded_wr_biten[31:31]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal0_en.next = next_c;
        field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal0_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal0_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal0_en.load_next) begin
            field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal0_en.value <= field_combo.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal0_en.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_global_intr_r.agg_sts0
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_global_intr_r.agg_sts0.value;
        automatic logic load_next_c = '0;
        
        // HW Write
        next_c = hwif_out.intr_block_rf.error0_internal_intr_r.intr;
        load_next_c = '1;
        field_combo.intr_block_rf.error_global_intr_r.agg_sts0.next = next_c;
        field_combo.intr_block_rf.error_global_intr_r.agg_sts0.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error_global_intr_r.agg_sts0.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_global_intr_r.agg_sts0.load_next) begin
            field_storage.intr_block_rf.error_global_intr_r.agg_sts0.value <= field_combo.intr_block_rf.error_global_intr_r.agg_sts0.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_global_intr_r.agg_sts1
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_global_intr_r.agg_sts1.value;
        automatic logic load_next_c = '0;
        
        // HW Write
        next_c = hwif_out.intr_block_rf.error1_internal_intr_r.intr;
        load_next_c = '1;
        field_combo.intr_block_rf.error_global_intr_r.agg_sts1.next = next_c;
        field_combo.intr_block_rf.error_global_intr_r.agg_sts1.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error_global_intr_r.agg_sts1.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_global_intr_r.agg_sts1.load_next) begin
            field_storage.intr_block_rf.error_global_intr_r.agg_sts1.value <= field_combo.intr_block_rf.error_global_intr_r.agg_sts1.next;
        end
    end
    assign hwif_out.intr_block_rf.error_global_intr_r.intr =
        |(field_storage.intr_block_rf.error_global_intr_r.agg_sts0.value & field_storage.intr_block_rf.global_intr_en_r.error_en.value)
        || |(field_storage.intr_block_rf.error_global_intr_r.agg_sts1.value & field_storage.intr_block_rf.global_intr_en_r.error_en.value);
    // Field: mci_reg.intr_block_rf.notif_global_intr_r.agg_sts0
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_global_intr_r.agg_sts0.value;
        automatic logic load_next_c = '0;
        
        // HW Write
        next_c = hwif_out.intr_block_rf.notif0_internal_intr_r.intr;
        load_next_c = '1;
        field_combo.intr_block_rf.notif_global_intr_r.agg_sts0.next = next_c;
        field_combo.intr_block_rf.notif_global_intr_r.agg_sts0.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_global_intr_r.agg_sts0.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_global_intr_r.agg_sts0.load_next) begin
            field_storage.intr_block_rf.notif_global_intr_r.agg_sts0.value <= field_combo.intr_block_rf.notif_global_intr_r.agg_sts0.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_global_intr_r.agg_sts1
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_global_intr_r.agg_sts1.value;
        automatic logic load_next_c = '0;
        
        // HW Write
        next_c = hwif_out.intr_block_rf.notif1_internal_intr_r.intr;
        load_next_c = '1;
        field_combo.intr_block_rf.notif_global_intr_r.agg_sts1.next = next_c;
        field_combo.intr_block_rf.notif_global_intr_r.agg_sts1.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_global_intr_r.agg_sts1.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_global_intr_r.agg_sts1.load_next) begin
            field_storage.intr_block_rf.notif_global_intr_r.agg_sts1.value <= field_combo.intr_block_rf.notif_global_intr_r.agg_sts1.next;
        end
    end
    assign hwif_out.intr_block_rf.notif_global_intr_r.intr =
        |(field_storage.intr_block_rf.notif_global_intr_r.agg_sts0.value & field_storage.intr_block_rf.global_intr_en_r.notif_en.value)
        || |(field_storage.intr_block_rf.notif_global_intr_r.agg_sts1.value & field_storage.intr_block_rf.global_intr_en_r.notif_en.value);
    // Field: mci_reg.intr_block_rf.error0_internal_intr_r.error_wdt_timer1_timeout_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error0_internal_intr_r.error_wdt_timer1_timeout_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error0_intr_trig_r.error_wdt_timer1_timeout_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error0_internal_intr_r.error_wdt_timer1_timeout_sts.value | field_storage.intr_block_rf.error0_intr_trig_r.error_wdt_timer1_timeout_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error0_internal_intr_r.error_wdt_timer1_timeout_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error0_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error0_internal_intr_r.error_wdt_timer1_timeout_sts.value & ~(decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error0_internal_intr_r.error_wdt_timer1_timeout_sts.next = next_c;
        field_combo.intr_block_rf.error0_internal_intr_r.error_wdt_timer1_timeout_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error0_internal_intr_r.error_wdt_timer1_timeout_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error0_internal_intr_r.error_wdt_timer1_timeout_sts.load_next) begin
            field_storage.intr_block_rf.error0_internal_intr_r.error_wdt_timer1_timeout_sts.value <= field_combo.intr_block_rf.error0_internal_intr_r.error_wdt_timer1_timeout_sts.next;
        end
    end
    assign hwif_out.intr_block_rf.error0_internal_intr_r.error_wdt_timer1_timeout_sts.value = field_storage.intr_block_rf.error0_internal_intr_r.error_wdt_timer1_timeout_sts.value;
    // Field: mci_reg.intr_block_rf.error0_internal_intr_r.error_wdt_timer2_timeout_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error0_internal_intr_r.error_wdt_timer2_timeout_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error0_intr_trig_r.error_wdt_timer2_timeout_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error0_internal_intr_r.error_wdt_timer2_timeout_sts.value | field_storage.intr_block_rf.error0_intr_trig_r.error_wdt_timer2_timeout_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error0_internal_intr_r.error_wdt_timer2_timeout_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error0_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error0_internal_intr_r.error_wdt_timer2_timeout_sts.value & ~(decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error0_internal_intr_r.error_wdt_timer2_timeout_sts.next = next_c;
        field_combo.intr_block_rf.error0_internal_intr_r.error_wdt_timer2_timeout_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error0_internal_intr_r.error_wdt_timer2_timeout_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error0_internal_intr_r.error_wdt_timer2_timeout_sts.load_next) begin
            field_storage.intr_block_rf.error0_internal_intr_r.error_wdt_timer2_timeout_sts.value <= field_combo.intr_block_rf.error0_internal_intr_r.error_wdt_timer2_timeout_sts.next;
        end
    end
    assign hwif_out.intr_block_rf.error0_internal_intr_r.error_wdt_timer2_timeout_sts.value = field_storage.intr_block_rf.error0_internal_intr_r.error_wdt_timer2_timeout_sts.value;
    assign hwif_out.intr_block_rf.error0_internal_intr_r.intr =
        |(field_storage.intr_block_rf.error0_internal_intr_r.error_wdt_timer1_timeout_sts.value & field_storage.intr_block_rf.error0_intr_en_r.error_wdt_timer1_timeout_en.value)
        || |(field_storage.intr_block_rf.error0_internal_intr_r.error_wdt_timer2_timeout_sts.value & field_storage.intr_block_rf.error0_intr_en_r.error_wdt_timer2_timeout_en.value);
    // Field: mci_reg.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal31_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal31_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal31_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal31_sts.value | field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal31_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal31_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal31_sts.value & ~(decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal31_sts.next = next_c;
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal31_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal31_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal31_sts.load_next) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal31_sts.value <= field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal31_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal30_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal30_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal30_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal30_sts.value | field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal30_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal30_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal30_sts.value & ~(decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal30_sts.next = next_c;
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal30_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal30_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal30_sts.load_next) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal30_sts.value <= field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal30_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal29_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal29_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal29_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal29_sts.value | field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal29_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal29_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal29_sts.value & ~(decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal29_sts.next = next_c;
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal29_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal29_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal29_sts.load_next) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal29_sts.value <= field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal29_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal28_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal28_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal28_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal28_sts.value | field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal28_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal28_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal28_sts.value & ~(decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal28_sts.next = next_c;
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal28_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal28_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal28_sts.load_next) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal28_sts.value <= field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal28_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal27_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal27_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal27_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal27_sts.value | field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal27_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal27_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal27_sts.value & ~(decoded_wr_data[4:4] & decoded_wr_biten[4:4]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal27_sts.next = next_c;
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal27_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal27_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal27_sts.load_next) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal27_sts.value <= field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal27_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal26_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal26_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal26_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal26_sts.value | field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal26_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal26_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal26_sts.value & ~(decoded_wr_data[5:5] & decoded_wr_biten[5:5]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal26_sts.next = next_c;
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal26_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal26_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal26_sts.load_next) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal26_sts.value <= field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal26_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal25_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal25_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal25_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal25_sts.value | field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal25_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal25_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal25_sts.value & ~(decoded_wr_data[6:6] & decoded_wr_biten[6:6]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal25_sts.next = next_c;
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal25_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal25_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal25_sts.load_next) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal25_sts.value <= field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal25_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal24_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal24_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal24_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal24_sts.value | field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal24_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal24_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal24_sts.value & ~(decoded_wr_data[7:7] & decoded_wr_biten[7:7]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal24_sts.next = next_c;
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal24_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal24_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal24_sts.load_next) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal24_sts.value <= field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal24_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal23_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal23_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal23_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal23_sts.value | field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal23_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal23_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal23_sts.value & ~(decoded_wr_data[8:8] & decoded_wr_biten[8:8]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal23_sts.next = next_c;
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal23_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal23_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal23_sts.load_next) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal23_sts.value <= field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal23_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal22_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal22_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal22_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal22_sts.value | field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal22_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal22_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal22_sts.value & ~(decoded_wr_data[9:9] & decoded_wr_biten[9:9]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal22_sts.next = next_c;
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal22_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal22_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal22_sts.load_next) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal22_sts.value <= field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal22_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal21_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal21_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal21_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal21_sts.value | field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal21_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal21_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal21_sts.value & ~(decoded_wr_data[10:10] & decoded_wr_biten[10:10]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal21_sts.next = next_c;
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal21_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal21_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal21_sts.load_next) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal21_sts.value <= field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal21_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal20_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal20_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal20_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal20_sts.value | field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal20_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal20_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal20_sts.value & ~(decoded_wr_data[11:11] & decoded_wr_biten[11:11]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal20_sts.next = next_c;
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal20_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal20_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal20_sts.load_next) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal20_sts.value <= field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal20_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal19_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal19_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal19_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal19_sts.value | field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal19_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal19_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal19_sts.value & ~(decoded_wr_data[12:12] & decoded_wr_biten[12:12]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal19_sts.next = next_c;
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal19_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal19_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal19_sts.load_next) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal19_sts.value <= field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal19_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal18_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal18_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal18_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal18_sts.value | field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal18_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal18_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal18_sts.value & ~(decoded_wr_data[13:13] & decoded_wr_biten[13:13]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal18_sts.next = next_c;
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal18_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal18_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal18_sts.load_next) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal18_sts.value <= field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal18_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal17_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal17_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal17_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal17_sts.value | field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal17_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal17_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal17_sts.value & ~(decoded_wr_data[14:14] & decoded_wr_biten[14:14]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal17_sts.next = next_c;
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal17_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal17_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal17_sts.load_next) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal17_sts.value <= field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal17_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal16_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal16_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal16_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal16_sts.value | field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal16_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal16_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal16_sts.value & ~(decoded_wr_data[15:15] & decoded_wr_biten[15:15]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal16_sts.next = next_c;
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal16_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal16_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal16_sts.load_next) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal16_sts.value <= field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal16_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal15_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal15_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal15_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal15_sts.value | field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal15_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal15_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal15_sts.value & ~(decoded_wr_data[16:16] & decoded_wr_biten[16:16]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal15_sts.next = next_c;
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal15_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal15_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal15_sts.load_next) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal15_sts.value <= field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal15_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal14_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal14_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal14_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal14_sts.value | field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal14_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal14_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal14_sts.value & ~(decoded_wr_data[17:17] & decoded_wr_biten[17:17]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal14_sts.next = next_c;
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal14_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal14_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal14_sts.load_next) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal14_sts.value <= field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal14_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal13_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal13_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal13_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal13_sts.value | field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal13_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal13_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal13_sts.value & ~(decoded_wr_data[18:18] & decoded_wr_biten[18:18]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal13_sts.next = next_c;
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal13_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal13_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal13_sts.load_next) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal13_sts.value <= field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal13_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal12_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal12_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal12_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal12_sts.value | field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal12_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal12_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal12_sts.value & ~(decoded_wr_data[19:19] & decoded_wr_biten[19:19]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal12_sts.next = next_c;
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal12_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal12_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal12_sts.load_next) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal12_sts.value <= field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal12_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal11_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal11_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal11_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal11_sts.value | field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal11_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal11_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal11_sts.value & ~(decoded_wr_data[20:20] & decoded_wr_biten[20:20]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal11_sts.next = next_c;
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal11_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal11_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal11_sts.load_next) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal11_sts.value <= field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal11_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal10_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal10_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal10_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal10_sts.value | field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal10_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal10_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal10_sts.value & ~(decoded_wr_data[21:21] & decoded_wr_biten[21:21]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal10_sts.next = next_c;
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal10_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal10_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal10_sts.load_next) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal10_sts.value <= field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal10_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal9_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal9_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal9_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal9_sts.value | field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal9_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal9_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal9_sts.value & ~(decoded_wr_data[22:22] & decoded_wr_biten[22:22]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal9_sts.next = next_c;
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal9_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal9_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal9_sts.load_next) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal9_sts.value <= field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal9_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal8_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal8_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal8_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal8_sts.value | field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal8_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal8_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal8_sts.value & ~(decoded_wr_data[23:23] & decoded_wr_biten[23:23]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal8_sts.next = next_c;
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal8_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal8_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal8_sts.load_next) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal8_sts.value <= field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal8_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal7_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal7_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal7_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal7_sts.value | field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal7_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal7_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal7_sts.value & ~(decoded_wr_data[24:24] & decoded_wr_biten[24:24]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal7_sts.next = next_c;
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal7_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal7_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal7_sts.load_next) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal7_sts.value <= field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal7_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal6_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal6_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal6_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal6_sts.value | field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal6_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal6_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal6_sts.value & ~(decoded_wr_data[25:25] & decoded_wr_biten[25:25]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal6_sts.next = next_c;
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal6_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal6_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal6_sts.load_next) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal6_sts.value <= field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal6_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal5_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal5_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal5_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal5_sts.value | field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal5_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal5_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal5_sts.value & ~(decoded_wr_data[26:26] & decoded_wr_biten[26:26]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal5_sts.next = next_c;
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal5_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal5_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal5_sts.load_next) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal5_sts.value <= field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal5_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal4_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal4_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal4_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal4_sts.value | field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal4_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal4_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal4_sts.value & ~(decoded_wr_data[27:27] & decoded_wr_biten[27:27]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal4_sts.next = next_c;
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal4_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal4_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal4_sts.load_next) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal4_sts.value <= field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal4_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal3_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal3_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal3_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal3_sts.value | field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal3_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal3_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal3_sts.value & ~(decoded_wr_data[28:28] & decoded_wr_biten[28:28]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal3_sts.next = next_c;
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal3_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal3_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal3_sts.load_next) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal3_sts.value <= field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal3_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal2_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal2_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal2_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal2_sts.value | field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal2_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal2_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal2_sts.value & ~(decoded_wr_data[29:29] & decoded_wr_biten[29:29]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal2_sts.next = next_c;
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal2_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal2_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal2_sts.load_next) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal2_sts.value <= field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal2_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal1_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal1_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal1_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal1_sts.value | field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal1_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal1_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal1_sts.value & ~(decoded_wr_data[30:30] & decoded_wr_biten[30:30]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal1_sts.next = next_c;
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal1_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal1_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal1_sts.load_next) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal1_sts.value <= field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal1_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal0_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal0_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal0_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal0_sts.value | field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal0_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal0_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal0_sts.value & ~(decoded_wr_data[31:31] & decoded_wr_biten[31:31]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal0_sts.next = next_c;
        field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal0_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal0_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal0_sts.load_next) begin
            field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal0_sts.value <= field_combo.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal0_sts.next;
        end
    end
    assign hwif_out.intr_block_rf.error1_internal_intr_r.intr =
        |(field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal31_sts.value & field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal31_en.value)
        || |(field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal30_sts.value & field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal30_en.value)
        || |(field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal29_sts.value & field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal29_en.value)
        || |(field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal28_sts.value & field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal28_en.value)
        || |(field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal27_sts.value & field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal27_en.value)
        || |(field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal26_sts.value & field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal26_en.value)
        || |(field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal25_sts.value & field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal25_en.value)
        || |(field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal24_sts.value & field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal24_en.value)
        || |(field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal23_sts.value & field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal23_en.value)
        || |(field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal22_sts.value & field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal22_en.value)
        || |(field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal21_sts.value & field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal21_en.value)
        || |(field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal20_sts.value & field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal20_en.value)
        || |(field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal19_sts.value & field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal19_en.value)
        || |(field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal18_sts.value & field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal18_en.value)
        || |(field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal17_sts.value & field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal17_en.value)
        || |(field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal16_sts.value & field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal16_en.value)
        || |(field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal15_sts.value & field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal15_en.value)
        || |(field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal14_sts.value & field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal14_en.value)
        || |(field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal13_sts.value & field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal13_en.value)
        || |(field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal12_sts.value & field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal12_en.value)
        || |(field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal11_sts.value & field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal11_en.value)
        || |(field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal10_sts.value & field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal10_en.value)
        || |(field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal9_sts.value & field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal9_en.value)
        || |(field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal8_sts.value & field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal8_en.value)
        || |(field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal7_sts.value & field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal7_en.value)
        || |(field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal6_sts.value & field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal6_en.value)
        || |(field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal5_sts.value & field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal5_en.value)
        || |(field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal4_sts.value & field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal4_en.value)
        || |(field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal3_sts.value & field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal3_en.value)
        || |(field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal2_sts.value & field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal2_en.value)
        || |(field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal1_sts.value & field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal1_en.value)
        || |(field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal0_sts.value & field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal0_en.value);
    // Field: mci_reg.intr_block_rf.notif0_internal_intr_r.notif_mcu_sram_ecc_cor_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif0_internal_intr_r.notif_mcu_sram_ecc_cor_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif0_intr_trig_r.notif_mcu_sram_ecc_cor_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.notif0_internal_intr_r.notif_mcu_sram_ecc_cor_sts.value | field_storage.intr_block_rf.notif0_intr_trig_r.notif_mcu_sram_ecc_cor_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif0_internal_intr_r.notif_mcu_sram_ecc_cor_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif0_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif0_internal_intr_r.notif_mcu_sram_ecc_cor_sts.value & ~(decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif0_internal_intr_r.notif_mcu_sram_ecc_cor_sts.next = next_c;
        field_combo.intr_block_rf.notif0_internal_intr_r.notif_mcu_sram_ecc_cor_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif0_internal_intr_r.notif_mcu_sram_ecc_cor_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif0_internal_intr_r.notif_mcu_sram_ecc_cor_sts.load_next) begin
            field_storage.intr_block_rf.notif0_internal_intr_r.notif_mcu_sram_ecc_cor_sts.value <= field_combo.intr_block_rf.notif0_internal_intr_r.notif_mcu_sram_ecc_cor_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif0_internal_intr_r.notif_clpra_mcu_reset_req_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif0_internal_intr_r.notif_clpra_mcu_reset_req_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif0_intr_trig_r.notif_clpra_mcu_reset_req_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.notif0_internal_intr_r.notif_clpra_mcu_reset_req_sts.value | field_storage.intr_block_rf.notif0_intr_trig_r.notif_clpra_mcu_reset_req_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif0_internal_intr_r.notif_clpra_mcu_reset_req_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif0_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif0_internal_intr_r.notif_clpra_mcu_reset_req_sts.value & ~(decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif0_internal_intr_r.notif_clpra_mcu_reset_req_sts.next = next_c;
        field_combo.intr_block_rf.notif0_internal_intr_r.notif_clpra_mcu_reset_req_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif0_internal_intr_r.notif_clpra_mcu_reset_req_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif0_internal_intr_r.notif_clpra_mcu_reset_req_sts.load_next) begin
            field_storage.intr_block_rf.notif0_internal_intr_r.notif_clpra_mcu_reset_req_sts.value <= field_combo.intr_block_rf.notif0_internal_intr_r.notif_clpra_mcu_reset_req_sts.next;
        end
    end
    assign hwif_out.intr_block_rf.notif0_internal_intr_r.intr =
        |(field_storage.intr_block_rf.notif0_internal_intr_r.notif_mcu_sram_ecc_cor_sts.value & field_storage.intr_block_rf.notif0_intr_en_r.notif_mcu_sram_ecc_cor_en.value)
        || |(field_storage.intr_block_rf.notif0_internal_intr_r.notif_clpra_mcu_reset_req_sts.value & field_storage.intr_block_rf.notif0_intr_en_r.notif_clpra_mcu_reset_req_en.value);
    // Field: mci_reg.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal31_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal31_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal31_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal31_sts.value | field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal31_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal31_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal31_sts.value & ~(decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal31_sts.next = next_c;
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal31_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal31_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal31_sts.load_next) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal31_sts.value <= field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal31_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal30_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal30_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal30_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal30_sts.value | field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal30_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal30_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal30_sts.value & ~(decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal30_sts.next = next_c;
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal30_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal30_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal30_sts.load_next) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal30_sts.value <= field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal30_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal29_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal29_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal29_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal29_sts.value | field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal29_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal29_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal29_sts.value & ~(decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal29_sts.next = next_c;
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal29_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal29_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal29_sts.load_next) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal29_sts.value <= field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal29_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal28_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal28_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal28_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal28_sts.value | field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal28_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal28_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal28_sts.value & ~(decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal28_sts.next = next_c;
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal28_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal28_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal28_sts.load_next) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal28_sts.value <= field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal28_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal27_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal27_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal27_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal27_sts.value | field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal27_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal27_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal27_sts.value & ~(decoded_wr_data[4:4] & decoded_wr_biten[4:4]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal27_sts.next = next_c;
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal27_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal27_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal27_sts.load_next) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal27_sts.value <= field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal27_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal26_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal26_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal26_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal26_sts.value | field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal26_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal26_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal26_sts.value & ~(decoded_wr_data[5:5] & decoded_wr_biten[5:5]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal26_sts.next = next_c;
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal26_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal26_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal26_sts.load_next) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal26_sts.value <= field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal26_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal25_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal25_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal25_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal25_sts.value | field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal25_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal25_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal25_sts.value & ~(decoded_wr_data[6:6] & decoded_wr_biten[6:6]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal25_sts.next = next_c;
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal25_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal25_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal25_sts.load_next) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal25_sts.value <= field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal25_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal24_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal24_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal24_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal24_sts.value | field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal24_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal24_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal24_sts.value & ~(decoded_wr_data[7:7] & decoded_wr_biten[7:7]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal24_sts.next = next_c;
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal24_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal24_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal24_sts.load_next) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal24_sts.value <= field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal24_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal23_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal23_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal23_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal23_sts.value | field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal23_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal23_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal23_sts.value & ~(decoded_wr_data[8:8] & decoded_wr_biten[8:8]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal23_sts.next = next_c;
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal23_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal23_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal23_sts.load_next) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal23_sts.value <= field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal23_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal22_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal22_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal22_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal22_sts.value | field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal22_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal22_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal22_sts.value & ~(decoded_wr_data[9:9] & decoded_wr_biten[9:9]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal22_sts.next = next_c;
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal22_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal22_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal22_sts.load_next) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal22_sts.value <= field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal22_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal21_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal21_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal21_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal21_sts.value | field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal21_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal21_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal21_sts.value & ~(decoded_wr_data[10:10] & decoded_wr_biten[10:10]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal21_sts.next = next_c;
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal21_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal21_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal21_sts.load_next) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal21_sts.value <= field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal21_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal20_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal20_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal20_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal20_sts.value | field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal20_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal20_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal20_sts.value & ~(decoded_wr_data[11:11] & decoded_wr_biten[11:11]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal20_sts.next = next_c;
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal20_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal20_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal20_sts.load_next) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal20_sts.value <= field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal20_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal19_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal19_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal19_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal19_sts.value | field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal19_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal19_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal19_sts.value & ~(decoded_wr_data[12:12] & decoded_wr_biten[12:12]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal19_sts.next = next_c;
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal19_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal19_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal19_sts.load_next) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal19_sts.value <= field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal19_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal18_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal18_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal18_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal18_sts.value | field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal18_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal18_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal18_sts.value & ~(decoded_wr_data[13:13] & decoded_wr_biten[13:13]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal18_sts.next = next_c;
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal18_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal18_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal18_sts.load_next) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal18_sts.value <= field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal18_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal17_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal17_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal17_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal17_sts.value | field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal17_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal17_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal17_sts.value & ~(decoded_wr_data[14:14] & decoded_wr_biten[14:14]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal17_sts.next = next_c;
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal17_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal17_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal17_sts.load_next) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal17_sts.value <= field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal17_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal16_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal16_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal16_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal16_sts.value | field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal16_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal16_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal16_sts.value & ~(decoded_wr_data[15:15] & decoded_wr_biten[15:15]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal16_sts.next = next_c;
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal16_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal16_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal16_sts.load_next) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal16_sts.value <= field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal16_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal15_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal15_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal15_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal15_sts.value | field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal15_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal15_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal15_sts.value & ~(decoded_wr_data[16:16] & decoded_wr_biten[16:16]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal15_sts.next = next_c;
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal15_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal15_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal15_sts.load_next) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal15_sts.value <= field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal15_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal14_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal14_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal14_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal14_sts.value | field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal14_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal14_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal14_sts.value & ~(decoded_wr_data[17:17] & decoded_wr_biten[17:17]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal14_sts.next = next_c;
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal14_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal14_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal14_sts.load_next) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal14_sts.value <= field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal14_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal13_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal13_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal13_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal13_sts.value | field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal13_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal13_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal13_sts.value & ~(decoded_wr_data[18:18] & decoded_wr_biten[18:18]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal13_sts.next = next_c;
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal13_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal13_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal13_sts.load_next) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal13_sts.value <= field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal13_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal12_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal12_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal12_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal12_sts.value | field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal12_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal12_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal12_sts.value & ~(decoded_wr_data[19:19] & decoded_wr_biten[19:19]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal12_sts.next = next_c;
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal12_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal12_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal12_sts.load_next) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal12_sts.value <= field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal12_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal11_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal11_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal11_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal11_sts.value | field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal11_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal11_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal11_sts.value & ~(decoded_wr_data[20:20] & decoded_wr_biten[20:20]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal11_sts.next = next_c;
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal11_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal11_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal11_sts.load_next) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal11_sts.value <= field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal11_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal10_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal10_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal10_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal10_sts.value | field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal10_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal10_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal10_sts.value & ~(decoded_wr_data[21:21] & decoded_wr_biten[21:21]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal10_sts.next = next_c;
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal10_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal10_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal10_sts.load_next) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal10_sts.value <= field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal10_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal9_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal9_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal9_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal9_sts.value | field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal9_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal9_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal9_sts.value & ~(decoded_wr_data[22:22] & decoded_wr_biten[22:22]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal9_sts.next = next_c;
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal9_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal9_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal9_sts.load_next) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal9_sts.value <= field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal9_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal8_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal8_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal8_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal8_sts.value | field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal8_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal8_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal8_sts.value & ~(decoded_wr_data[23:23] & decoded_wr_biten[23:23]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal8_sts.next = next_c;
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal8_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal8_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal8_sts.load_next) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal8_sts.value <= field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal8_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal7_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal7_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal7_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal7_sts.value | field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal7_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal7_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal7_sts.value & ~(decoded_wr_data[24:24] & decoded_wr_biten[24:24]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal7_sts.next = next_c;
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal7_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal7_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal7_sts.load_next) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal7_sts.value <= field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal7_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal6_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal6_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal6_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal6_sts.value | field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal6_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal6_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal6_sts.value & ~(decoded_wr_data[25:25] & decoded_wr_biten[25:25]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal6_sts.next = next_c;
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal6_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal6_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal6_sts.load_next) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal6_sts.value <= field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal6_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal5_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal5_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal5_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal5_sts.value | field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal5_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal5_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal5_sts.value & ~(decoded_wr_data[26:26] & decoded_wr_biten[26:26]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal5_sts.next = next_c;
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal5_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal5_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal5_sts.load_next) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal5_sts.value <= field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal5_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal4_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal4_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal4_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal4_sts.value | field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal4_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal4_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal4_sts.value & ~(decoded_wr_data[27:27] & decoded_wr_biten[27:27]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal4_sts.next = next_c;
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal4_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal4_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal4_sts.load_next) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal4_sts.value <= field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal4_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal3_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal3_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal3_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal3_sts.value | field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal3_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal3_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal3_sts.value & ~(decoded_wr_data[28:28] & decoded_wr_biten[28:28]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal3_sts.next = next_c;
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal3_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal3_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal3_sts.load_next) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal3_sts.value <= field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal3_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal2_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal2_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal2_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal2_sts.value | field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal2_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal2_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal2_sts.value & ~(decoded_wr_data[29:29] & decoded_wr_biten[29:29]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal2_sts.next = next_c;
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal2_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal2_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal2_sts.load_next) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal2_sts.value <= field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal2_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal1_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal1_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal1_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal1_sts.value | field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal1_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal1_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal1_sts.value & ~(decoded_wr_data[30:30] & decoded_wr_biten[30:30]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal1_sts.next = next_c;
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal1_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal1_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal1_sts.load_next) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal1_sts.value <= field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal1_sts.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal0_sts
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal0_sts.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal0_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal0_sts.value | field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal0_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal0_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal0_sts.value & ~(decoded_wr_data[31:31] & decoded_wr_biten[31:31]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal0_sts.next = next_c;
        field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal0_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal0_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal0_sts.load_next) begin
            field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal0_sts.value <= field_combo.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal0_sts.next;
        end
    end
    assign hwif_out.intr_block_rf.notif1_internal_intr_r.intr =
        |(field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal31_sts.value & field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal31_en.value)
        || |(field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal30_sts.value & field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal30_en.value)
        || |(field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal29_sts.value & field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal29_en.value)
        || |(field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal28_sts.value & field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal28_en.value)
        || |(field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal27_sts.value & field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal27_en.value)
        || |(field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal26_sts.value & field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal26_en.value)
        || |(field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal25_sts.value & field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal25_en.value)
        || |(field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal24_sts.value & field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal24_en.value)
        || |(field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal23_sts.value & field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal23_en.value)
        || |(field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal22_sts.value & field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal22_en.value)
        || |(field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal21_sts.value & field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal21_en.value)
        || |(field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal20_sts.value & field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal20_en.value)
        || |(field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal19_sts.value & field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal19_en.value)
        || |(field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal18_sts.value & field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal18_en.value)
        || |(field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal17_sts.value & field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal17_en.value)
        || |(field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal16_sts.value & field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal16_en.value)
        || |(field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal15_sts.value & field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal15_en.value)
        || |(field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal14_sts.value & field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal14_en.value)
        || |(field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal13_sts.value & field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal13_en.value)
        || |(field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal12_sts.value & field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal12_en.value)
        || |(field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal11_sts.value & field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal11_en.value)
        || |(field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal10_sts.value & field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal10_en.value)
        || |(field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal9_sts.value & field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal9_en.value)
        || |(field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal8_sts.value & field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal8_en.value)
        || |(field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal7_sts.value & field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal7_en.value)
        || |(field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal6_sts.value & field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal6_en.value)
        || |(field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal5_sts.value & field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal5_en.value)
        || |(field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal4_sts.value & field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal4_en.value)
        || |(field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal3_sts.value & field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal3_en.value)
        || |(field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal2_sts.value & field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal2_en.value)
        || |(field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal1_sts.value & field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal1_en.value)
        || |(field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal0_sts.value & field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal0_en.value);
    // Field: mci_reg.intr_block_rf.error0_intr_trig_r.error_wdt_timer1_timeout_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error0_intr_trig_r.error_wdt_timer1_timeout_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error0_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error0_intr_trig_r.error_wdt_timer1_timeout_trig.value | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error0_intr_trig_r.error_wdt_timer1_timeout_trig.next = next_c;
        field_combo.intr_block_rf.error0_intr_trig_r.error_wdt_timer1_timeout_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error0_intr_trig_r.error_wdt_timer1_timeout_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error0_intr_trig_r.error_wdt_timer1_timeout_trig.load_next) begin
            field_storage.intr_block_rf.error0_intr_trig_r.error_wdt_timer1_timeout_trig.value <= field_combo.intr_block_rf.error0_intr_trig_r.error_wdt_timer1_timeout_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error0_intr_trig_r.error_wdt_timer2_timeout_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error0_intr_trig_r.error_wdt_timer2_timeout_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error0_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error0_intr_trig_r.error_wdt_timer2_timeout_trig.value | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error0_intr_trig_r.error_wdt_timer2_timeout_trig.next = next_c;
        field_combo.intr_block_rf.error0_intr_trig_r.error_wdt_timer2_timeout_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error0_intr_trig_r.error_wdt_timer2_timeout_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error0_intr_trig_r.error_wdt_timer2_timeout_trig.load_next) begin
            field_storage.intr_block_rf.error0_intr_trig_r.error_wdt_timer2_timeout_trig.value <= field_combo.intr_block_rf.error0_intr_trig_r.error_wdt_timer2_timeout_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal31_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal31_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal31_trig.value | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal31_trig.next = next_c;
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal31_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal31_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal31_trig.load_next) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal31_trig.value <= field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal31_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal30_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal30_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal30_trig.value | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal30_trig.next = next_c;
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal30_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal30_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal30_trig.load_next) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal30_trig.value <= field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal30_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal29_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal29_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal29_trig.value | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal29_trig.next = next_c;
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal29_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal29_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal29_trig.load_next) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal29_trig.value <= field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal29_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal28_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal28_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal28_trig.value | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal28_trig.next = next_c;
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal28_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal28_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal28_trig.load_next) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal28_trig.value <= field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal28_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal27_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal27_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal27_trig.value | (decoded_wr_data[4:4] & decoded_wr_biten[4:4]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal27_trig.next = next_c;
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal27_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal27_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal27_trig.load_next) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal27_trig.value <= field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal27_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal26_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal26_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal26_trig.value | (decoded_wr_data[5:5] & decoded_wr_biten[5:5]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal26_trig.next = next_c;
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal26_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal26_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal26_trig.load_next) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal26_trig.value <= field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal26_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal25_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal25_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal25_trig.value | (decoded_wr_data[6:6] & decoded_wr_biten[6:6]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal25_trig.next = next_c;
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal25_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal25_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal25_trig.load_next) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal25_trig.value <= field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal25_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal24_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal24_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal24_trig.value | (decoded_wr_data[7:7] & decoded_wr_biten[7:7]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal24_trig.next = next_c;
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal24_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal24_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal24_trig.load_next) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal24_trig.value <= field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal24_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal23_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal23_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal23_trig.value | (decoded_wr_data[8:8] & decoded_wr_biten[8:8]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal23_trig.next = next_c;
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal23_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal23_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal23_trig.load_next) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal23_trig.value <= field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal23_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal22_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal22_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal22_trig.value | (decoded_wr_data[9:9] & decoded_wr_biten[9:9]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal22_trig.next = next_c;
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal22_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal22_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal22_trig.load_next) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal22_trig.value <= field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal22_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal21_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal21_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal21_trig.value | (decoded_wr_data[10:10] & decoded_wr_biten[10:10]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal21_trig.next = next_c;
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal21_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal21_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal21_trig.load_next) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal21_trig.value <= field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal21_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal20_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal20_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal20_trig.value | (decoded_wr_data[11:11] & decoded_wr_biten[11:11]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal20_trig.next = next_c;
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal20_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal20_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal20_trig.load_next) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal20_trig.value <= field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal20_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal19_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal19_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal19_trig.value | (decoded_wr_data[12:12] & decoded_wr_biten[12:12]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal19_trig.next = next_c;
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal19_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal19_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal19_trig.load_next) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal19_trig.value <= field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal19_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal18_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal18_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal18_trig.value | (decoded_wr_data[13:13] & decoded_wr_biten[13:13]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal18_trig.next = next_c;
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal18_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal18_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal18_trig.load_next) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal18_trig.value <= field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal18_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal17_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal17_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal17_trig.value | (decoded_wr_data[14:14] & decoded_wr_biten[14:14]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal17_trig.next = next_c;
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal17_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal17_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal17_trig.load_next) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal17_trig.value <= field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal17_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal16_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal16_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal16_trig.value | (decoded_wr_data[15:15] & decoded_wr_biten[15:15]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal16_trig.next = next_c;
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal16_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal16_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal16_trig.load_next) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal16_trig.value <= field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal16_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal15_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal15_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal15_trig.value | (decoded_wr_data[16:16] & decoded_wr_biten[16:16]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal15_trig.next = next_c;
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal15_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal15_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal15_trig.load_next) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal15_trig.value <= field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal15_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal14_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal14_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal14_trig.value | (decoded_wr_data[17:17] & decoded_wr_biten[17:17]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal14_trig.next = next_c;
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal14_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal14_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal14_trig.load_next) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal14_trig.value <= field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal14_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal13_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal13_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal13_trig.value | (decoded_wr_data[18:18] & decoded_wr_biten[18:18]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal13_trig.next = next_c;
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal13_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal13_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal13_trig.load_next) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal13_trig.value <= field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal13_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal12_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal12_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal12_trig.value | (decoded_wr_data[19:19] & decoded_wr_biten[19:19]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal12_trig.next = next_c;
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal12_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal12_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal12_trig.load_next) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal12_trig.value <= field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal12_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal11_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal11_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal11_trig.value | (decoded_wr_data[20:20] & decoded_wr_biten[20:20]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal11_trig.next = next_c;
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal11_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal11_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal11_trig.load_next) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal11_trig.value <= field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal11_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal10_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal10_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal10_trig.value | (decoded_wr_data[21:21] & decoded_wr_biten[21:21]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal10_trig.next = next_c;
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal10_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal10_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal10_trig.load_next) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal10_trig.value <= field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal10_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal9_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal9_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal9_trig.value | (decoded_wr_data[22:22] & decoded_wr_biten[22:22]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal9_trig.next = next_c;
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal9_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal9_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal9_trig.load_next) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal9_trig.value <= field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal9_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal8_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal8_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal8_trig.value | (decoded_wr_data[23:23] & decoded_wr_biten[23:23]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal8_trig.next = next_c;
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal8_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal8_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal8_trig.load_next) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal8_trig.value <= field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal8_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal7_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal7_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal7_trig.value | (decoded_wr_data[24:24] & decoded_wr_biten[24:24]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal7_trig.next = next_c;
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal7_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal7_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal7_trig.load_next) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal7_trig.value <= field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal7_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal6_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal6_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal6_trig.value | (decoded_wr_data[25:25] & decoded_wr_biten[25:25]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal6_trig.next = next_c;
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal6_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal6_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal6_trig.load_next) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal6_trig.value <= field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal6_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal5_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal5_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal5_trig.value | (decoded_wr_data[26:26] & decoded_wr_biten[26:26]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal5_trig.next = next_c;
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal5_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal5_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal5_trig.load_next) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal5_trig.value <= field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal5_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal4_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal4_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal4_trig.value | (decoded_wr_data[27:27] & decoded_wr_biten[27:27]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal4_trig.next = next_c;
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal4_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal4_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal4_trig.load_next) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal4_trig.value <= field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal4_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal3_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal3_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal3_trig.value | (decoded_wr_data[28:28] & decoded_wr_biten[28:28]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal3_trig.next = next_c;
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal3_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal3_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal3_trig.load_next) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal3_trig.value <= field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal3_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal2_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal2_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal2_trig.value | (decoded_wr_data[29:29] & decoded_wr_biten[29:29]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal2_trig.next = next_c;
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal2_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal2_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal2_trig.load_next) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal2_trig.value <= field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal2_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal1_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal1_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal1_trig.value | (decoded_wr_data[30:30] & decoded_wr_biten[30:30]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal1_trig.next = next_c;
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal1_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal1_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal1_trig.load_next) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal1_trig.value <= field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal1_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal0_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal0_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal0_trig.value | (decoded_wr_data[31:31] & decoded_wr_biten[31:31]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal0_trig.next = next_c;
        field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal0_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal0_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal0_trig.load_next) begin
            field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal0_trig.value <= field_combo.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal0_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif0_intr_trig_r.notif_mcu_sram_ecc_cor_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif0_intr_trig_r.notif_mcu_sram_ecc_cor_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif0_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif0_intr_trig_r.notif_mcu_sram_ecc_cor_trig.value | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif0_intr_trig_r.notif_mcu_sram_ecc_cor_trig.next = next_c;
        field_combo.intr_block_rf.notif0_intr_trig_r.notif_mcu_sram_ecc_cor_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif0_intr_trig_r.notif_mcu_sram_ecc_cor_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif0_intr_trig_r.notif_mcu_sram_ecc_cor_trig.load_next) begin
            field_storage.intr_block_rf.notif0_intr_trig_r.notif_mcu_sram_ecc_cor_trig.value <= field_combo.intr_block_rf.notif0_intr_trig_r.notif_mcu_sram_ecc_cor_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif0_intr_trig_r.notif_clpra_mcu_reset_req_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif0_intr_trig_r.notif_clpra_mcu_reset_req_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif0_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif0_intr_trig_r.notif_clpra_mcu_reset_req_trig.value | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif0_intr_trig_r.notif_clpra_mcu_reset_req_trig.next = next_c;
        field_combo.intr_block_rf.notif0_intr_trig_r.notif_clpra_mcu_reset_req_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif0_intr_trig_r.notif_clpra_mcu_reset_req_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif0_intr_trig_r.notif_clpra_mcu_reset_req_trig.load_next) begin
            field_storage.intr_block_rf.notif0_intr_trig_r.notif_clpra_mcu_reset_req_trig.value <= field_combo.intr_block_rf.notif0_intr_trig_r.notif_clpra_mcu_reset_req_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal31_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal31_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal31_trig.value | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal31_trig.next = next_c;
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal31_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal31_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal31_trig.load_next) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal31_trig.value <= field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal31_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal30_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal30_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal30_trig.value | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal30_trig.next = next_c;
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal30_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal30_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal30_trig.load_next) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal30_trig.value <= field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal30_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal29_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal29_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal29_trig.value | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal29_trig.next = next_c;
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal29_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal29_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal29_trig.load_next) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal29_trig.value <= field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal29_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal28_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal28_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal28_trig.value | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal28_trig.next = next_c;
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal28_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal28_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal28_trig.load_next) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal28_trig.value <= field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal28_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal27_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal27_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal27_trig.value | (decoded_wr_data[4:4] & decoded_wr_biten[4:4]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal27_trig.next = next_c;
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal27_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal27_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal27_trig.load_next) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal27_trig.value <= field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal27_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal26_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal26_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal26_trig.value | (decoded_wr_data[5:5] & decoded_wr_biten[5:5]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal26_trig.next = next_c;
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal26_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal26_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal26_trig.load_next) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal26_trig.value <= field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal26_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal25_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal25_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal25_trig.value | (decoded_wr_data[6:6] & decoded_wr_biten[6:6]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal25_trig.next = next_c;
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal25_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal25_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal25_trig.load_next) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal25_trig.value <= field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal25_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal24_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal24_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal24_trig.value | (decoded_wr_data[7:7] & decoded_wr_biten[7:7]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal24_trig.next = next_c;
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal24_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal24_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal24_trig.load_next) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal24_trig.value <= field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal24_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal23_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal23_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal23_trig.value | (decoded_wr_data[8:8] & decoded_wr_biten[8:8]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal23_trig.next = next_c;
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal23_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal23_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal23_trig.load_next) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal23_trig.value <= field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal23_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal22_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal22_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal22_trig.value | (decoded_wr_data[9:9] & decoded_wr_biten[9:9]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal22_trig.next = next_c;
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal22_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal22_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal22_trig.load_next) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal22_trig.value <= field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal22_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal21_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal21_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal21_trig.value | (decoded_wr_data[10:10] & decoded_wr_biten[10:10]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal21_trig.next = next_c;
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal21_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal21_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal21_trig.load_next) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal21_trig.value <= field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal21_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal20_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal20_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal20_trig.value | (decoded_wr_data[11:11] & decoded_wr_biten[11:11]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal20_trig.next = next_c;
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal20_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal20_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal20_trig.load_next) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal20_trig.value <= field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal20_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal19_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal19_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal19_trig.value | (decoded_wr_data[12:12] & decoded_wr_biten[12:12]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal19_trig.next = next_c;
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal19_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal19_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal19_trig.load_next) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal19_trig.value <= field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal19_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal18_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal18_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal18_trig.value | (decoded_wr_data[13:13] & decoded_wr_biten[13:13]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal18_trig.next = next_c;
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal18_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal18_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal18_trig.load_next) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal18_trig.value <= field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal18_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal17_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal17_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal17_trig.value | (decoded_wr_data[14:14] & decoded_wr_biten[14:14]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal17_trig.next = next_c;
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal17_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal17_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal17_trig.load_next) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal17_trig.value <= field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal17_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal16_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal16_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal16_trig.value | (decoded_wr_data[15:15] & decoded_wr_biten[15:15]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal16_trig.next = next_c;
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal16_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal16_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal16_trig.load_next) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal16_trig.value <= field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal16_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal15_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal15_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal15_trig.value | (decoded_wr_data[16:16] & decoded_wr_biten[16:16]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal15_trig.next = next_c;
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal15_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal15_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal15_trig.load_next) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal15_trig.value <= field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal15_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal14_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal14_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal14_trig.value | (decoded_wr_data[17:17] & decoded_wr_biten[17:17]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal14_trig.next = next_c;
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal14_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal14_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal14_trig.load_next) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal14_trig.value <= field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal14_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal13_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal13_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal13_trig.value | (decoded_wr_data[18:18] & decoded_wr_biten[18:18]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal13_trig.next = next_c;
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal13_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal13_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal13_trig.load_next) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal13_trig.value <= field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal13_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal12_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal12_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal12_trig.value | (decoded_wr_data[19:19] & decoded_wr_biten[19:19]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal12_trig.next = next_c;
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal12_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal12_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal12_trig.load_next) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal12_trig.value <= field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal12_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal11_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal11_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal11_trig.value | (decoded_wr_data[20:20] & decoded_wr_biten[20:20]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal11_trig.next = next_c;
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal11_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal11_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal11_trig.load_next) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal11_trig.value <= field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal11_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal10_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal10_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal10_trig.value | (decoded_wr_data[21:21] & decoded_wr_biten[21:21]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal10_trig.next = next_c;
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal10_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal10_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal10_trig.load_next) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal10_trig.value <= field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal10_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal9_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal9_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal9_trig.value | (decoded_wr_data[22:22] & decoded_wr_biten[22:22]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal9_trig.next = next_c;
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal9_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal9_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal9_trig.load_next) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal9_trig.value <= field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal9_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal8_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal8_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal8_trig.value | (decoded_wr_data[23:23] & decoded_wr_biten[23:23]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal8_trig.next = next_c;
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal8_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal8_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal8_trig.load_next) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal8_trig.value <= field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal8_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal7_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal7_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal7_trig.value | (decoded_wr_data[24:24] & decoded_wr_biten[24:24]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal7_trig.next = next_c;
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal7_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal7_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal7_trig.load_next) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal7_trig.value <= field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal7_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal6_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal6_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal6_trig.value | (decoded_wr_data[25:25] & decoded_wr_biten[25:25]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal6_trig.next = next_c;
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal6_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal6_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal6_trig.load_next) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal6_trig.value <= field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal6_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal5_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal5_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal5_trig.value | (decoded_wr_data[26:26] & decoded_wr_biten[26:26]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal5_trig.next = next_c;
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal5_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal5_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal5_trig.load_next) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal5_trig.value <= field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal5_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal4_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal4_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal4_trig.value | (decoded_wr_data[27:27] & decoded_wr_biten[27:27]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal4_trig.next = next_c;
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal4_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal4_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal4_trig.load_next) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal4_trig.value <= field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal4_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal3_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal3_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal3_trig.value | (decoded_wr_data[28:28] & decoded_wr_biten[28:28]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal3_trig.next = next_c;
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal3_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal3_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal3_trig.load_next) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal3_trig.value <= field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal3_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal2_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal2_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal2_trig.value | (decoded_wr_data[29:29] & decoded_wr_biten[29:29]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal2_trig.next = next_c;
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal2_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal2_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal2_trig.load_next) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal2_trig.value <= field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal2_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal1_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal1_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal1_trig.value | (decoded_wr_data[30:30] & decoded_wr_biten[30:30]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal1_trig.next = next_c;
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal1_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal1_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal1_trig.load_next) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal1_trig.value <= field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal1_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal0_trig
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal0_trig.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal0_trig.value | (decoded_wr_data[31:31] & decoded_wr_biten[31:31]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal0_trig.next = next_c;
        field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal0_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal0_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal0_trig.load_next) begin
            field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal0_trig.value <= field_combo.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal0_trig.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_wdt_timer1_timeout_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error_wdt_timer1_timeout_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_wdt_timer1_timeout_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error_wdt_timer1_timeout_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_wdt_timer1_timeout_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_wdt_timer1_timeout_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_wdt_timer1_timeout_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_wdt_timer1_timeout_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_wdt_timer1_timeout_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_wdt_timer1_timeout_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error_wdt_timer1_timeout_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_wdt_timer1_timeout_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_wdt_timer1_timeout_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_wdt_timer1_timeout_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_wdt_timer2_timeout_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error_wdt_timer2_timeout_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_wdt_timer2_timeout_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error_wdt_timer2_timeout_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_wdt_timer2_timeout_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_wdt_timer2_timeout_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_wdt_timer2_timeout_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_wdt_timer2_timeout_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_wdt_timer2_timeout_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_wdt_timer2_timeout_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error_wdt_timer2_timeout_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_wdt_timer2_timeout_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_wdt_timer2_timeout_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_wdt_timer2_timeout_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal0_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal0_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_agg_error_fatal0_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error_agg_error_fatal0_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal0_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal0_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal0_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_agg_error_fatal0_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_agg_error_fatal0_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal0_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal0_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error_agg_error_fatal0_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal0_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal0_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_agg_error_fatal0_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal1_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal1_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_agg_error_fatal1_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error_agg_error_fatal1_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal1_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal1_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal1_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_agg_error_fatal1_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_agg_error_fatal1_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal1_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal1_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error_agg_error_fatal1_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal1_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal1_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_agg_error_fatal1_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal2_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal2_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_agg_error_fatal2_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error_agg_error_fatal2_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal2_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal2_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal2_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_agg_error_fatal2_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_agg_error_fatal2_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal2_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal2_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error_agg_error_fatal2_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal2_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal2_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_agg_error_fatal2_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal3_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal3_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_agg_error_fatal3_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error_agg_error_fatal3_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal3_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal3_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal3_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_agg_error_fatal3_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_agg_error_fatal3_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal3_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal3_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error_agg_error_fatal3_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal3_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal3_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_agg_error_fatal3_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal4_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal4_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_agg_error_fatal4_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error_agg_error_fatal4_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal4_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal4_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal4_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_agg_error_fatal4_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_agg_error_fatal4_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal4_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal4_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error_agg_error_fatal4_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal4_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal4_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_agg_error_fatal4_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal5_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal5_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_agg_error_fatal5_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error_agg_error_fatal5_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal5_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal5_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal5_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_agg_error_fatal5_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_agg_error_fatal5_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal5_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal5_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error_agg_error_fatal5_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal5_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal5_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_agg_error_fatal5_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal6_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal6_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_agg_error_fatal6_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error_agg_error_fatal6_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal6_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal6_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal6_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_agg_error_fatal6_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_agg_error_fatal6_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal6_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal6_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error_agg_error_fatal6_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal6_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal6_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_agg_error_fatal6_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal7_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal7_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_agg_error_fatal7_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error_agg_error_fatal7_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal7_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal7_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal7_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_agg_error_fatal7_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_agg_error_fatal7_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal7_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal7_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error_agg_error_fatal7_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal7_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal7_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_agg_error_fatal7_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal8_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal8_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_agg_error_fatal8_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error_agg_error_fatal8_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal8_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal8_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal8_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_agg_error_fatal8_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_agg_error_fatal8_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal8_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal8_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error_agg_error_fatal8_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal8_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal8_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_agg_error_fatal8_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal9_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal9_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_agg_error_fatal9_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error_agg_error_fatal9_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal9_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal9_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal9_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_agg_error_fatal9_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_agg_error_fatal9_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal9_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal9_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error_agg_error_fatal9_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal9_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal9_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_agg_error_fatal9_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal10_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal10_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_agg_error_fatal10_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error_agg_error_fatal10_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal10_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal10_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal10_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_agg_error_fatal10_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_agg_error_fatal10_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal10_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal10_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error_agg_error_fatal10_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal10_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal10_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_agg_error_fatal10_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal11_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal11_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_agg_error_fatal11_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error_agg_error_fatal11_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal11_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal11_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal11_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_agg_error_fatal11_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_agg_error_fatal11_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal11_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal11_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error_agg_error_fatal11_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal11_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal11_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_agg_error_fatal11_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal12_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal12_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_agg_error_fatal12_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error_agg_error_fatal12_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal12_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal12_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal12_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_agg_error_fatal12_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_agg_error_fatal12_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal12_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal12_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error_agg_error_fatal12_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal12_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal12_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_agg_error_fatal12_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal13_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal13_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_agg_error_fatal13_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error_agg_error_fatal13_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal13_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal13_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal13_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_agg_error_fatal13_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_agg_error_fatal13_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal13_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal13_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error_agg_error_fatal13_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal13_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal13_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_agg_error_fatal13_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal14_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal14_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_agg_error_fatal14_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error_agg_error_fatal14_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal14_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal14_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal14_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_agg_error_fatal14_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_agg_error_fatal14_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal14_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal14_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error_agg_error_fatal14_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal14_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal14_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_agg_error_fatal14_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal15_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal15_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_agg_error_fatal15_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error_agg_error_fatal15_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal15_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal15_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal15_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_agg_error_fatal15_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_agg_error_fatal15_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal15_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal15_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error_agg_error_fatal15_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal15_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal15_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_agg_error_fatal15_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal16_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal16_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_agg_error_fatal16_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error_agg_error_fatal16_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal16_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal16_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal16_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_agg_error_fatal16_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_agg_error_fatal16_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal16_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal16_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error_agg_error_fatal16_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal16_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal16_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_agg_error_fatal16_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal17_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal17_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_agg_error_fatal17_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error_agg_error_fatal17_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal17_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal17_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal17_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_agg_error_fatal17_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_agg_error_fatal17_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal17_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal17_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error_agg_error_fatal17_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal17_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal17_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_agg_error_fatal17_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal18_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal18_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_agg_error_fatal18_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error_agg_error_fatal18_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal18_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal18_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal18_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_agg_error_fatal18_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_agg_error_fatal18_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal18_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal18_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error_agg_error_fatal18_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal18_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal18_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_agg_error_fatal18_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal19_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal19_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_agg_error_fatal19_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error_agg_error_fatal19_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal19_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal19_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal19_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_agg_error_fatal19_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_agg_error_fatal19_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal19_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal19_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error_agg_error_fatal19_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal19_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal19_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_agg_error_fatal19_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal20_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal20_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_agg_error_fatal20_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error_agg_error_fatal20_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal20_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal20_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal20_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_agg_error_fatal20_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_agg_error_fatal20_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal20_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal20_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error_agg_error_fatal20_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal20_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal20_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_agg_error_fatal20_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal21_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal21_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_agg_error_fatal21_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error_agg_error_fatal21_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal21_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal21_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal21_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_agg_error_fatal21_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_agg_error_fatal21_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal21_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal21_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error_agg_error_fatal21_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal21_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal21_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_agg_error_fatal21_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal22_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal22_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_agg_error_fatal22_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error_agg_error_fatal22_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal22_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal22_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal22_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_agg_error_fatal22_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_agg_error_fatal22_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal22_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal22_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error_agg_error_fatal22_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal22_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal22_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_agg_error_fatal22_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal23_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal23_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_agg_error_fatal23_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error_agg_error_fatal23_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal23_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal23_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal23_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_agg_error_fatal23_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_agg_error_fatal23_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal23_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal23_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error_agg_error_fatal23_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal23_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal23_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_agg_error_fatal23_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal24_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal24_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_agg_error_fatal24_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error_agg_error_fatal24_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal24_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal24_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal24_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_agg_error_fatal24_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_agg_error_fatal24_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal24_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal24_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error_agg_error_fatal24_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal24_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal24_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_agg_error_fatal24_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal25_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal25_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_agg_error_fatal25_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error_agg_error_fatal25_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal25_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal25_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal25_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_agg_error_fatal25_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_agg_error_fatal25_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal25_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal25_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error_agg_error_fatal25_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal25_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal25_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_agg_error_fatal25_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal26_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal26_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_agg_error_fatal26_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error_agg_error_fatal26_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal26_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal26_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal26_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_agg_error_fatal26_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_agg_error_fatal26_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal26_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal26_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error_agg_error_fatal26_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal26_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal26_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_agg_error_fatal26_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal27_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal27_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_agg_error_fatal27_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error_agg_error_fatal27_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal27_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal27_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal27_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_agg_error_fatal27_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_agg_error_fatal27_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal27_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal27_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error_agg_error_fatal27_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal27_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal27_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_agg_error_fatal27_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal28_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal28_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_agg_error_fatal28_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error_agg_error_fatal28_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal28_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal28_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal28_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_agg_error_fatal28_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_agg_error_fatal28_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal28_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal28_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error_agg_error_fatal28_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal28_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal28_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_agg_error_fatal28_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal29_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal29_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_agg_error_fatal29_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error_agg_error_fatal29_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal29_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal29_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal29_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_agg_error_fatal29_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_agg_error_fatal29_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal29_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal29_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error_agg_error_fatal29_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal29_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal29_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_agg_error_fatal29_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal30_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal30_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_agg_error_fatal30_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error_agg_error_fatal30_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal30_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal30_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal30_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_agg_error_fatal30_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_agg_error_fatal30_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal30_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal30_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error_agg_error_fatal30_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal30_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal30_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_agg_error_fatal30_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal31_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal31_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_agg_error_fatal31_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.error_agg_error_fatal31_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal31_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal31_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal31_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_agg_error_fatal31_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_agg_error_fatal31_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_agg_error_fatal31_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal31_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_pwrgood) begin
        if(~hwif_in.mci_pwrgood) begin
            field_storage.intr_block_rf.error_agg_error_fatal31_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal31_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal31_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_agg_error_fatal31_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_clpra_mcu_reset_req_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.notif_clpra_mcu_reset_req_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_clpra_mcu_reset_req_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_clpra_mcu_reset_req_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_clpra_mcu_reset_req_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_clpra_mcu_reset_req_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_clpra_mcu_reset_req_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.notif_clpra_mcu_reset_req_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_clpra_mcu_reset_req_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_clpra_mcu_reset_req_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_clpra_mcu_reset_req_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_clpra_mcu_reset_req_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.notif_clpra_mcu_reset_req_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_clpra_mcu_reset_req_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_clpra_mcu_reset_req_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal0_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal0_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal0_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_agg_error_non_fatal0_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal0_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal0_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal0_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.notif_agg_error_non_fatal0_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_agg_error_non_fatal0_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal0_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal0_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal0_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal0_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal0_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal0_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal1_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal1_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal1_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_agg_error_non_fatal1_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal1_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal1_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal1_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.notif_agg_error_non_fatal1_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_agg_error_non_fatal1_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal1_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal1_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal1_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal1_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal1_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal1_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal2_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal2_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal2_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_agg_error_non_fatal2_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal2_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal2_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal2_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.notif_agg_error_non_fatal2_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_agg_error_non_fatal2_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal2_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal2_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal2_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal2_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal2_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal2_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal3_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal3_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal3_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_agg_error_non_fatal3_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal3_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal3_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal3_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.notif_agg_error_non_fatal3_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_agg_error_non_fatal3_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal3_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal3_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal3_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal3_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal3_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal3_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal4_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal4_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal4_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_agg_error_non_fatal4_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal4_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal4_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal4_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.notif_agg_error_non_fatal4_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_agg_error_non_fatal4_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal4_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal4_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal4_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal4_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal4_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal4_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal5_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal5_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal5_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_agg_error_non_fatal5_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal5_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal5_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal5_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.notif_agg_error_non_fatal5_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_agg_error_non_fatal5_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal5_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal5_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal5_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal5_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal5_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal5_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal6_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal6_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal6_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_agg_error_non_fatal6_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal6_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal6_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal6_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.notif_agg_error_non_fatal6_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_agg_error_non_fatal6_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal6_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal6_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal6_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal6_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal6_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal6_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal7_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal7_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal7_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_agg_error_non_fatal7_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal7_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal7_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal7_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.notif_agg_error_non_fatal7_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_agg_error_non_fatal7_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal7_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal7_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal7_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal7_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal7_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal7_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal8_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal8_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal8_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_agg_error_non_fatal8_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal8_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal8_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal8_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.notif_agg_error_non_fatal8_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_agg_error_non_fatal8_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal8_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal8_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal8_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal8_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal8_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal8_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal9_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal9_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal9_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_agg_error_non_fatal9_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal9_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal9_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal9_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.notif_agg_error_non_fatal9_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_agg_error_non_fatal9_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal9_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal9_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal9_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal9_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal9_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal9_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal10_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal10_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal10_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_agg_error_non_fatal10_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal10_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal10_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal10_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.notif_agg_error_non_fatal10_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_agg_error_non_fatal10_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal10_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal10_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal10_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal10_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal10_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal10_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal11_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal11_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal11_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_agg_error_non_fatal11_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal11_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal11_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal11_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.notif_agg_error_non_fatal11_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_agg_error_non_fatal11_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal11_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal11_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal11_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal11_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal11_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal11_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal12_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal12_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal12_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_agg_error_non_fatal12_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal12_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal12_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal12_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.notif_agg_error_non_fatal12_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_agg_error_non_fatal12_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal12_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal12_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal12_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal12_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal12_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal12_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal13_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal13_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal13_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_agg_error_non_fatal13_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal13_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal13_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal13_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.notif_agg_error_non_fatal13_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_agg_error_non_fatal13_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal13_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal13_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal13_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal13_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal13_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal13_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal14_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal14_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal14_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_agg_error_non_fatal14_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal14_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal14_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal14_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.notif_agg_error_non_fatal14_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_agg_error_non_fatal14_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal14_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal14_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal14_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal14_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal14_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal14_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal15_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal15_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal15_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_agg_error_non_fatal15_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal15_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal15_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal15_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.notif_agg_error_non_fatal15_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_agg_error_non_fatal15_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal15_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal15_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal15_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal15_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal15_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal15_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal16_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal16_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal16_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_agg_error_non_fatal16_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal16_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal16_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal16_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.notif_agg_error_non_fatal16_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_agg_error_non_fatal16_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal16_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal16_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal16_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal16_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal16_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal16_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal17_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal17_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal17_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_agg_error_non_fatal17_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal17_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal17_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal17_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.notif_agg_error_non_fatal17_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_agg_error_non_fatal17_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal17_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal17_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal17_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal17_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal17_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal17_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal18_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal18_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal18_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_agg_error_non_fatal18_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal18_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal18_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal18_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.notif_agg_error_non_fatal18_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_agg_error_non_fatal18_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal18_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal18_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal18_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal18_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal18_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal18_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal19_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal19_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal19_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_agg_error_non_fatal19_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal19_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal19_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal19_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.notif_agg_error_non_fatal19_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_agg_error_non_fatal19_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal19_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal19_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal19_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal19_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal19_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal19_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal20_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal20_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal20_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_agg_error_non_fatal20_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal20_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal20_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal20_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.notif_agg_error_non_fatal20_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_agg_error_non_fatal20_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal20_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal20_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal20_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal20_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal20_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal20_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal21_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal21_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal21_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_agg_error_non_fatal21_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal21_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal21_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal21_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.notif_agg_error_non_fatal21_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_agg_error_non_fatal21_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal21_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal21_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal21_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal21_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal21_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal21_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal22_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal22_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal22_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_agg_error_non_fatal22_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal22_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal22_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal22_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.notif_agg_error_non_fatal22_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_agg_error_non_fatal22_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal22_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal22_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal22_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal22_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal22_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal22_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal23_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal23_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal23_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_agg_error_non_fatal23_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal23_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal23_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal23_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.notif_agg_error_non_fatal23_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_agg_error_non_fatal23_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal23_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal23_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal23_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal23_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal23_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal23_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal24_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal24_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal24_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_agg_error_non_fatal24_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal24_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal24_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal24_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.notif_agg_error_non_fatal24_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_agg_error_non_fatal24_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal24_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal24_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal24_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal24_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal24_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal24_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal25_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal25_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal25_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_agg_error_non_fatal25_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal25_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal25_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal25_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.notif_agg_error_non_fatal25_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_agg_error_non_fatal25_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal25_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal25_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal25_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal25_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal25_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal25_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal26_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal26_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal26_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_agg_error_non_fatal26_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal26_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal26_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal26_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.notif_agg_error_non_fatal26_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_agg_error_non_fatal26_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal26_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal26_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal26_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal26_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal26_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal26_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal27_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal27_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal27_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_agg_error_non_fatal27_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal27_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal27_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal27_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.notif_agg_error_non_fatal27_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_agg_error_non_fatal27_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal27_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal27_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal27_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal27_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal27_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal27_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal28_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal28_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal28_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_agg_error_non_fatal28_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal28_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal28_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal28_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.notif_agg_error_non_fatal28_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_agg_error_non_fatal28_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal28_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal28_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal28_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal28_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal28_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal28_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal29_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal29_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal29_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_agg_error_non_fatal29_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal29_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal29_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal29_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.notif_agg_error_non_fatal29_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_agg_error_non_fatal29_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal29_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal29_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal29_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal29_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal29_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal29_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal30_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal30_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal30_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_agg_error_non_fatal30_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal30_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal30_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal30_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.notif_agg_error_non_fatal30_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_agg_error_non_fatal30_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal30_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal30_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal30_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal30_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal30_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal30_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal31_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal31_intr_count_r.cnt.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal31_intr_count_r && decoded_req_is_wr && hwif_in.mcu_req) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_agg_error_non_fatal31_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal31_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal31_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal31_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.notif_agg_error_non_fatal31_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_agg_error_non_fatal31_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal31_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal31_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal31_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal31_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal31_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal31_intr_count_r.cnt.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error0_intr_trig_r.error_wdt_timer1_timeout_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error0_intr_trig_r.error_wdt_timer1_timeout_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error0_internal_intr_r.error_wdt_timer1_timeout_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error0_intr_trig_r.error_wdt_timer2_timeout_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error0_intr_trig_r.error_wdt_timer2_timeout_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error0_internal_intr_r.error_wdt_timer2_timeout_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal0_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal0_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal0_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal0_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal0_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal0_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_agg_error_fatal0_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_agg_error_fatal0_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_agg_error_fatal0_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal0_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_agg_error_fatal0_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal0_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error_agg_error_fatal0_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal0_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal0_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_agg_error_fatal0_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal1_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal1_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal1_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal1_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal1_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal1_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_agg_error_fatal1_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_agg_error_fatal1_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_agg_error_fatal1_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal1_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_agg_error_fatal1_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal1_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error_agg_error_fatal1_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal1_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal1_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_agg_error_fatal1_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal2_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal2_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal2_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal2_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal2_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal2_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_agg_error_fatal2_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_agg_error_fatal2_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_agg_error_fatal2_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal2_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_agg_error_fatal2_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal2_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error_agg_error_fatal2_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal2_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal2_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_agg_error_fatal2_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal3_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal3_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal3_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal3_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal3_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal3_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_agg_error_fatal3_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_agg_error_fatal3_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_agg_error_fatal3_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal3_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_agg_error_fatal3_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal3_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error_agg_error_fatal3_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal3_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal3_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_agg_error_fatal3_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal4_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal4_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal4_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal4_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal4_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal4_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_agg_error_fatal4_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_agg_error_fatal4_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_agg_error_fatal4_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal4_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_agg_error_fatal4_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal4_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error_agg_error_fatal4_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal4_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal4_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_agg_error_fatal4_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal5_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal5_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal5_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal5_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal5_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal5_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_agg_error_fatal5_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_agg_error_fatal5_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_agg_error_fatal5_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal5_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_agg_error_fatal5_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal5_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error_agg_error_fatal5_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal5_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal5_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_agg_error_fatal5_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal6_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal6_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal6_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal6_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal6_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal6_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_agg_error_fatal6_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_agg_error_fatal6_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_agg_error_fatal6_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal6_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_agg_error_fatal6_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal6_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error_agg_error_fatal6_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal6_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal6_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_agg_error_fatal6_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal7_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal7_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal7_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal7_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal7_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal7_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_agg_error_fatal7_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_agg_error_fatal7_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_agg_error_fatal7_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal7_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_agg_error_fatal7_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal7_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error_agg_error_fatal7_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal7_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal7_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_agg_error_fatal7_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal8_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal8_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal8_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal8_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal8_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal8_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_agg_error_fatal8_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_agg_error_fatal8_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_agg_error_fatal8_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal8_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_agg_error_fatal8_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal8_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error_agg_error_fatal8_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal8_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal8_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_agg_error_fatal8_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal9_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal9_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal9_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal9_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal9_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal9_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_agg_error_fatal9_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_agg_error_fatal9_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_agg_error_fatal9_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal9_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_agg_error_fatal9_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal9_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error_agg_error_fatal9_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal9_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal9_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_agg_error_fatal9_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal10_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal10_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal10_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal10_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal10_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal10_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_agg_error_fatal10_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_agg_error_fatal10_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_agg_error_fatal10_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal10_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_agg_error_fatal10_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal10_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error_agg_error_fatal10_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal10_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal10_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_agg_error_fatal10_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal11_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal11_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal11_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal11_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal11_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal11_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_agg_error_fatal11_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_agg_error_fatal11_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_agg_error_fatal11_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal11_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_agg_error_fatal11_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal11_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error_agg_error_fatal11_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal11_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal11_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_agg_error_fatal11_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal12_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal12_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal12_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal12_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal12_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal12_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_agg_error_fatal12_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_agg_error_fatal12_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_agg_error_fatal12_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal12_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_agg_error_fatal12_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal12_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error_agg_error_fatal12_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal12_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal12_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_agg_error_fatal12_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal13_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal13_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal13_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal13_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal13_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal13_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_agg_error_fatal13_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_agg_error_fatal13_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_agg_error_fatal13_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal13_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_agg_error_fatal13_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal13_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error_agg_error_fatal13_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal13_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal13_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_agg_error_fatal13_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal14_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal14_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal14_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal14_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal14_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal14_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_agg_error_fatal14_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_agg_error_fatal14_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_agg_error_fatal14_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal14_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_agg_error_fatal14_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal14_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error_agg_error_fatal14_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal14_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal14_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_agg_error_fatal14_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal15_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal15_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal15_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal15_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal15_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal15_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_agg_error_fatal15_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_agg_error_fatal15_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_agg_error_fatal15_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal15_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_agg_error_fatal15_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal15_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error_agg_error_fatal15_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal15_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal15_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_agg_error_fatal15_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal16_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal16_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal16_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal16_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal16_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal16_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_agg_error_fatal16_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_agg_error_fatal16_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_agg_error_fatal16_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal16_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_agg_error_fatal16_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal16_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error_agg_error_fatal16_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal16_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal16_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_agg_error_fatal16_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal17_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal17_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal17_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal17_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal17_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal17_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_agg_error_fatal17_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_agg_error_fatal17_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_agg_error_fatal17_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal17_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_agg_error_fatal17_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal17_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error_agg_error_fatal17_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal17_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal17_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_agg_error_fatal17_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal18_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal18_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal18_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal18_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal18_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal18_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_agg_error_fatal18_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_agg_error_fatal18_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_agg_error_fatal18_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal18_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_agg_error_fatal18_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal18_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error_agg_error_fatal18_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal18_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal18_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_agg_error_fatal18_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal19_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal19_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal19_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal19_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal19_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal19_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_agg_error_fatal19_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_agg_error_fatal19_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_agg_error_fatal19_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal19_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_agg_error_fatal19_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal19_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error_agg_error_fatal19_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal19_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal19_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_agg_error_fatal19_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal20_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal20_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal20_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal20_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal20_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal20_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_agg_error_fatal20_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_agg_error_fatal20_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_agg_error_fatal20_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal20_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_agg_error_fatal20_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal20_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error_agg_error_fatal20_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal20_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal20_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_agg_error_fatal20_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal21_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal21_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal21_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal21_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal21_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal21_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_agg_error_fatal21_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_agg_error_fatal21_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_agg_error_fatal21_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal21_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_agg_error_fatal21_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal21_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error_agg_error_fatal21_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal21_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal21_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_agg_error_fatal21_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal22_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal22_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal22_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal22_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal22_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal22_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_agg_error_fatal22_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_agg_error_fatal22_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_agg_error_fatal22_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal22_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_agg_error_fatal22_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal22_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error_agg_error_fatal22_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal22_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal22_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_agg_error_fatal22_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal23_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal23_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal23_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal23_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal23_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal23_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_agg_error_fatal23_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_agg_error_fatal23_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_agg_error_fatal23_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal23_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_agg_error_fatal23_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal23_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error_agg_error_fatal23_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal23_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal23_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_agg_error_fatal23_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal24_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal24_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal24_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal24_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal24_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal24_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_agg_error_fatal24_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_agg_error_fatal24_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_agg_error_fatal24_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal24_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_agg_error_fatal24_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal24_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error_agg_error_fatal24_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal24_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal24_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_agg_error_fatal24_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal25_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal25_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal25_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal25_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal25_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal25_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_agg_error_fatal25_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_agg_error_fatal25_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_agg_error_fatal25_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal25_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_agg_error_fatal25_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal25_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error_agg_error_fatal25_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal25_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal25_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_agg_error_fatal25_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal26_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal26_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal26_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal26_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal26_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal26_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_agg_error_fatal26_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_agg_error_fatal26_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_agg_error_fatal26_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal26_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_agg_error_fatal26_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal26_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error_agg_error_fatal26_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal26_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal26_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_agg_error_fatal26_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal27_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal27_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal27_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal27_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal27_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal27_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_agg_error_fatal27_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_agg_error_fatal27_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_agg_error_fatal27_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal27_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_agg_error_fatal27_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal27_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error_agg_error_fatal27_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal27_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal27_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_agg_error_fatal27_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal28_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal28_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal28_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal28_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal28_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal28_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_agg_error_fatal28_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_agg_error_fatal28_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_agg_error_fatal28_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal28_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_agg_error_fatal28_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal28_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error_agg_error_fatal28_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal28_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal28_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_agg_error_fatal28_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal29_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal29_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal29_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal29_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal29_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal29_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_agg_error_fatal29_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_agg_error_fatal29_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_agg_error_fatal29_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal29_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_agg_error_fatal29_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal29_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error_agg_error_fatal29_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal29_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal29_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_agg_error_fatal29_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal30_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal30_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal30_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal30_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal30_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal30_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_agg_error_fatal30_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_agg_error_fatal30_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_agg_error_fatal30_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal30_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_agg_error_fatal30_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal30_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error_agg_error_fatal30_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal30_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal30_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_agg_error_fatal30_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.error_agg_error_fatal31_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.error_agg_error_fatal31_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal31_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal31_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal31_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_agg_error_fatal31_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_agg_error_fatal31_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_agg_error_fatal31_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_agg_error_fatal31_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_agg_error_fatal31_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_agg_error_fatal31_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_agg_error_fatal31_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.error_agg_error_fatal31_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_agg_error_fatal31_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_agg_error_fatal31_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_agg_error_fatal31_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif0_intr_trig_r.notif_mcu_sram_ecc_cor_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif0_intr_trig_r.notif_mcu_sram_ecc_cor_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif0_internal_intr_r.notif_mcu_sram_ecc_cor_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_clpra_mcu_reset_req_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_clpra_mcu_reset_req_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif0_intr_trig_r.notif_clpra_mcu_reset_req_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif0_intr_trig_r.notif_clpra_mcu_reset_req_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif0_internal_intr_r.notif_clpra_mcu_reset_req_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_clpra_mcu_reset_req_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_clpra_mcu_reset_req_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_clpra_mcu_reset_req_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_clpra_mcu_reset_req_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_clpra_mcu_reset_req_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.notif_clpra_mcu_reset_req_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_clpra_mcu_reset_req_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_clpra_mcu_reset_req_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_clpra_mcu_reset_req_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_clpra_mcu_reset_req_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_clpra_mcu_reset_req_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal0_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal0_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal0_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal0_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal0_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal0_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_agg_error_non_fatal0_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_agg_error_non_fatal0_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal0_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal0_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.notif_agg_error_non_fatal0_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal0_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal0_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal0_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal0_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal0_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal1_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal1_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal1_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal1_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal1_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal1_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_agg_error_non_fatal1_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_agg_error_non_fatal1_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal1_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal1_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.notif_agg_error_non_fatal1_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal1_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal1_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal1_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal1_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal1_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal2_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal2_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal2_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal2_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal2_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal2_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_agg_error_non_fatal2_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_agg_error_non_fatal2_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal2_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal2_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.notif_agg_error_non_fatal2_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal2_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal2_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal2_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal2_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal2_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal3_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal3_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal3_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal3_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal3_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal3_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_agg_error_non_fatal3_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_agg_error_non_fatal3_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal3_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal3_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.notif_agg_error_non_fatal3_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal3_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal3_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal3_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal3_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal3_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal4_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal4_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal4_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal4_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal4_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal4_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_agg_error_non_fatal4_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_agg_error_non_fatal4_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal4_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal4_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.notif_agg_error_non_fatal4_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal4_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal4_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal4_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal4_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal4_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal5_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal5_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal5_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal5_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal5_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal5_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_agg_error_non_fatal5_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_agg_error_non_fatal5_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal5_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal5_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.notif_agg_error_non_fatal5_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal5_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal5_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal5_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal5_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal5_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal6_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal6_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal6_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal6_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal6_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal6_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_agg_error_non_fatal6_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_agg_error_non_fatal6_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal6_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal6_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.notif_agg_error_non_fatal6_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal6_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal6_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal6_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal6_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal6_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal7_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal7_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal7_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal7_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal7_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal7_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_agg_error_non_fatal7_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_agg_error_non_fatal7_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal7_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal7_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.notif_agg_error_non_fatal7_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal7_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal7_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal7_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal7_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal7_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal8_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal8_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal8_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal8_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal8_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal8_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_agg_error_non_fatal8_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_agg_error_non_fatal8_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal8_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal8_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.notif_agg_error_non_fatal8_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal8_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal8_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal8_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal8_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal8_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal9_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal9_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal9_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal9_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal9_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal9_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_agg_error_non_fatal9_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_agg_error_non_fatal9_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal9_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal9_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.notif_agg_error_non_fatal9_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal9_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal9_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal9_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal9_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal9_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal10_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal10_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal10_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal10_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal10_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal10_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_agg_error_non_fatal10_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_agg_error_non_fatal10_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal10_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal10_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.notif_agg_error_non_fatal10_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal10_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal10_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal10_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal10_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal10_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal11_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal11_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal11_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal11_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal11_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal11_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_agg_error_non_fatal11_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_agg_error_non_fatal11_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal11_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal11_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.notif_agg_error_non_fatal11_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal11_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal11_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal11_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal11_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal11_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal12_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal12_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal12_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal12_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal12_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal12_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_agg_error_non_fatal12_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_agg_error_non_fatal12_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal12_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal12_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.notif_agg_error_non_fatal12_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal12_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal12_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal12_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal12_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal12_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal13_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal13_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal13_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal13_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal13_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal13_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_agg_error_non_fatal13_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_agg_error_non_fatal13_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal13_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal13_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.notif_agg_error_non_fatal13_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal13_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal13_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal13_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal13_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal13_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal14_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal14_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal14_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal14_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal14_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal14_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_agg_error_non_fatal14_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_agg_error_non_fatal14_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal14_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal14_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.notif_agg_error_non_fatal14_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal14_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal14_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal14_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal14_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal14_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal15_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal15_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal15_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal15_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal15_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal15_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_agg_error_non_fatal15_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_agg_error_non_fatal15_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal15_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal15_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.notif_agg_error_non_fatal15_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal15_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal15_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal15_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal15_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal15_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal16_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal16_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal16_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal16_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal16_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal16_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_agg_error_non_fatal16_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_agg_error_non_fatal16_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal16_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal16_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.notif_agg_error_non_fatal16_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal16_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal16_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal16_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal16_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal16_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal17_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal17_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal17_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal17_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal17_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal17_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_agg_error_non_fatal17_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_agg_error_non_fatal17_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal17_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal17_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.notif_agg_error_non_fatal17_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal17_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal17_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal17_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal17_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal17_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal18_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal18_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal18_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal18_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal18_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal18_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_agg_error_non_fatal18_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_agg_error_non_fatal18_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal18_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal18_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.notif_agg_error_non_fatal18_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal18_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal18_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal18_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal18_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal18_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal19_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal19_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal19_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal19_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal19_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal19_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_agg_error_non_fatal19_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_agg_error_non_fatal19_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal19_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal19_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.notif_agg_error_non_fatal19_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal19_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal19_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal19_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal19_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal19_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal20_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal20_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal20_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal20_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal20_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal20_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_agg_error_non_fatal20_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_agg_error_non_fatal20_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal20_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal20_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.notif_agg_error_non_fatal20_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal20_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal20_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal20_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal20_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal20_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal21_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal21_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal21_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal21_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal21_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal21_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_agg_error_non_fatal21_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_agg_error_non_fatal21_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal21_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal21_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.notif_agg_error_non_fatal21_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal21_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal21_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal21_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal21_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal21_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal22_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal22_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal22_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal22_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal22_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal22_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_agg_error_non_fatal22_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_agg_error_non_fatal22_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal22_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal22_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.notif_agg_error_non_fatal22_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal22_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal22_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal22_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal22_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal22_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal23_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal23_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal23_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal23_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal23_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal23_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_agg_error_non_fatal23_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_agg_error_non_fatal23_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal23_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal23_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.notif_agg_error_non_fatal23_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal23_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal23_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal23_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal23_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal23_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal24_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal24_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal24_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal24_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal24_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal24_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_agg_error_non_fatal24_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_agg_error_non_fatal24_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal24_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal24_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.notif_agg_error_non_fatal24_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal24_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal24_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal24_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal24_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal24_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal25_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal25_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal25_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal25_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal25_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal25_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_agg_error_non_fatal25_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_agg_error_non_fatal25_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal25_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal25_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.notif_agg_error_non_fatal25_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal25_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal25_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal25_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal25_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal25_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal26_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal26_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal26_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal26_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal26_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal26_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_agg_error_non_fatal26_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_agg_error_non_fatal26_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal26_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal26_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.notif_agg_error_non_fatal26_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal26_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal26_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal26_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal26_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal26_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal27_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal27_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal27_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal27_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal27_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal27_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_agg_error_non_fatal27_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_agg_error_non_fatal27_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal27_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal27_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.notif_agg_error_non_fatal27_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal27_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal27_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal27_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal27_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal27_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal28_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal28_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal28_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal28_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal28_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal28_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_agg_error_non_fatal28_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_agg_error_non_fatal28_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal28_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal28_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.notif_agg_error_non_fatal28_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal28_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal28_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal28_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal28_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal28_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal29_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal29_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal29_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal29_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal29_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal29_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_agg_error_non_fatal29_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_agg_error_non_fatal29_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal29_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal29_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.notif_agg_error_non_fatal29_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal29_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal29_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal29_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal29_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal29_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal30_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal30_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal30_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal30_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal30_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal30_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_agg_error_non_fatal30_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_agg_error_non_fatal30_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal30_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal30_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.notif_agg_error_non_fatal30_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal30_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal30_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal30_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal30_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal30_intr_count_incr_r.pulse.next;
        end
    end
    // Field: mci_reg.intr_block_rf.notif_agg_error_non_fatal31_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c = field_storage.intr_block_rf.notif_agg_error_non_fatal31_intr_count_incr_r.pulse.value;
        automatic logic load_next_c = '0;
        if(field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal31_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal31_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal31_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_agg_error_non_fatal31_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_agg_error_non_fatal31_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_agg_error_non_fatal31_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_agg_error_non_fatal31_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_agg_error_non_fatal31_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.notif_agg_error_non_fatal31_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_agg_error_non_fatal31_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.mci_rst_b) begin
        if(~hwif_in.mci_rst_b) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal31_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_agg_error_non_fatal31_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_agg_error_non_fatal31_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_agg_error_non_fatal31_intr_count_incr_r.pulse.next;
        end
    end

    //--------------------------------------------------------------------------
    // Write response
    //--------------------------------------------------------------------------
    assign cpuif_wr_ack = decoded_req & decoded_req_is_wr;
    // Writes are always granted with no error response
    assign cpuif_wr_err = '0;

    //--------------------------------------------------------------------------
    // Readback
    //--------------------------------------------------------------------------

    logic readback_err;
    logic readback_done;
    logic [31:0] readback_data;
    
    // Assign readback values to a flattened array
    logic [630-1:0][31:0] readback_array;
    assign readback_array[0][3:0] = (decoded_reg_strb.CAPABILITIES && !decoded_req_is_wr) ? hwif_in.CAPABILITIES.NUM_MBOX.next : '0;
    assign readback_array[0][31:4] = '0;
    assign readback_array[1][15:0] = (decoded_reg_strb.HW_REV_ID && !decoded_req_is_wr) ? 'h1000 : '0;
    assign readback_array[1][31:16] = (decoded_reg_strb.HW_REV_ID && !decoded_req_is_wr) ? hwif_in.HW_REV_ID.SOC_STEPPING_ID.next : '0;
    for(genvar i0=0; i0<2; i0++) begin
        assign readback_array[i0*1 + 2][31:0] = (decoded_reg_strb.FW_REV_ID[i0] && !decoded_req_is_wr) ? field_storage.FW_REV_ID[i0].REV_ID.value : '0;
    end
    assign readback_array[4][0:0] = (decoded_reg_strb.HW_CONFIG && !decoded_req_is_wr) ? hwif_in.HW_CONFIG.RSVD_en.next : '0;
    assign readback_array[4][31:1] = '0;
    assign readback_array[5][31:0] = (decoded_reg_strb.BOOT_STATUS && !decoded_req_is_wr) ? field_storage.BOOT_STATUS.status.value : '0;
    assign readback_array[6][23:0] = (decoded_reg_strb.FLOW_STATUS && !decoded_req_is_wr) ? field_storage.FLOW_STATUS.status.value : '0;
    assign readback_array[6][26:24] = (decoded_reg_strb.FLOW_STATUS && !decoded_req_is_wr) ? 'h0 : '0;
    assign readback_array[6][31:27] = (decoded_reg_strb.FLOW_STATUS && !decoded_req_is_wr) ? hwif_in.FLOW_STATUS.boot_fsm_ps.next : '0;
    assign readback_array[7][0:0] = (decoded_reg_strb.RESET_REASON && !decoded_req_is_wr) ? field_storage.RESET_REASON.FW_HITLESS_UPD_RESET.value : '0;
    assign readback_array[7][1:1] = (decoded_reg_strb.RESET_REASON && !decoded_req_is_wr) ? field_storage.RESET_REASON.FW_BOOT_UPD_RESET.value : '0;
    assign readback_array[7][2:2] = (decoded_reg_strb.RESET_REASON && !decoded_req_is_wr) ? field_storage.RESET_REASON.WARM_RESET.value : '0;
    assign readback_array[7][31:3] = '0;
    assign readback_array[8][21:0] = (decoded_reg_strb.RESET_STATUS && !decoded_req_is_wr) ? field_storage.RESET_STATUS.status.value : '0;
    assign readback_array[8][24:22] = (decoded_reg_strb.RESET_STATUS && !decoded_req_is_wr) ? 'h0 : '0;
    assign readback_array[8][31:25] = '0;
    assign readback_array[9][0:0] = (decoded_reg_strb.HW_ERROR_FATAL && !decoded_req_is_wr) ? field_storage.HW_ERROR_FATAL.mcu_sram_ecc_unc.value : '0;
    assign readback_array[9][1:1] = (decoded_reg_strb.HW_ERROR_FATAL && !decoded_req_is_wr) ? field_storage.HW_ERROR_FATAL.nmi_pin.value : '0;
    assign readback_array[9][31:2] = '0;
    assign readback_array[10][0:0] = (decoded_reg_strb.AGG_ERROR_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_FATAL.agg_error_fatal31.value : '0;
    assign readback_array[10][1:1] = (decoded_reg_strb.AGG_ERROR_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_FATAL.agg_error_fatal30.value : '0;
    assign readback_array[10][2:2] = (decoded_reg_strb.AGG_ERROR_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_FATAL.agg_error_fatal29.value : '0;
    assign readback_array[10][3:3] = (decoded_reg_strb.AGG_ERROR_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_FATAL.agg_error_fatal28.value : '0;
    assign readback_array[10][4:4] = (decoded_reg_strb.AGG_ERROR_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_FATAL.agg_error_fatal27.value : '0;
    assign readback_array[10][5:5] = (decoded_reg_strb.AGG_ERROR_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_FATAL.agg_error_fatal26.value : '0;
    assign readback_array[10][6:6] = (decoded_reg_strb.AGG_ERROR_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_FATAL.agg_error_fatal25.value : '0;
    assign readback_array[10][7:7] = (decoded_reg_strb.AGG_ERROR_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_FATAL.agg_error_fatal24.value : '0;
    assign readback_array[10][8:8] = (decoded_reg_strb.AGG_ERROR_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_FATAL.agg_error_fatal23.value : '0;
    assign readback_array[10][9:9] = (decoded_reg_strb.AGG_ERROR_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_FATAL.agg_error_fatal22.value : '0;
    assign readback_array[10][10:10] = (decoded_reg_strb.AGG_ERROR_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_FATAL.agg_error_fatal21.value : '0;
    assign readback_array[10][11:11] = (decoded_reg_strb.AGG_ERROR_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_FATAL.agg_error_fatal20.value : '0;
    assign readback_array[10][12:12] = (decoded_reg_strb.AGG_ERROR_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_FATAL.agg_error_fatal19.value : '0;
    assign readback_array[10][13:13] = (decoded_reg_strb.AGG_ERROR_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_FATAL.agg_error_fatal18.value : '0;
    assign readback_array[10][14:14] = (decoded_reg_strb.AGG_ERROR_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_FATAL.agg_error_fatal17.value : '0;
    assign readback_array[10][15:15] = (decoded_reg_strb.AGG_ERROR_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_FATAL.agg_error_fatal16.value : '0;
    assign readback_array[10][16:16] = (decoded_reg_strb.AGG_ERROR_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_FATAL.agg_error_fatal15.value : '0;
    assign readback_array[10][17:17] = (decoded_reg_strb.AGG_ERROR_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_FATAL.agg_error_fatal14.value : '0;
    assign readback_array[10][18:18] = (decoded_reg_strb.AGG_ERROR_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_FATAL.agg_error_fatal13.value : '0;
    assign readback_array[10][19:19] = (decoded_reg_strb.AGG_ERROR_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_FATAL.agg_error_fatal12.value : '0;
    assign readback_array[10][20:20] = (decoded_reg_strb.AGG_ERROR_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_FATAL.agg_error_fatal11.value : '0;
    assign readback_array[10][21:21] = (decoded_reg_strb.AGG_ERROR_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_FATAL.agg_error_fatal10.value : '0;
    assign readback_array[10][22:22] = (decoded_reg_strb.AGG_ERROR_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_FATAL.agg_error_fatal9.value : '0;
    assign readback_array[10][23:23] = (decoded_reg_strb.AGG_ERROR_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_FATAL.agg_error_fatal8.value : '0;
    assign readback_array[10][24:24] = (decoded_reg_strb.AGG_ERROR_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_FATAL.agg_error_fatal7.value : '0;
    assign readback_array[10][25:25] = (decoded_reg_strb.AGG_ERROR_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_FATAL.agg_error_fatal6.value : '0;
    assign readback_array[10][26:26] = (decoded_reg_strb.AGG_ERROR_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_FATAL.agg_error_fatal5.value : '0;
    assign readback_array[10][27:27] = (decoded_reg_strb.AGG_ERROR_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_FATAL.agg_error_fatal4.value : '0;
    assign readback_array[10][28:28] = (decoded_reg_strb.AGG_ERROR_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_FATAL.agg_error_fatal3.value : '0;
    assign readback_array[10][29:29] = (decoded_reg_strb.AGG_ERROR_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_FATAL.agg_error_fatal2.value : '0;
    assign readback_array[10][30:30] = (decoded_reg_strb.AGG_ERROR_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_FATAL.agg_error_fatal1.value : '0;
    assign readback_array[10][31:31] = (decoded_reg_strb.AGG_ERROR_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_FATAL.agg_error_fatal0.value : '0;
    assign readback_array[11][0:0] = (decoded_reg_strb.HW_ERROR_NON_FATAL && !decoded_req_is_wr) ? field_storage.HW_ERROR_NON_FATAL.RSVD.value : '0;
    assign readback_array[11][31:1] = '0;
    assign readback_array[12][0:0] = (decoded_reg_strb.AGG_ERROR_NON_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal31.value : '0;
    assign readback_array[12][1:1] = (decoded_reg_strb.AGG_ERROR_NON_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal30.value : '0;
    assign readback_array[12][2:2] = (decoded_reg_strb.AGG_ERROR_NON_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal29.value : '0;
    assign readback_array[12][3:3] = (decoded_reg_strb.AGG_ERROR_NON_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal28.value : '0;
    assign readback_array[12][4:4] = (decoded_reg_strb.AGG_ERROR_NON_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal27.value : '0;
    assign readback_array[12][5:5] = (decoded_reg_strb.AGG_ERROR_NON_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal26.value : '0;
    assign readback_array[12][6:6] = (decoded_reg_strb.AGG_ERROR_NON_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal25.value : '0;
    assign readback_array[12][7:7] = (decoded_reg_strb.AGG_ERROR_NON_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal24.value : '0;
    assign readback_array[12][8:8] = (decoded_reg_strb.AGG_ERROR_NON_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal23.value : '0;
    assign readback_array[12][9:9] = (decoded_reg_strb.AGG_ERROR_NON_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal22.value : '0;
    assign readback_array[12][10:10] = (decoded_reg_strb.AGG_ERROR_NON_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal21.value : '0;
    assign readback_array[12][11:11] = (decoded_reg_strb.AGG_ERROR_NON_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal20.value : '0;
    assign readback_array[12][12:12] = (decoded_reg_strb.AGG_ERROR_NON_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal19.value : '0;
    assign readback_array[12][13:13] = (decoded_reg_strb.AGG_ERROR_NON_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal18.value : '0;
    assign readback_array[12][14:14] = (decoded_reg_strb.AGG_ERROR_NON_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal17.value : '0;
    assign readback_array[12][15:15] = (decoded_reg_strb.AGG_ERROR_NON_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal16.value : '0;
    assign readback_array[12][16:16] = (decoded_reg_strb.AGG_ERROR_NON_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal15.value : '0;
    assign readback_array[12][17:17] = (decoded_reg_strb.AGG_ERROR_NON_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal14.value : '0;
    assign readback_array[12][18:18] = (decoded_reg_strb.AGG_ERROR_NON_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal13.value : '0;
    assign readback_array[12][19:19] = (decoded_reg_strb.AGG_ERROR_NON_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal12.value : '0;
    assign readback_array[12][20:20] = (decoded_reg_strb.AGG_ERROR_NON_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal11.value : '0;
    assign readback_array[12][21:21] = (decoded_reg_strb.AGG_ERROR_NON_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal10.value : '0;
    assign readback_array[12][22:22] = (decoded_reg_strb.AGG_ERROR_NON_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal9.value : '0;
    assign readback_array[12][23:23] = (decoded_reg_strb.AGG_ERROR_NON_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal8.value : '0;
    assign readback_array[12][24:24] = (decoded_reg_strb.AGG_ERROR_NON_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal7.value : '0;
    assign readback_array[12][25:25] = (decoded_reg_strb.AGG_ERROR_NON_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal6.value : '0;
    assign readback_array[12][26:26] = (decoded_reg_strb.AGG_ERROR_NON_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal5.value : '0;
    assign readback_array[12][27:27] = (decoded_reg_strb.AGG_ERROR_NON_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal4.value : '0;
    assign readback_array[12][28:28] = (decoded_reg_strb.AGG_ERROR_NON_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal3.value : '0;
    assign readback_array[12][29:29] = (decoded_reg_strb.AGG_ERROR_NON_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal2.value : '0;
    assign readback_array[12][30:30] = (decoded_reg_strb.AGG_ERROR_NON_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal1.value : '0;
    assign readback_array[12][31:31] = (decoded_reg_strb.AGG_ERROR_NON_FATAL && !decoded_req_is_wr) ? field_storage.AGG_ERROR_NON_FATAL.agg_error_non_fatal0.value : '0;
    assign readback_array[13][31:0] = (decoded_reg_strb.FW_ERROR_FATAL && !decoded_req_is_wr) ? field_storage.FW_ERROR_FATAL.error_code.value : '0;
    assign readback_array[14][31:0] = (decoded_reg_strb.FW_ERROR_NON_FATAL && !decoded_req_is_wr) ? field_storage.FW_ERROR_NON_FATAL.error_code.value : '0;
    assign readback_array[15][31:0] = (decoded_reg_strb.HW_ERROR_ENC && !decoded_req_is_wr) ? field_storage.HW_ERROR_ENC.error_code.value : '0;
    assign readback_array[16][31:0] = (decoded_reg_strb.FW_ERROR_ENC && !decoded_req_is_wr) ? field_storage.FW_ERROR_ENC.error_code.value : '0;
    for(genvar i0=0; i0<8; i0++) begin
        assign readback_array[i0*1 + 17][31:0] = (decoded_reg_strb.FW_EXTENDED_ERROR_INFO[i0] && !decoded_req_is_wr) ? field_storage.FW_EXTENDED_ERROR_INFO[i0].error_info.value : '0;
    end
    assign readback_array[25][0:0] = (decoded_reg_strb.internal_hw_error_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_hw_error_fatal_mask.mask_mcu_sram_ecc_unc.value : '0;
    assign readback_array[25][1:1] = (decoded_reg_strb.internal_hw_error_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_hw_error_fatal_mask.mask_nmi_pin.value : '0;
    assign readback_array[25][31:2] = '0;
    assign readback_array[26][0:0] = (decoded_reg_strb.internal_hw_error_non_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_hw_error_non_fatal_mask.FIXME.value : '0;
    assign readback_array[26][31:1] = '0;
    assign readback_array[27][0:0] = (decoded_reg_strb.internal_agg_error_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal31.value : '0;
    assign readback_array[27][1:1] = (decoded_reg_strb.internal_agg_error_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal30.value : '0;
    assign readback_array[27][2:2] = (decoded_reg_strb.internal_agg_error_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal29.value : '0;
    assign readback_array[27][3:3] = (decoded_reg_strb.internal_agg_error_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal28.value : '0;
    assign readback_array[27][4:4] = (decoded_reg_strb.internal_agg_error_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal27.value : '0;
    assign readback_array[27][5:5] = (decoded_reg_strb.internal_agg_error_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal26.value : '0;
    assign readback_array[27][6:6] = (decoded_reg_strb.internal_agg_error_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal25.value : '0;
    assign readback_array[27][7:7] = (decoded_reg_strb.internal_agg_error_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal24.value : '0;
    assign readback_array[27][8:8] = (decoded_reg_strb.internal_agg_error_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal23.value : '0;
    assign readback_array[27][9:9] = (decoded_reg_strb.internal_agg_error_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal22.value : '0;
    assign readback_array[27][10:10] = (decoded_reg_strb.internal_agg_error_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal21.value : '0;
    assign readback_array[27][11:11] = (decoded_reg_strb.internal_agg_error_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal20.value : '0;
    assign readback_array[27][12:12] = (decoded_reg_strb.internal_agg_error_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal19.value : '0;
    assign readback_array[27][13:13] = (decoded_reg_strb.internal_agg_error_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal18.value : '0;
    assign readback_array[27][14:14] = (decoded_reg_strb.internal_agg_error_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal17.value : '0;
    assign readback_array[27][15:15] = (decoded_reg_strb.internal_agg_error_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal16.value : '0;
    assign readback_array[27][16:16] = (decoded_reg_strb.internal_agg_error_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal15.value : '0;
    assign readback_array[27][17:17] = (decoded_reg_strb.internal_agg_error_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal14.value : '0;
    assign readback_array[27][18:18] = (decoded_reg_strb.internal_agg_error_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal13.value : '0;
    assign readback_array[27][19:19] = (decoded_reg_strb.internal_agg_error_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal12.value : '0;
    assign readback_array[27][20:20] = (decoded_reg_strb.internal_agg_error_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal11.value : '0;
    assign readback_array[27][21:21] = (decoded_reg_strb.internal_agg_error_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal10.value : '0;
    assign readback_array[27][22:22] = (decoded_reg_strb.internal_agg_error_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal9.value : '0;
    assign readback_array[27][23:23] = (decoded_reg_strb.internal_agg_error_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal8.value : '0;
    assign readback_array[27][24:24] = (decoded_reg_strb.internal_agg_error_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal7.value : '0;
    assign readback_array[27][25:25] = (decoded_reg_strb.internal_agg_error_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal6.value : '0;
    assign readback_array[27][26:26] = (decoded_reg_strb.internal_agg_error_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal5.value : '0;
    assign readback_array[27][27:27] = (decoded_reg_strb.internal_agg_error_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal4.value : '0;
    assign readback_array[27][28:28] = (decoded_reg_strb.internal_agg_error_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal3.value : '0;
    assign readback_array[27][29:29] = (decoded_reg_strb.internal_agg_error_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal2.value : '0;
    assign readback_array[27][30:30] = (decoded_reg_strb.internal_agg_error_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal1.value : '0;
    assign readback_array[27][31:31] = (decoded_reg_strb.internal_agg_error_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_fatal_mask.mask_agg_error_fatal0.value : '0;
    assign readback_array[28][0:0] = (decoded_reg_strb.internal_agg_error_non_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal31.value : '0;
    assign readback_array[28][1:1] = (decoded_reg_strb.internal_agg_error_non_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal30.value : '0;
    assign readback_array[28][2:2] = (decoded_reg_strb.internal_agg_error_non_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal29.value : '0;
    assign readback_array[28][3:3] = (decoded_reg_strb.internal_agg_error_non_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal28.value : '0;
    assign readback_array[28][4:4] = (decoded_reg_strb.internal_agg_error_non_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal27.value : '0;
    assign readback_array[28][5:5] = (decoded_reg_strb.internal_agg_error_non_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal26.value : '0;
    assign readback_array[28][6:6] = (decoded_reg_strb.internal_agg_error_non_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal25.value : '0;
    assign readback_array[28][7:7] = (decoded_reg_strb.internal_agg_error_non_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal24.value : '0;
    assign readback_array[28][8:8] = (decoded_reg_strb.internal_agg_error_non_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal23.value : '0;
    assign readback_array[28][9:9] = (decoded_reg_strb.internal_agg_error_non_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal22.value : '0;
    assign readback_array[28][10:10] = (decoded_reg_strb.internal_agg_error_non_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal21.value : '0;
    assign readback_array[28][11:11] = (decoded_reg_strb.internal_agg_error_non_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal20.value : '0;
    assign readback_array[28][12:12] = (decoded_reg_strb.internal_agg_error_non_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal19.value : '0;
    assign readback_array[28][13:13] = (decoded_reg_strb.internal_agg_error_non_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal18.value : '0;
    assign readback_array[28][14:14] = (decoded_reg_strb.internal_agg_error_non_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal17.value : '0;
    assign readback_array[28][15:15] = (decoded_reg_strb.internal_agg_error_non_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal16.value : '0;
    assign readback_array[28][16:16] = (decoded_reg_strb.internal_agg_error_non_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal15.value : '0;
    assign readback_array[28][17:17] = (decoded_reg_strb.internal_agg_error_non_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal14.value : '0;
    assign readback_array[28][18:18] = (decoded_reg_strb.internal_agg_error_non_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal13.value : '0;
    assign readback_array[28][19:19] = (decoded_reg_strb.internal_agg_error_non_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal12.value : '0;
    assign readback_array[28][20:20] = (decoded_reg_strb.internal_agg_error_non_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal11.value : '0;
    assign readback_array[28][21:21] = (decoded_reg_strb.internal_agg_error_non_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal10.value : '0;
    assign readback_array[28][22:22] = (decoded_reg_strb.internal_agg_error_non_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal9.value : '0;
    assign readback_array[28][23:23] = (decoded_reg_strb.internal_agg_error_non_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal8.value : '0;
    assign readback_array[28][24:24] = (decoded_reg_strb.internal_agg_error_non_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal7.value : '0;
    assign readback_array[28][25:25] = (decoded_reg_strb.internal_agg_error_non_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal6.value : '0;
    assign readback_array[28][26:26] = (decoded_reg_strb.internal_agg_error_non_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal5.value : '0;
    assign readback_array[28][27:27] = (decoded_reg_strb.internal_agg_error_non_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal4.value : '0;
    assign readback_array[28][28:28] = (decoded_reg_strb.internal_agg_error_non_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal3.value : '0;
    assign readback_array[28][29:29] = (decoded_reg_strb.internal_agg_error_non_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal2.value : '0;
    assign readback_array[28][30:30] = (decoded_reg_strb.internal_agg_error_non_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal1.value : '0;
    assign readback_array[28][31:31] = (decoded_reg_strb.internal_agg_error_non_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_agg_error_non_fatal_mask.mask_agg_error_non_fatal0.value : '0;
    assign readback_array[29][31:0] = (decoded_reg_strb.internal_fw_error_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_fw_error_fatal_mask.mask.value : '0;
    assign readback_array[30][31:0] = (decoded_reg_strb.internal_fw_error_non_fatal_mask && !decoded_req_is_wr) ? field_storage.internal_fw_error_non_fatal_mask.mask.value : '0;
    assign readback_array[31][0:0] = (decoded_reg_strb.WDT_TIMER1_EN && !decoded_req_is_wr) ? field_storage.WDT_TIMER1_EN.timer1_en.value : '0;
    assign readback_array[31][31:1] = '0;
    assign readback_array[32][0:0] = (decoded_reg_strb.WDT_TIMER1_CTRL && !decoded_req_is_wr) ? field_storage.WDT_TIMER1_CTRL.timer1_restart.value : '0;
    assign readback_array[32][31:1] = '0;
    for(genvar i0=0; i0<2; i0++) begin
        assign readback_array[i0*1 + 33][31:0] = (decoded_reg_strb.WDT_TIMER1_TIMEOUT_PERIOD[i0] && !decoded_req_is_wr) ? field_storage.WDT_TIMER1_TIMEOUT_PERIOD[i0].timer1_timeout_period.value : '0;
    end
    assign readback_array[35][0:0] = (decoded_reg_strb.WDT_TIMER2_EN && !decoded_req_is_wr) ? field_storage.WDT_TIMER2_EN.timer2_en.value : '0;
    assign readback_array[35][31:1] = '0;
    assign readback_array[36][0:0] = (decoded_reg_strb.WDT_TIMER2_CTRL && !decoded_req_is_wr) ? field_storage.WDT_TIMER2_CTRL.timer2_restart.value : '0;
    assign readback_array[36][31:1] = '0;
    for(genvar i0=0; i0<2; i0++) begin
        assign readback_array[i0*1 + 37][31:0] = (decoded_reg_strb.WDT_TIMER2_TIMEOUT_PERIOD[i0] && !decoded_req_is_wr) ? field_storage.WDT_TIMER2_TIMEOUT_PERIOD[i0].timer2_timeout_period.value : '0;
    end
    assign readback_array[39][0:0] = (decoded_reg_strb.WDT_STATUS && !decoded_req_is_wr) ? field_storage.WDT_STATUS.t1_timeout.value : '0;
    assign readback_array[39][1:1] = (decoded_reg_strb.WDT_STATUS && !decoded_req_is_wr) ? field_storage.WDT_STATUS.t2_timeout.value : '0;
    assign readback_array[39][31:2] = '0;
    for(genvar i0=0; i0<2; i0++) begin
        assign readback_array[i0*1 + 40][31:0] = (decoded_reg_strb.WDT_CFG[i0] && !decoded_req_is_wr) ? field_storage.WDT_CFG[i0].TIMEOUT.value : '0;
    end
    assign readback_array[42][31:0] = (decoded_reg_strb.MCU_TIMER_CONFIG && !decoded_req_is_wr) ? field_storage.MCU_TIMER_CONFIG.clk_period.value : '0;
    assign readback_array[43][31:0] = (decoded_reg_strb.MCU_RV_MTIME_L && !decoded_req_is_wr) ? field_storage.MCU_RV_MTIME_L.count_l.value : '0;
    assign readback_array[44][31:0] = (decoded_reg_strb.MCU_RV_MTIME_H && !decoded_req_is_wr) ? field_storage.MCU_RV_MTIME_H.count_h.value : '0;
    assign readback_array[45][31:0] = (decoded_reg_strb.MCU_RV_MTIMECMP_L && !decoded_req_is_wr) ? field_storage.MCU_RV_MTIMECMP_L.compare_l.value : '0;
    assign readback_array[46][31:0] = (decoded_reg_strb.MCU_RV_MTIMECMP_H && !decoded_req_is_wr) ? field_storage.MCU_RV_MTIMECMP_H.compare_h.value : '0;
    assign readback_array[47][0:0] = (decoded_reg_strb.RESET_REQUEST && !decoded_req_is_wr) ? field_storage.RESET_REQUEST.mcu_req.value : '0;
    assign readback_array[47][31:1] = '0;
    assign readback_array[48][0:0] = (decoded_reg_strb.CALIPTRA_BOOT_GO && !decoded_req_is_wr) ? field_storage.CALIPTRA_BOOT_GO.go.value : '0;
    assign readback_array[48][31:1] = '0;
    assign readback_array[49][15:0] = (decoded_reg_strb.FW_SRAM_EXEC_REGION_SIZE && !decoded_req_is_wr) ? field_storage.FW_SRAM_EXEC_REGION_SIZE.size.value : '0;
    assign readback_array[49][31:16] = '0;
    assign readback_array[50][31:0] = (decoded_reg_strb.MCU_NMI_VECTOR && !decoded_req_is_wr) ? field_storage.MCU_NMI_VECTOR.vec.value : '0;
    assign readback_array[51][31:0] = (decoded_reg_strb.MCU_RESET_VECTOR && !decoded_req_is_wr) ? field_storage.MCU_RESET_VECTOR.vec.value : '0;
    for(genvar i0=0; i0<5; i0++) begin
        assign readback_array[i0*1 + 52][31:0] = (decoded_reg_strb.MBOX0_VALID_AXI_ID[i0] && !decoded_req_is_wr) ? field_storage.MBOX0_VALID_AXI_ID[i0].id.value : '0;
    end
    for(genvar i0=0; i0<5; i0++) begin
        assign readback_array[i0*1 + 57][0:0] = (decoded_reg_strb.MBOX0_VALID_AXI_ID_LOCK[i0] && !decoded_req_is_wr) ? field_storage.MBOX0_VALID_AXI_ID_LOCK[i0].lock.value : '0;
        assign readback_array[i0*1 + 57][31:1] = '0;
    end
    for(genvar i0=0; i0<5; i0++) begin
        assign readback_array[i0*1 + 62][31:0] = (decoded_reg_strb.MBOX1_VALID_AXI_ID[i0] && !decoded_req_is_wr) ? field_storage.MBOX1_VALID_AXI_ID[i0].id.value : '0;
    end
    for(genvar i0=0; i0<5; i0++) begin
        assign readback_array[i0*1 + 67][0:0] = (decoded_reg_strb.MBOX1_VALID_AXI_ID_LOCK[i0] && !decoded_req_is_wr) ? field_storage.MBOX1_VALID_AXI_ID_LOCK[i0].lock.value : '0;
        assign readback_array[i0*1 + 67][31:1] = '0;
    end
    for(genvar i0=0; i0<2; i0++) begin
        assign readback_array[i0*1 + 72][31:0] = (decoded_reg_strb.GENERIC_INPUT_WIRES[i0] && !decoded_req_is_wr) ? hwif_in.GENERIC_INPUT_WIRES[i0].wires.next : '0;
    end
    for(genvar i0=0; i0<2; i0++) begin
        assign readback_array[i0*1 + 74][31:0] = (decoded_reg_strb.GENERIC_OUTPUT_WIRES[i0] && !decoded_req_is_wr) ? field_storage.GENERIC_OUTPUT_WIRES[i0].wires.value : '0;
    end
    assign readback_array[76][0:0] = (decoded_reg_strb.DEBUG_IN && !decoded_req_is_wr) ? field_storage.DEBUG_IN.FIXME.value : '0;
    assign readback_array[76][31:1] = '0;
    assign readback_array[77][0:0] = (decoded_reg_strb.DEBUG_OUT && !decoded_req_is_wr) ? field_storage.DEBUG_OUT.FIXME.value : '0;
    assign readback_array[77][31:1] = '0;
    assign readback_array[78][0:0] = (decoded_reg_strb.FUSE_WR_DONE && !decoded_req_is_wr) ? field_storage.FUSE_WR_DONE.done.value : '0;
    assign readback_array[78][31:1] = '0;
    for(genvar i0=0; i0<8; i0++) begin
        for(genvar i1=0; i1<12; i1++) begin
            assign readback_array[i0*12 + i1*1 + 79][31:0] = (decoded_reg_strb.PROD_DEBUG_UNLOCK_PK_HASH_REG[i0][i1] && !decoded_req_is_wr) ? field_storage.PROD_DEBUG_UNLOCK_PK_HASH_REG[i0][i1].hash.value : '0;
        end
    end
    for(genvar i0=0; i0<10; i0++) begin
        assign readback_array[i0*1 + 175][0:0] = (decoded_reg_strb.STICKY_DATA_VAULT_CTRL[i0] && !decoded_req_is_wr) ? field_storage.STICKY_DATA_VAULT_CTRL[i0].lock_entry.value : '0;
        assign readback_array[i0*1 + 175][31:1] = '0;
    end
    for(genvar i0=0; i0<10; i0++) begin
        for(genvar i1=0; i1<12; i1++) begin
            assign readback_array[i0*12 + i1*1 + 185][0:0] = (decoded_reg_strb.STICKY_DATA_VAULT_ENTRY[i0][i1] && !decoded_req_is_wr) ? field_storage.STICKY_DATA_VAULT_ENTRY[i0][i1].lock_entry.value : '0;
            assign readback_array[i0*12 + i1*1 + 185][31:1] = '0;
        end
    end
    for(genvar i0=0; i0<10; i0++) begin
        assign readback_array[i0*1 + 305][0:0] = (decoded_reg_strb.DATA_VAULT_CTRL[i0] && !decoded_req_is_wr) ? field_storage.DATA_VAULT_CTRL[i0].lock_entry.value : '0;
        assign readback_array[i0*1 + 305][31:1] = '0;
    end
    for(genvar i0=0; i0<10; i0++) begin
        for(genvar i1=0; i1<12; i1++) begin
            assign readback_array[i0*12 + i1*1 + 315][0:0] = (decoded_reg_strb.DATA_VAULT_ENTRY[i0][i1] && !decoded_req_is_wr) ? field_storage.DATA_VAULT_ENTRY[i0][i1].lock_entry.value : '0;
            assign readback_array[i0*12 + i1*1 + 315][31:1] = '0;
        end
    end
    for(genvar i0=0; i0<8; i0++) begin
        assign readback_array[i0*1 + 435][0:0] = (decoded_reg_strb.STICKY_LOCKABLE_SCRATCH_REG_CTRL[i0] && !decoded_req_is_wr) ? field_storage.STICKY_LOCKABLE_SCRATCH_REG_CTRL[i0].lock_entry.value : '0;
        assign readback_array[i0*1 + 435][31:1] = '0;
    end
    for(genvar i0=0; i0<8; i0++) begin
        assign readback_array[i0*1 + 443][31:0] = (decoded_reg_strb.STICKY_LOCKABLE_SCRATCH_REG[i0] && !decoded_req_is_wr) ? field_storage.STICKY_LOCKABLE_SCRATCH_REG[i0].data.value : '0;
    end
    for(genvar i0=0; i0<10; i0++) begin
        assign readback_array[i0*1 + 451][0:0] = (decoded_reg_strb.LOCKABLE_SCRATCH_REG_CTRL[i0] && !decoded_req_is_wr) ? field_storage.LOCKABLE_SCRATCH_REG_CTRL[i0].lock_entry.value : '0;
        assign readback_array[i0*1 + 451][31:1] = '0;
    end
    for(genvar i0=0; i0<10; i0++) begin
        assign readback_array[i0*1 + 461][31:0] = (decoded_reg_strb.LOCKABLE_SCRATCH_REG[i0] && !decoded_req_is_wr) ? field_storage.LOCKABLE_SCRATCH_REG[i0].data.value : '0;
    end
    for(genvar i0=0; i0<8; i0++) begin
        assign readback_array[i0*1 + 471][31:0] = (decoded_reg_strb.NON_STICKY_GENERIC_SCRATCH_REG[i0] && !decoded_req_is_wr) ? field_storage.NON_STICKY_GENERIC_SCRATCH_REG[i0].data.value : '0;
    end
    assign readback_array[479][0:0] = (decoded_reg_strb.intr_block_rf.global_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.global_intr_en_r.error_en.value : '0;
    assign readback_array[479][1:1] = (decoded_reg_strb.intr_block_rf.global_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.global_intr_en_r.notif_en.value : '0;
    assign readback_array[479][31:2] = '0;
    assign readback_array[480][0:0] = (decoded_reg_strb.intr_block_rf.error0_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error0_intr_en_r.error_wdt_timer1_timeout_en.value : '0;
    assign readback_array[480][1:1] = (decoded_reg_strb.intr_block_rf.error0_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error0_intr_en_r.error_wdt_timer2_timeout_en.value : '0;
    assign readback_array[480][31:2] = '0;
    assign readback_array[481][0:0] = (decoded_reg_strb.intr_block_rf.error1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal31_en.value : '0;
    assign readback_array[481][1:1] = (decoded_reg_strb.intr_block_rf.error1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal30_en.value : '0;
    assign readback_array[481][2:2] = (decoded_reg_strb.intr_block_rf.error1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal29_en.value : '0;
    assign readback_array[481][3:3] = (decoded_reg_strb.intr_block_rf.error1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal28_en.value : '0;
    assign readback_array[481][4:4] = (decoded_reg_strb.intr_block_rf.error1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal27_en.value : '0;
    assign readback_array[481][5:5] = (decoded_reg_strb.intr_block_rf.error1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal26_en.value : '0;
    assign readback_array[481][6:6] = (decoded_reg_strb.intr_block_rf.error1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal25_en.value : '0;
    assign readback_array[481][7:7] = (decoded_reg_strb.intr_block_rf.error1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal24_en.value : '0;
    assign readback_array[481][8:8] = (decoded_reg_strb.intr_block_rf.error1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal23_en.value : '0;
    assign readback_array[481][9:9] = (decoded_reg_strb.intr_block_rf.error1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal22_en.value : '0;
    assign readback_array[481][10:10] = (decoded_reg_strb.intr_block_rf.error1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal21_en.value : '0;
    assign readback_array[481][11:11] = (decoded_reg_strb.intr_block_rf.error1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal20_en.value : '0;
    assign readback_array[481][12:12] = (decoded_reg_strb.intr_block_rf.error1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal19_en.value : '0;
    assign readback_array[481][13:13] = (decoded_reg_strb.intr_block_rf.error1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal18_en.value : '0;
    assign readback_array[481][14:14] = (decoded_reg_strb.intr_block_rf.error1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal17_en.value : '0;
    assign readback_array[481][15:15] = (decoded_reg_strb.intr_block_rf.error1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal16_en.value : '0;
    assign readback_array[481][16:16] = (decoded_reg_strb.intr_block_rf.error1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal15_en.value : '0;
    assign readback_array[481][17:17] = (decoded_reg_strb.intr_block_rf.error1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal14_en.value : '0;
    assign readback_array[481][18:18] = (decoded_reg_strb.intr_block_rf.error1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal13_en.value : '0;
    assign readback_array[481][19:19] = (decoded_reg_strb.intr_block_rf.error1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal12_en.value : '0;
    assign readback_array[481][20:20] = (decoded_reg_strb.intr_block_rf.error1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal11_en.value : '0;
    assign readback_array[481][21:21] = (decoded_reg_strb.intr_block_rf.error1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal10_en.value : '0;
    assign readback_array[481][22:22] = (decoded_reg_strb.intr_block_rf.error1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal9_en.value : '0;
    assign readback_array[481][23:23] = (decoded_reg_strb.intr_block_rf.error1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal8_en.value : '0;
    assign readback_array[481][24:24] = (decoded_reg_strb.intr_block_rf.error1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal7_en.value : '0;
    assign readback_array[481][25:25] = (decoded_reg_strb.intr_block_rf.error1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal6_en.value : '0;
    assign readback_array[481][26:26] = (decoded_reg_strb.intr_block_rf.error1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal5_en.value : '0;
    assign readback_array[481][27:27] = (decoded_reg_strb.intr_block_rf.error1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal4_en.value : '0;
    assign readback_array[481][28:28] = (decoded_reg_strb.intr_block_rf.error1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal3_en.value : '0;
    assign readback_array[481][29:29] = (decoded_reg_strb.intr_block_rf.error1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal2_en.value : '0;
    assign readback_array[481][30:30] = (decoded_reg_strb.intr_block_rf.error1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal1_en.value : '0;
    assign readback_array[481][31:31] = (decoded_reg_strb.intr_block_rf.error1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_en_r.error_agg_error_fatal0_en.value : '0;
    assign readback_array[482][0:0] = (decoded_reg_strb.intr_block_rf.notif0_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif0_intr_en_r.notif_mcu_sram_ecc_cor_en.value : '0;
    assign readback_array[482][1:1] = (decoded_reg_strb.intr_block_rf.notif0_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif0_intr_en_r.notif_clpra_mcu_reset_req_en.value : '0;
    assign readback_array[482][31:2] = '0;
    assign readback_array[483][0:0] = (decoded_reg_strb.intr_block_rf.notif1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal31_en.value : '0;
    assign readback_array[483][1:1] = (decoded_reg_strb.intr_block_rf.notif1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal30_en.value : '0;
    assign readback_array[483][2:2] = (decoded_reg_strb.intr_block_rf.notif1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal29_en.value : '0;
    assign readback_array[483][3:3] = (decoded_reg_strb.intr_block_rf.notif1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal28_en.value : '0;
    assign readback_array[483][4:4] = (decoded_reg_strb.intr_block_rf.notif1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal27_en.value : '0;
    assign readback_array[483][5:5] = (decoded_reg_strb.intr_block_rf.notif1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal26_en.value : '0;
    assign readback_array[483][6:6] = (decoded_reg_strb.intr_block_rf.notif1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal25_en.value : '0;
    assign readback_array[483][7:7] = (decoded_reg_strb.intr_block_rf.notif1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal24_en.value : '0;
    assign readback_array[483][8:8] = (decoded_reg_strb.intr_block_rf.notif1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal23_en.value : '0;
    assign readback_array[483][9:9] = (decoded_reg_strb.intr_block_rf.notif1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal22_en.value : '0;
    assign readback_array[483][10:10] = (decoded_reg_strb.intr_block_rf.notif1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal21_en.value : '0;
    assign readback_array[483][11:11] = (decoded_reg_strb.intr_block_rf.notif1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal20_en.value : '0;
    assign readback_array[483][12:12] = (decoded_reg_strb.intr_block_rf.notif1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal19_en.value : '0;
    assign readback_array[483][13:13] = (decoded_reg_strb.intr_block_rf.notif1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal18_en.value : '0;
    assign readback_array[483][14:14] = (decoded_reg_strb.intr_block_rf.notif1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal17_en.value : '0;
    assign readback_array[483][15:15] = (decoded_reg_strb.intr_block_rf.notif1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal16_en.value : '0;
    assign readback_array[483][16:16] = (decoded_reg_strb.intr_block_rf.notif1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal15_en.value : '0;
    assign readback_array[483][17:17] = (decoded_reg_strb.intr_block_rf.notif1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal14_en.value : '0;
    assign readback_array[483][18:18] = (decoded_reg_strb.intr_block_rf.notif1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal13_en.value : '0;
    assign readback_array[483][19:19] = (decoded_reg_strb.intr_block_rf.notif1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal12_en.value : '0;
    assign readback_array[483][20:20] = (decoded_reg_strb.intr_block_rf.notif1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal11_en.value : '0;
    assign readback_array[483][21:21] = (decoded_reg_strb.intr_block_rf.notif1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal10_en.value : '0;
    assign readback_array[483][22:22] = (decoded_reg_strb.intr_block_rf.notif1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal9_en.value : '0;
    assign readback_array[483][23:23] = (decoded_reg_strb.intr_block_rf.notif1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal8_en.value : '0;
    assign readback_array[483][24:24] = (decoded_reg_strb.intr_block_rf.notif1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal7_en.value : '0;
    assign readback_array[483][25:25] = (decoded_reg_strb.intr_block_rf.notif1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal6_en.value : '0;
    assign readback_array[483][26:26] = (decoded_reg_strb.intr_block_rf.notif1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal5_en.value : '0;
    assign readback_array[483][27:27] = (decoded_reg_strb.intr_block_rf.notif1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal4_en.value : '0;
    assign readback_array[483][28:28] = (decoded_reg_strb.intr_block_rf.notif1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal3_en.value : '0;
    assign readback_array[483][29:29] = (decoded_reg_strb.intr_block_rf.notif1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal2_en.value : '0;
    assign readback_array[483][30:30] = (decoded_reg_strb.intr_block_rf.notif1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal1_en.value : '0;
    assign readback_array[483][31:31] = (decoded_reg_strb.intr_block_rf.notif1_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_en_r.notif_agg_error_non_fatal0_en.value : '0;
    assign readback_array[484][0:0] = (decoded_reg_strb.intr_block_rf.error_global_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_global_intr_r.agg_sts0.value : '0;
    assign readback_array[484][1:1] = (decoded_reg_strb.intr_block_rf.error_global_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_global_intr_r.agg_sts1.value : '0;
    assign readback_array[484][31:2] = '0;
    assign readback_array[485][0:0] = (decoded_reg_strb.intr_block_rf.notif_global_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_global_intr_r.agg_sts0.value : '0;
    assign readback_array[485][1:1] = (decoded_reg_strb.intr_block_rf.notif_global_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_global_intr_r.agg_sts1.value : '0;
    assign readback_array[485][31:2] = '0;
    assign readback_array[486][0:0] = (decoded_reg_strb.intr_block_rf.error0_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error0_internal_intr_r.error_wdt_timer1_timeout_sts.value : '0;
    assign readback_array[486][1:1] = (decoded_reg_strb.intr_block_rf.error0_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error0_internal_intr_r.error_wdt_timer2_timeout_sts.value : '0;
    assign readback_array[486][31:2] = '0;
    assign readback_array[487][0:0] = (decoded_reg_strb.intr_block_rf.error1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal31_sts.value : '0;
    assign readback_array[487][1:1] = (decoded_reg_strb.intr_block_rf.error1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal30_sts.value : '0;
    assign readback_array[487][2:2] = (decoded_reg_strb.intr_block_rf.error1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal29_sts.value : '0;
    assign readback_array[487][3:3] = (decoded_reg_strb.intr_block_rf.error1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal28_sts.value : '0;
    assign readback_array[487][4:4] = (decoded_reg_strb.intr_block_rf.error1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal27_sts.value : '0;
    assign readback_array[487][5:5] = (decoded_reg_strb.intr_block_rf.error1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal26_sts.value : '0;
    assign readback_array[487][6:6] = (decoded_reg_strb.intr_block_rf.error1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal25_sts.value : '0;
    assign readback_array[487][7:7] = (decoded_reg_strb.intr_block_rf.error1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal24_sts.value : '0;
    assign readback_array[487][8:8] = (decoded_reg_strb.intr_block_rf.error1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal23_sts.value : '0;
    assign readback_array[487][9:9] = (decoded_reg_strb.intr_block_rf.error1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal22_sts.value : '0;
    assign readback_array[487][10:10] = (decoded_reg_strb.intr_block_rf.error1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal21_sts.value : '0;
    assign readback_array[487][11:11] = (decoded_reg_strb.intr_block_rf.error1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal20_sts.value : '0;
    assign readback_array[487][12:12] = (decoded_reg_strb.intr_block_rf.error1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal19_sts.value : '0;
    assign readback_array[487][13:13] = (decoded_reg_strb.intr_block_rf.error1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal18_sts.value : '0;
    assign readback_array[487][14:14] = (decoded_reg_strb.intr_block_rf.error1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal17_sts.value : '0;
    assign readback_array[487][15:15] = (decoded_reg_strb.intr_block_rf.error1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal16_sts.value : '0;
    assign readback_array[487][16:16] = (decoded_reg_strb.intr_block_rf.error1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal15_sts.value : '0;
    assign readback_array[487][17:17] = (decoded_reg_strb.intr_block_rf.error1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal14_sts.value : '0;
    assign readback_array[487][18:18] = (decoded_reg_strb.intr_block_rf.error1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal13_sts.value : '0;
    assign readback_array[487][19:19] = (decoded_reg_strb.intr_block_rf.error1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal12_sts.value : '0;
    assign readback_array[487][20:20] = (decoded_reg_strb.intr_block_rf.error1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal11_sts.value : '0;
    assign readback_array[487][21:21] = (decoded_reg_strb.intr_block_rf.error1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal10_sts.value : '0;
    assign readback_array[487][22:22] = (decoded_reg_strb.intr_block_rf.error1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal9_sts.value : '0;
    assign readback_array[487][23:23] = (decoded_reg_strb.intr_block_rf.error1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal8_sts.value : '0;
    assign readback_array[487][24:24] = (decoded_reg_strb.intr_block_rf.error1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal7_sts.value : '0;
    assign readback_array[487][25:25] = (decoded_reg_strb.intr_block_rf.error1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal6_sts.value : '0;
    assign readback_array[487][26:26] = (decoded_reg_strb.intr_block_rf.error1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal5_sts.value : '0;
    assign readback_array[487][27:27] = (decoded_reg_strb.intr_block_rf.error1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal4_sts.value : '0;
    assign readback_array[487][28:28] = (decoded_reg_strb.intr_block_rf.error1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal3_sts.value : '0;
    assign readback_array[487][29:29] = (decoded_reg_strb.intr_block_rf.error1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal2_sts.value : '0;
    assign readback_array[487][30:30] = (decoded_reg_strb.intr_block_rf.error1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal1_sts.value : '0;
    assign readback_array[487][31:31] = (decoded_reg_strb.intr_block_rf.error1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_internal_intr_r.error_agg_error_fatal0_sts.value : '0;
    assign readback_array[488][0:0] = (decoded_reg_strb.intr_block_rf.notif0_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif0_internal_intr_r.notif_mcu_sram_ecc_cor_sts.value : '0;
    assign readback_array[488][1:1] = (decoded_reg_strb.intr_block_rf.notif0_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif0_internal_intr_r.notif_clpra_mcu_reset_req_sts.value : '0;
    assign readback_array[488][31:2] = '0;
    assign readback_array[489][0:0] = (decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal31_sts.value : '0;
    assign readback_array[489][1:1] = (decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal30_sts.value : '0;
    assign readback_array[489][2:2] = (decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal29_sts.value : '0;
    assign readback_array[489][3:3] = (decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal28_sts.value : '0;
    assign readback_array[489][4:4] = (decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal27_sts.value : '0;
    assign readback_array[489][5:5] = (decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal26_sts.value : '0;
    assign readback_array[489][6:6] = (decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal25_sts.value : '0;
    assign readback_array[489][7:7] = (decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal24_sts.value : '0;
    assign readback_array[489][8:8] = (decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal23_sts.value : '0;
    assign readback_array[489][9:9] = (decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal22_sts.value : '0;
    assign readback_array[489][10:10] = (decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal21_sts.value : '0;
    assign readback_array[489][11:11] = (decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal20_sts.value : '0;
    assign readback_array[489][12:12] = (decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal19_sts.value : '0;
    assign readback_array[489][13:13] = (decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal18_sts.value : '0;
    assign readback_array[489][14:14] = (decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal17_sts.value : '0;
    assign readback_array[489][15:15] = (decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal16_sts.value : '0;
    assign readback_array[489][16:16] = (decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal15_sts.value : '0;
    assign readback_array[489][17:17] = (decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal14_sts.value : '0;
    assign readback_array[489][18:18] = (decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal13_sts.value : '0;
    assign readback_array[489][19:19] = (decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal12_sts.value : '0;
    assign readback_array[489][20:20] = (decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal11_sts.value : '0;
    assign readback_array[489][21:21] = (decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal10_sts.value : '0;
    assign readback_array[489][22:22] = (decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal9_sts.value : '0;
    assign readback_array[489][23:23] = (decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal8_sts.value : '0;
    assign readback_array[489][24:24] = (decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal7_sts.value : '0;
    assign readback_array[489][25:25] = (decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal6_sts.value : '0;
    assign readback_array[489][26:26] = (decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal5_sts.value : '0;
    assign readback_array[489][27:27] = (decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal4_sts.value : '0;
    assign readback_array[489][28:28] = (decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal3_sts.value : '0;
    assign readback_array[489][29:29] = (decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal2_sts.value : '0;
    assign readback_array[489][30:30] = (decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal1_sts.value : '0;
    assign readback_array[489][31:31] = (decoded_reg_strb.intr_block_rf.notif1_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_internal_intr_r.notif_agg_error_non_fatal0_sts.value : '0;
    assign readback_array[490][0:0] = (decoded_reg_strb.intr_block_rf.error0_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error0_intr_trig_r.error_wdt_timer1_timeout_trig.value : '0;
    assign readback_array[490][1:1] = (decoded_reg_strb.intr_block_rf.error0_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error0_intr_trig_r.error_wdt_timer2_timeout_trig.value : '0;
    assign readback_array[490][31:2] = '0;
    assign readback_array[491][0:0] = (decoded_reg_strb.intr_block_rf.error1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal31_trig.value : '0;
    assign readback_array[491][1:1] = (decoded_reg_strb.intr_block_rf.error1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal30_trig.value : '0;
    assign readback_array[491][2:2] = (decoded_reg_strb.intr_block_rf.error1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal29_trig.value : '0;
    assign readback_array[491][3:3] = (decoded_reg_strb.intr_block_rf.error1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal28_trig.value : '0;
    assign readback_array[491][4:4] = (decoded_reg_strb.intr_block_rf.error1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal27_trig.value : '0;
    assign readback_array[491][5:5] = (decoded_reg_strb.intr_block_rf.error1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal26_trig.value : '0;
    assign readback_array[491][6:6] = (decoded_reg_strb.intr_block_rf.error1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal25_trig.value : '0;
    assign readback_array[491][7:7] = (decoded_reg_strb.intr_block_rf.error1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal24_trig.value : '0;
    assign readback_array[491][8:8] = (decoded_reg_strb.intr_block_rf.error1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal23_trig.value : '0;
    assign readback_array[491][9:9] = (decoded_reg_strb.intr_block_rf.error1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal22_trig.value : '0;
    assign readback_array[491][10:10] = (decoded_reg_strb.intr_block_rf.error1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal21_trig.value : '0;
    assign readback_array[491][11:11] = (decoded_reg_strb.intr_block_rf.error1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal20_trig.value : '0;
    assign readback_array[491][12:12] = (decoded_reg_strb.intr_block_rf.error1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal19_trig.value : '0;
    assign readback_array[491][13:13] = (decoded_reg_strb.intr_block_rf.error1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal18_trig.value : '0;
    assign readback_array[491][14:14] = (decoded_reg_strb.intr_block_rf.error1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal17_trig.value : '0;
    assign readback_array[491][15:15] = (decoded_reg_strb.intr_block_rf.error1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal16_trig.value : '0;
    assign readback_array[491][16:16] = (decoded_reg_strb.intr_block_rf.error1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal15_trig.value : '0;
    assign readback_array[491][17:17] = (decoded_reg_strb.intr_block_rf.error1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal14_trig.value : '0;
    assign readback_array[491][18:18] = (decoded_reg_strb.intr_block_rf.error1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal13_trig.value : '0;
    assign readback_array[491][19:19] = (decoded_reg_strb.intr_block_rf.error1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal12_trig.value : '0;
    assign readback_array[491][20:20] = (decoded_reg_strb.intr_block_rf.error1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal11_trig.value : '0;
    assign readback_array[491][21:21] = (decoded_reg_strb.intr_block_rf.error1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal10_trig.value : '0;
    assign readback_array[491][22:22] = (decoded_reg_strb.intr_block_rf.error1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal9_trig.value : '0;
    assign readback_array[491][23:23] = (decoded_reg_strb.intr_block_rf.error1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal8_trig.value : '0;
    assign readback_array[491][24:24] = (decoded_reg_strb.intr_block_rf.error1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal7_trig.value : '0;
    assign readback_array[491][25:25] = (decoded_reg_strb.intr_block_rf.error1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal6_trig.value : '0;
    assign readback_array[491][26:26] = (decoded_reg_strb.intr_block_rf.error1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal5_trig.value : '0;
    assign readback_array[491][27:27] = (decoded_reg_strb.intr_block_rf.error1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal4_trig.value : '0;
    assign readback_array[491][28:28] = (decoded_reg_strb.intr_block_rf.error1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal3_trig.value : '0;
    assign readback_array[491][29:29] = (decoded_reg_strb.intr_block_rf.error1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal2_trig.value : '0;
    assign readback_array[491][30:30] = (decoded_reg_strb.intr_block_rf.error1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal1_trig.value : '0;
    assign readback_array[491][31:31] = (decoded_reg_strb.intr_block_rf.error1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error1_intr_trig_r.error_agg_error_fatal0_trig.value : '0;
    assign readback_array[492][0:0] = (decoded_reg_strb.intr_block_rf.notif0_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif0_intr_trig_r.notif_mcu_sram_ecc_cor_trig.value : '0;
    assign readback_array[492][1:1] = (decoded_reg_strb.intr_block_rf.notif0_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif0_intr_trig_r.notif_clpra_mcu_reset_req_trig.value : '0;
    assign readback_array[492][31:2] = '0;
    assign readback_array[493][0:0] = (decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal31_trig.value : '0;
    assign readback_array[493][1:1] = (decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal30_trig.value : '0;
    assign readback_array[493][2:2] = (decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal29_trig.value : '0;
    assign readback_array[493][3:3] = (decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal28_trig.value : '0;
    assign readback_array[493][4:4] = (decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal27_trig.value : '0;
    assign readback_array[493][5:5] = (decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal26_trig.value : '0;
    assign readback_array[493][6:6] = (decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal25_trig.value : '0;
    assign readback_array[493][7:7] = (decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal24_trig.value : '0;
    assign readback_array[493][8:8] = (decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal23_trig.value : '0;
    assign readback_array[493][9:9] = (decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal22_trig.value : '0;
    assign readback_array[493][10:10] = (decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal21_trig.value : '0;
    assign readback_array[493][11:11] = (decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal20_trig.value : '0;
    assign readback_array[493][12:12] = (decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal19_trig.value : '0;
    assign readback_array[493][13:13] = (decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal18_trig.value : '0;
    assign readback_array[493][14:14] = (decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal17_trig.value : '0;
    assign readback_array[493][15:15] = (decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal16_trig.value : '0;
    assign readback_array[493][16:16] = (decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal15_trig.value : '0;
    assign readback_array[493][17:17] = (decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal14_trig.value : '0;
    assign readback_array[493][18:18] = (decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal13_trig.value : '0;
    assign readback_array[493][19:19] = (decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal12_trig.value : '0;
    assign readback_array[493][20:20] = (decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal11_trig.value : '0;
    assign readback_array[493][21:21] = (decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal10_trig.value : '0;
    assign readback_array[493][22:22] = (decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal9_trig.value : '0;
    assign readback_array[493][23:23] = (decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal8_trig.value : '0;
    assign readback_array[493][24:24] = (decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal7_trig.value : '0;
    assign readback_array[493][25:25] = (decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal6_trig.value : '0;
    assign readback_array[493][26:26] = (decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal5_trig.value : '0;
    assign readback_array[493][27:27] = (decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal4_trig.value : '0;
    assign readback_array[493][28:28] = (decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal3_trig.value : '0;
    assign readback_array[493][29:29] = (decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal2_trig.value : '0;
    assign readback_array[493][30:30] = (decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal1_trig.value : '0;
    assign readback_array[493][31:31] = (decoded_reg_strb.intr_block_rf.notif1_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif1_intr_trig_r.notif_agg_error_non_fatal0_trig.value : '0;
    assign readback_array[494][31:0] = (decoded_reg_strb.intr_block_rf.error_wdt_timer1_timeout_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_wdt_timer1_timeout_intr_count_r.cnt.value : '0;
    assign readback_array[495][31:0] = (decoded_reg_strb.intr_block_rf.error_wdt_timer2_timeout_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_wdt_timer2_timeout_intr_count_r.cnt.value : '0;
    assign readback_array[496][31:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal0_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal0_intr_count_r.cnt.value : '0;
    assign readback_array[497][31:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal1_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal1_intr_count_r.cnt.value : '0;
    assign readback_array[498][31:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal2_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal2_intr_count_r.cnt.value : '0;
    assign readback_array[499][31:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal3_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal3_intr_count_r.cnt.value : '0;
    assign readback_array[500][31:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal4_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal4_intr_count_r.cnt.value : '0;
    assign readback_array[501][31:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal5_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal5_intr_count_r.cnt.value : '0;
    assign readback_array[502][31:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal6_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal6_intr_count_r.cnt.value : '0;
    assign readback_array[503][31:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal7_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal7_intr_count_r.cnt.value : '0;
    assign readback_array[504][31:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal8_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal8_intr_count_r.cnt.value : '0;
    assign readback_array[505][31:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal9_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal9_intr_count_r.cnt.value : '0;
    assign readback_array[506][31:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal10_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal10_intr_count_r.cnt.value : '0;
    assign readback_array[507][31:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal11_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal11_intr_count_r.cnt.value : '0;
    assign readback_array[508][31:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal12_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal12_intr_count_r.cnt.value : '0;
    assign readback_array[509][31:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal13_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal13_intr_count_r.cnt.value : '0;
    assign readback_array[510][31:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal14_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal14_intr_count_r.cnt.value : '0;
    assign readback_array[511][31:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal15_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal15_intr_count_r.cnt.value : '0;
    assign readback_array[512][31:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal16_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal16_intr_count_r.cnt.value : '0;
    assign readback_array[513][31:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal17_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal17_intr_count_r.cnt.value : '0;
    assign readback_array[514][31:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal18_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal18_intr_count_r.cnt.value : '0;
    assign readback_array[515][31:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal19_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal19_intr_count_r.cnt.value : '0;
    assign readback_array[516][31:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal20_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal20_intr_count_r.cnt.value : '0;
    assign readback_array[517][31:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal21_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal21_intr_count_r.cnt.value : '0;
    assign readback_array[518][31:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal22_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal22_intr_count_r.cnt.value : '0;
    assign readback_array[519][31:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal23_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal23_intr_count_r.cnt.value : '0;
    assign readback_array[520][31:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal24_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal24_intr_count_r.cnt.value : '0;
    assign readback_array[521][31:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal25_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal25_intr_count_r.cnt.value : '0;
    assign readback_array[522][31:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal26_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal26_intr_count_r.cnt.value : '0;
    assign readback_array[523][31:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal27_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal27_intr_count_r.cnt.value : '0;
    assign readback_array[524][31:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal28_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal28_intr_count_r.cnt.value : '0;
    assign readback_array[525][31:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal29_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal29_intr_count_r.cnt.value : '0;
    assign readback_array[526][31:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal30_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal30_intr_count_r.cnt.value : '0;
    assign readback_array[527][31:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal31_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal31_intr_count_r.cnt.value : '0;
    assign readback_array[528][31:0] = (decoded_reg_strb.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_r.cnt.value : '0;
    assign readback_array[529][31:0] = (decoded_reg_strb.intr_block_rf.notif_clpra_mcu_reset_req_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_clpra_mcu_reset_req_intr_count_r.cnt.value : '0;
    assign readback_array[530][31:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal0_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal0_intr_count_r.cnt.value : '0;
    assign readback_array[531][31:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal1_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal1_intr_count_r.cnt.value : '0;
    assign readback_array[532][31:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal2_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal2_intr_count_r.cnt.value : '0;
    assign readback_array[533][31:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal3_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal3_intr_count_r.cnt.value : '0;
    assign readback_array[534][31:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal4_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal4_intr_count_r.cnt.value : '0;
    assign readback_array[535][31:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal5_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal5_intr_count_r.cnt.value : '0;
    assign readback_array[536][31:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal6_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal6_intr_count_r.cnt.value : '0;
    assign readback_array[537][31:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal7_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal7_intr_count_r.cnt.value : '0;
    assign readback_array[538][31:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal8_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal8_intr_count_r.cnt.value : '0;
    assign readback_array[539][31:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal9_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal9_intr_count_r.cnt.value : '0;
    assign readback_array[540][31:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal10_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal10_intr_count_r.cnt.value : '0;
    assign readback_array[541][31:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal11_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal11_intr_count_r.cnt.value : '0;
    assign readback_array[542][31:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal12_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal12_intr_count_r.cnt.value : '0;
    assign readback_array[543][31:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal13_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal13_intr_count_r.cnt.value : '0;
    assign readback_array[544][31:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal14_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal14_intr_count_r.cnt.value : '0;
    assign readback_array[545][31:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal15_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal15_intr_count_r.cnt.value : '0;
    assign readback_array[546][31:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal16_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal16_intr_count_r.cnt.value : '0;
    assign readback_array[547][31:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal17_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal17_intr_count_r.cnt.value : '0;
    assign readback_array[548][31:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal18_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal18_intr_count_r.cnt.value : '0;
    assign readback_array[549][31:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal19_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal19_intr_count_r.cnt.value : '0;
    assign readback_array[550][31:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal20_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal20_intr_count_r.cnt.value : '0;
    assign readback_array[551][31:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal21_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal21_intr_count_r.cnt.value : '0;
    assign readback_array[552][31:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal22_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal22_intr_count_r.cnt.value : '0;
    assign readback_array[553][31:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal23_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal23_intr_count_r.cnt.value : '0;
    assign readback_array[554][31:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal24_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal24_intr_count_r.cnt.value : '0;
    assign readback_array[555][31:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal25_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal25_intr_count_r.cnt.value : '0;
    assign readback_array[556][31:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal26_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal26_intr_count_r.cnt.value : '0;
    assign readback_array[557][31:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal27_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal27_intr_count_r.cnt.value : '0;
    assign readback_array[558][31:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal28_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal28_intr_count_r.cnt.value : '0;
    assign readback_array[559][31:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal29_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal29_intr_count_r.cnt.value : '0;
    assign readback_array[560][31:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal30_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal30_intr_count_r.cnt.value : '0;
    assign readback_array[561][31:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal31_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal31_intr_count_r.cnt.value : '0;
    assign readback_array[562][0:0] = (decoded_reg_strb.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_wdt_timer1_timeout_intr_count_incr_r.pulse.value : '0;
    assign readback_array[562][31:1] = '0;
    assign readback_array[563][0:0] = (decoded_reg_strb.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_wdt_timer2_timeout_intr_count_incr_r.pulse.value : '0;
    assign readback_array[563][31:1] = '0;
    assign readback_array[564][0:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal0_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal0_intr_count_incr_r.pulse.value : '0;
    assign readback_array[564][31:1] = '0;
    assign readback_array[565][0:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal1_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal1_intr_count_incr_r.pulse.value : '0;
    assign readback_array[565][31:1] = '0;
    assign readback_array[566][0:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal2_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal2_intr_count_incr_r.pulse.value : '0;
    assign readback_array[566][31:1] = '0;
    assign readback_array[567][0:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal3_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal3_intr_count_incr_r.pulse.value : '0;
    assign readback_array[567][31:1] = '0;
    assign readback_array[568][0:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal4_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal4_intr_count_incr_r.pulse.value : '0;
    assign readback_array[568][31:1] = '0;
    assign readback_array[569][0:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal5_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal5_intr_count_incr_r.pulse.value : '0;
    assign readback_array[569][31:1] = '0;
    assign readback_array[570][0:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal6_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal6_intr_count_incr_r.pulse.value : '0;
    assign readback_array[570][31:1] = '0;
    assign readback_array[571][0:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal7_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal7_intr_count_incr_r.pulse.value : '0;
    assign readback_array[571][31:1] = '0;
    assign readback_array[572][0:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal8_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal8_intr_count_incr_r.pulse.value : '0;
    assign readback_array[572][31:1] = '0;
    assign readback_array[573][0:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal9_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal9_intr_count_incr_r.pulse.value : '0;
    assign readback_array[573][31:1] = '0;
    assign readback_array[574][0:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal10_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal10_intr_count_incr_r.pulse.value : '0;
    assign readback_array[574][31:1] = '0;
    assign readback_array[575][0:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal11_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal11_intr_count_incr_r.pulse.value : '0;
    assign readback_array[575][31:1] = '0;
    assign readback_array[576][0:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal12_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal12_intr_count_incr_r.pulse.value : '0;
    assign readback_array[576][31:1] = '0;
    assign readback_array[577][0:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal13_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal13_intr_count_incr_r.pulse.value : '0;
    assign readback_array[577][31:1] = '0;
    assign readback_array[578][0:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal14_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal14_intr_count_incr_r.pulse.value : '0;
    assign readback_array[578][31:1] = '0;
    assign readback_array[579][0:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal15_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal15_intr_count_incr_r.pulse.value : '0;
    assign readback_array[579][31:1] = '0;
    assign readback_array[580][0:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal16_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal16_intr_count_incr_r.pulse.value : '0;
    assign readback_array[580][31:1] = '0;
    assign readback_array[581][0:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal17_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal17_intr_count_incr_r.pulse.value : '0;
    assign readback_array[581][31:1] = '0;
    assign readback_array[582][0:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal18_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal18_intr_count_incr_r.pulse.value : '0;
    assign readback_array[582][31:1] = '0;
    assign readback_array[583][0:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal19_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal19_intr_count_incr_r.pulse.value : '0;
    assign readback_array[583][31:1] = '0;
    assign readback_array[584][0:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal20_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal20_intr_count_incr_r.pulse.value : '0;
    assign readback_array[584][31:1] = '0;
    assign readback_array[585][0:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal21_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal21_intr_count_incr_r.pulse.value : '0;
    assign readback_array[585][31:1] = '0;
    assign readback_array[586][0:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal22_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal22_intr_count_incr_r.pulse.value : '0;
    assign readback_array[586][31:1] = '0;
    assign readback_array[587][0:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal23_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal23_intr_count_incr_r.pulse.value : '0;
    assign readback_array[587][31:1] = '0;
    assign readback_array[588][0:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal24_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal24_intr_count_incr_r.pulse.value : '0;
    assign readback_array[588][31:1] = '0;
    assign readback_array[589][0:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal25_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal25_intr_count_incr_r.pulse.value : '0;
    assign readback_array[589][31:1] = '0;
    assign readback_array[590][0:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal26_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal26_intr_count_incr_r.pulse.value : '0;
    assign readback_array[590][31:1] = '0;
    assign readback_array[591][0:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal27_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal27_intr_count_incr_r.pulse.value : '0;
    assign readback_array[591][31:1] = '0;
    assign readback_array[592][0:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal28_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal28_intr_count_incr_r.pulse.value : '0;
    assign readback_array[592][31:1] = '0;
    assign readback_array[593][0:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal29_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal29_intr_count_incr_r.pulse.value : '0;
    assign readback_array[593][31:1] = '0;
    assign readback_array[594][0:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal30_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal30_intr_count_incr_r.pulse.value : '0;
    assign readback_array[594][31:1] = '0;
    assign readback_array[595][0:0] = (decoded_reg_strb.intr_block_rf.error_agg_error_fatal31_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_agg_error_fatal31_intr_count_incr_r.pulse.value : '0;
    assign readback_array[595][31:1] = '0;
    assign readback_array[596][0:0] = (decoded_reg_strb.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_mcu_sram_ecc_cor_intr_count_incr_r.pulse.value : '0;
    assign readback_array[596][31:1] = '0;
    assign readback_array[597][0:0] = (decoded_reg_strb.intr_block_rf.notif_clpra_mcu_reset_req_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_clpra_mcu_reset_req_intr_count_incr_r.pulse.value : '0;
    assign readback_array[597][31:1] = '0;
    assign readback_array[598][0:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal0_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal0_intr_count_incr_r.pulse.value : '0;
    assign readback_array[598][31:1] = '0;
    assign readback_array[599][0:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal1_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal1_intr_count_incr_r.pulse.value : '0;
    assign readback_array[599][31:1] = '0;
    assign readback_array[600][0:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal2_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal2_intr_count_incr_r.pulse.value : '0;
    assign readback_array[600][31:1] = '0;
    assign readback_array[601][0:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal3_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal3_intr_count_incr_r.pulse.value : '0;
    assign readback_array[601][31:1] = '0;
    assign readback_array[602][0:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal4_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal4_intr_count_incr_r.pulse.value : '0;
    assign readback_array[602][31:1] = '0;
    assign readback_array[603][0:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal5_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal5_intr_count_incr_r.pulse.value : '0;
    assign readback_array[603][31:1] = '0;
    assign readback_array[604][0:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal6_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal6_intr_count_incr_r.pulse.value : '0;
    assign readback_array[604][31:1] = '0;
    assign readback_array[605][0:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal7_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal7_intr_count_incr_r.pulse.value : '0;
    assign readback_array[605][31:1] = '0;
    assign readback_array[606][0:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal8_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal8_intr_count_incr_r.pulse.value : '0;
    assign readback_array[606][31:1] = '0;
    assign readback_array[607][0:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal9_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal9_intr_count_incr_r.pulse.value : '0;
    assign readback_array[607][31:1] = '0;
    assign readback_array[608][0:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal10_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal10_intr_count_incr_r.pulse.value : '0;
    assign readback_array[608][31:1] = '0;
    assign readback_array[609][0:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal11_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal11_intr_count_incr_r.pulse.value : '0;
    assign readback_array[609][31:1] = '0;
    assign readback_array[610][0:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal12_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal12_intr_count_incr_r.pulse.value : '0;
    assign readback_array[610][31:1] = '0;
    assign readback_array[611][0:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal13_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal13_intr_count_incr_r.pulse.value : '0;
    assign readback_array[611][31:1] = '0;
    assign readback_array[612][0:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal14_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal14_intr_count_incr_r.pulse.value : '0;
    assign readback_array[612][31:1] = '0;
    assign readback_array[613][0:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal15_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal15_intr_count_incr_r.pulse.value : '0;
    assign readback_array[613][31:1] = '0;
    assign readback_array[614][0:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal16_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal16_intr_count_incr_r.pulse.value : '0;
    assign readback_array[614][31:1] = '0;
    assign readback_array[615][0:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal17_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal17_intr_count_incr_r.pulse.value : '0;
    assign readback_array[615][31:1] = '0;
    assign readback_array[616][0:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal18_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal18_intr_count_incr_r.pulse.value : '0;
    assign readback_array[616][31:1] = '0;
    assign readback_array[617][0:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal19_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal19_intr_count_incr_r.pulse.value : '0;
    assign readback_array[617][31:1] = '0;
    assign readback_array[618][0:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal20_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal20_intr_count_incr_r.pulse.value : '0;
    assign readback_array[618][31:1] = '0;
    assign readback_array[619][0:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal21_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal21_intr_count_incr_r.pulse.value : '0;
    assign readback_array[619][31:1] = '0;
    assign readback_array[620][0:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal22_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal22_intr_count_incr_r.pulse.value : '0;
    assign readback_array[620][31:1] = '0;
    assign readback_array[621][0:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal23_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal23_intr_count_incr_r.pulse.value : '0;
    assign readback_array[621][31:1] = '0;
    assign readback_array[622][0:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal24_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal24_intr_count_incr_r.pulse.value : '0;
    assign readback_array[622][31:1] = '0;
    assign readback_array[623][0:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal25_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal25_intr_count_incr_r.pulse.value : '0;
    assign readback_array[623][31:1] = '0;
    assign readback_array[624][0:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal26_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal26_intr_count_incr_r.pulse.value : '0;
    assign readback_array[624][31:1] = '0;
    assign readback_array[625][0:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal27_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal27_intr_count_incr_r.pulse.value : '0;
    assign readback_array[625][31:1] = '0;
    assign readback_array[626][0:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal28_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal28_intr_count_incr_r.pulse.value : '0;
    assign readback_array[626][31:1] = '0;
    assign readback_array[627][0:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal29_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal29_intr_count_incr_r.pulse.value : '0;
    assign readback_array[627][31:1] = '0;
    assign readback_array[628][0:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal30_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal30_intr_count_incr_r.pulse.value : '0;
    assign readback_array[628][31:1] = '0;
    assign readback_array[629][0:0] = (decoded_reg_strb.intr_block_rf.notif_agg_error_non_fatal31_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_agg_error_non_fatal31_intr_count_incr_r.pulse.value : '0;
    assign readback_array[629][31:1] = '0;

    // Reduce the array
    always_comb begin
        automatic logic [31:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<630; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end

    assign cpuif_rd_ack = readback_done;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;

`CALIPTRA_ASSERT_KNOWN(ERR_HWIF_IN, hwif_in, clk, !hwif_in.mci_pwrgood)

endmodule