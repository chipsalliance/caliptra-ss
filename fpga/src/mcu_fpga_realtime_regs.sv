// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module mcu_fpga_realtime_regs (
        input wire clk,
        input wire rst,

        axi4lite_intf.slave s_axil,

        input mcu_fpga_realtime_regs_pkg::mcu_fpga_realtime_regs__in_t hwif_in,
        output mcu_fpga_realtime_regs_pkg::mcu_fpga_realtime_regs__out_t hwif_out
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [12:0] cpuif_addr;
    logic [31:0] cpuif_wr_data;
    logic [31:0] cpuif_wr_biten;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [31:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;

    // Max Outstanding Transactions: 2
    logic [1:0] axil_n_in_flight;
    logic axil_prev_was_rd;
    logic axil_arvalid;
    logic [12:0] axil_araddr;
    logic axil_ar_accept;
    logic axil_awvalid;
    logic [12:0] axil_awaddr;
    logic axil_wvalid;
    logic [31:0] axil_wdata;
    logic [3:0] axil_wstrb;
    logic axil_aw_accept;
    logic axil_resp_acked;

    // Transaction request acceptance
    always_ff @(posedge clk) begin
        if(rst) begin
            axil_prev_was_rd <= '0;
            axil_arvalid <= '0;
            axil_araddr <= '0;
            axil_awvalid <= '0;
            axil_awaddr <= '0;
            axil_wvalid <= '0;
            axil_wdata <= '0;
            axil_wstrb <= '0;
            axil_n_in_flight <= '0;
        end else begin
            // AR* acceptance register
            if(axil_ar_accept) begin
                axil_prev_was_rd <= '1;
                axil_arvalid <= '0;
            end
            if(s_axil.ARVALID && s_axil.ARREADY) begin
                axil_arvalid <= '1;
                axil_araddr <= s_axil.ARADDR;
            end

            // AW* & W* acceptance registers
            if(axil_aw_accept) begin
                axil_prev_was_rd <= '0;
                axil_awvalid <= '0;
                axil_wvalid <= '0;
            end
            if(s_axil.AWVALID && s_axil.AWREADY) begin
                axil_awvalid <= '1;
                axil_awaddr <= s_axil.AWADDR;
            end
            if(s_axil.WVALID && s_axil.WREADY) begin
                axil_wvalid <= '1;
                axil_wdata <= s_axil.WDATA;
                axil_wstrb <= s_axil.WSTRB;
            end

            // Keep track of in-flight transactions
            if((axil_ar_accept || axil_aw_accept) && !axil_resp_acked) begin
                axil_n_in_flight <= axil_n_in_flight + 1'b1;
            end else if(!(axil_ar_accept || axil_aw_accept) && axil_resp_acked) begin
                axil_n_in_flight <= axil_n_in_flight - 1'b1;
            end
        end
    end

    always_comb begin
        s_axil.ARREADY = (!axil_arvalid || axil_ar_accept);
        s_axil.AWREADY = (!axil_awvalid || axil_aw_accept);
        s_axil.WREADY = (!axil_wvalid || axil_aw_accept);
    end

    // Request dispatch
    always_comb begin
        cpuif_wr_data = axil_wdata;
        for(int i=0; i<4; i++) begin
            cpuif_wr_biten[i*8 +: 8] = {8{axil_wstrb[i]}};
        end
        cpuif_req = '0;
        cpuif_req_is_wr = '0;
        cpuif_addr = '0;
        axil_ar_accept = '0;
        axil_aw_accept = '0;

        if(axil_n_in_flight < 2'd2) begin
            // Can safely issue more transactions without overwhelming response buffer
            if(axil_arvalid && !axil_prev_was_rd) begin
                cpuif_req = '1;
                cpuif_req_is_wr = '0;
                cpuif_addr = {axil_araddr[12:2], 2'b0};
                if(!cpuif_req_stall_rd) axil_ar_accept = '1;
            end else if(axil_awvalid && axil_wvalid) begin
                cpuif_req = '1;
                cpuif_req_is_wr = '1;
                cpuif_addr = {axil_awaddr[12:2], 2'b0};
                if(!cpuif_req_stall_wr) axil_aw_accept = '1;
            end else if(axil_arvalid) begin
                cpuif_req = '1;
                cpuif_req_is_wr = '0;
                cpuif_addr = {axil_araddr[12:2], 2'b0};
                if(!cpuif_req_stall_rd) axil_ar_accept = '1;
            end
        end
    end


    // AXI4-Lite Response Logic
    struct {
        logic is_wr;
        logic err;
        logic [31:0] rdata;
    } axil_resp_buffer[2];

    logic [1:0] axil_resp_wptr;
    logic [1:0] axil_resp_rptr;

    always_ff @(posedge clk) begin
        if(rst) begin
            for(int i=0; i<2; i++) begin
                axil_resp_buffer[i].is_wr <= '0;
                axil_resp_buffer[i].err <= '0;
                axil_resp_buffer[i].rdata <= '0;
            end
            axil_resp_wptr <= '0;
            axil_resp_rptr <= '0;
        end else begin
            // Store responses in buffer until AXI response channel accepts them
            if(cpuif_rd_ack || cpuif_wr_ack) begin
                if(cpuif_rd_ack) begin
                    axil_resp_buffer[axil_resp_wptr[0:0]].is_wr <= '0;
                    axil_resp_buffer[axil_resp_wptr[0:0]].err <= cpuif_rd_err;
                    axil_resp_buffer[axil_resp_wptr[0:0]].rdata <= cpuif_rd_data;

                end else if(cpuif_wr_ack) begin
                    axil_resp_buffer[axil_resp_wptr[0:0]].is_wr <= '1;
                    axil_resp_buffer[axil_resp_wptr[0:0]].err <= cpuif_wr_err;
                end
                axil_resp_wptr <= axil_resp_wptr + 1'b1;
            end

            // Advance read pointer when acknowledged
            if(axil_resp_acked) begin
                axil_resp_rptr <= axil_resp_rptr + 1'b1;
            end
        end
    end

    always_comb begin
        axil_resp_acked = '0;
        s_axil.BVALID = '0;
        s_axil.RVALID = '0;
        if(axil_resp_rptr != axil_resp_wptr) begin
            if(axil_resp_buffer[axil_resp_rptr[0:0]].is_wr) begin
                s_axil.BVALID = '1;
                if(s_axil.BREADY) axil_resp_acked = '1;
            end else begin
                s_axil.RVALID = '1;
                if(s_axil.RREADY) axil_resp_acked = '1;
            end
        end

        s_axil.RDATA = axil_resp_buffer[axil_resp_rptr[0:0]].rdata;
        if(axil_resp_buffer[axil_resp_rptr[0:0]].err) begin
            s_axil.BRESP = 2'b10;
            s_axil.RRESP = 2'b10;
        end else begin
            s_axil.BRESP = 2'b00;
            s_axil.RRESP = 2'b00;
        end
    end

    logic cpuif_req_masked;

    // Read & write latencies are balanced. Stalls not required
    assign cpuif_req_stall_rd = '0;
    assign cpuif_req_stall_wr = '0;
    assign cpuif_req_masked = cpuif_req
                            & !(!cpuif_req_is_wr & cpuif_req_stall_rd)
                            & !(cpuif_req_is_wr & cpuif_req_stall_wr);

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    typedef struct {
        struct {
            logic cptra_obf_key[8];
            logic control;
            logic status;
            logic mcu_reset_vector;
            logic generic;
            logic generic_in;
            logic lsu_user;
            logic ifu_user;
            logic clp_user;
            logic mci_error;
            logic mci_config;
            logic mci_generic_input_wires[2];
            logic mci_generic_output_wires[2];
        } interface_regs;
        struct {
            logic log_fifo_data;
            logic log_fifo_status;
            logic log_fifo_input;
        } fifo_regs;
    } decoded_reg_strb_t;
    decoded_reg_strb_t decoded_reg_strb;
    logic decoded_req;
    logic decoded_req_is_wr;
    logic [31:0] decoded_wr_data;
    logic [31:0] decoded_wr_biten;

    always_comb begin
        for(int i0=0; i0<8; i0++) begin
            decoded_reg_strb.interface_regs.cptra_obf_key[i0] = cpuif_req_masked & (cpuif_addr == 13'h0 + i0*13'h4);
        end
        decoded_reg_strb.interface_regs.control = cpuif_req_masked & (cpuif_addr == 13'h20);
        decoded_reg_strb.interface_regs.status = cpuif_req_masked & (cpuif_addr == 13'h24);
        decoded_reg_strb.interface_regs.mcu_reset_vector = cpuif_req_masked & (cpuif_addr == 13'h28);
        decoded_reg_strb.interface_regs.generic = cpuif_req_masked & (cpuif_addr == 13'h2c);
        decoded_reg_strb.interface_regs.generic_in = cpuif_req_masked & (cpuif_addr == 13'h30);
        decoded_reg_strb.interface_regs.lsu_user = cpuif_req_masked & (cpuif_addr == 13'h34);
        decoded_reg_strb.interface_regs.ifu_user = cpuif_req_masked & (cpuif_addr == 13'h38);
        decoded_reg_strb.interface_regs.clp_user = cpuif_req_masked & (cpuif_addr == 13'h3c);
        decoded_reg_strb.interface_regs.mci_error = cpuif_req_masked & (cpuif_addr == 13'h40);
        decoded_reg_strb.interface_regs.mci_config = cpuif_req_masked & (cpuif_addr == 13'h44);
        for(int i0=0; i0<2; i0++) begin
            decoded_reg_strb.interface_regs.mci_generic_input_wires[i0] = cpuif_req_masked & (cpuif_addr == 13'h48 + i0*13'h4);
        end
        for(int i0=0; i0<2; i0++) begin
            decoded_reg_strb.interface_regs.mci_generic_output_wires[i0] = cpuif_req_masked & (cpuif_addr == 13'h50 + i0*13'h4);
        end
        decoded_reg_strb.fifo_regs.log_fifo_data = cpuif_req_masked & (cpuif_addr == 13'h1000);
        decoded_reg_strb.fifo_regs.log_fifo_status = cpuif_req_masked & (cpuif_addr == 13'h1004);
        decoded_reg_strb.fifo_regs.log_fifo_input = cpuif_req_masked & (cpuif_addr == 13'h1008);
    end

    // Pass down signals to next stage
    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;
    assign decoded_wr_biten = cpuif_wr_biten;

    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    typedef struct {
        struct {
            struct {
                struct {
                    logic [31:0] next;
                    logic load_next;
                } value;
            } cptra_obf_key[8];
            struct {
                struct {
                    logic next;
                    logic load_next;
                } rst_l;
                struct {
                    logic next;
                    logic load_next;
                } dbg_rst_l;
                struct {
                    logic next;
                    logic load_next;
                } i3c_rst_n;
                struct {
                    logic next;
                    logic load_next;
                } mci_rst_b;
                struct {
                    logic next;
                    logic load_next;
                } mci_pwrgood;
                struct {
                    logic next;
                    logic load_next;
                } lc_rst_ni;
                struct {
                    logic next;
                    logic load_next;
                } otp_rst_ni;
                struct {
                    logic next;
                    logic load_next;
                } otp_rst_edn_ni;
                struct {
                    logic next;
                    logic load_next;
                } scan_mode;
            } control;
            struct {
                struct {
                    logic next;
                    logic load_next;
                } cptra_error_fatal;
                struct {
                    logic next;
                    logic load_next;
                } cptra_error_non_fatal;
                struct {
                    logic next;
                    logic load_next;
                } ready_for_fuses;
                struct {
                    logic next;
                    logic load_next;
                } ready_for_fw_push;
                struct {
                    logic next;
                    logic load_next;
                } ready_for_runtime;
                struct {
                    logic next;
                    logic load_next;
                } mailbox_data_avail;
                struct {
                    logic next;
                    logic load_next;
                } mailbox_flow_done;
            } status;
            struct {
                struct {
                    logic [31:0] next;
                    logic load_next;
                } mcu_reset_vector;
            } mcu_reset_vector;
            struct {
                struct {
                    logic [31:0] next;
                    logic load_next;
                } generic;
            } generic;
            struct {
                struct {
                    logic [31:0] next;
                    logic load_next;
                } generic_in;
            } generic_in;
            struct {
                struct {
                    logic [31:0] next;
                    logic load_next;
                } lsu_user;
            } lsu_user;
            struct {
                struct {
                    logic [31:0] next;
                    logic load_next;
                } ifu_user;
            } ifu_user;
            struct {
                struct {
                    logic [31:0] next;
                    logic load_next;
                } clp_user;
            } clp_user;
            struct {
                struct {
                    logic next;
                    logic load_next;
                } mci_error_fatal;
                struct {
                    logic next;
                    logic load_next;
                } mci_error_non_fatal;
            } mci_error;
            struct {
                struct {
                    logic next;
                    logic load_next;
                } mcu_no_rom_config;
                struct {
                    logic next;
                    logic load_next;
                } cptra_ss_mci_boot_seq_brkpoint_i;
                struct {
                    logic next;
                    logic load_next;
                } cptra_ss_lc_Allow_RMA_on_PPD_i;
                struct {
                    logic next;
                    logic load_next;
                } cptra_ss_lc_ctrl_scan_rst_ni_i;
                struct {
                    logic next;
                    logic load_next;
                } cptra_ss_lc_esclate_scrap_state0_i;
                struct {
                    logic next;
                    logic load_next;
                } cptra_ss_lc_esclate_scrap_state1_i;
            } mci_config;
            struct {
                struct {
                    logic [31:0] next;
                    logic load_next;
                } value;
            } mci_generic_input_wires[2];
            struct {
                struct {
                    logic [31:0] next;
                    logic load_next;
                } value;
            } mci_generic_output_wires[2];
        } interface_regs;
        struct {
            struct {
                struct {
                    logic [7:0] next;
                    logic load_next;
                } next_char;
                struct {
                    logic next;
                    logic load_next;
                } char_valid;
            } log_fifo_data;
            struct {
                struct {
                    logic next;
                    logic load_next;
                } log_fifo_empty;
                struct {
                    logic next;
                    logic load_next;
                } log_fifo_full;
            } log_fifo_status;
            struct {
                struct {
                    logic [7:0] next;
                    logic load_next;
                } char;
            } log_fifo_input;
        } fifo_regs;
    } field_combo_t;
    field_combo_t field_combo;

    typedef struct {
        struct {
            struct {
                struct {
                    logic [31:0] value;
                } value;
            } cptra_obf_key[8];
            struct {
                struct {
                    logic value;
                } rst_l;
                struct {
                    logic value;
                } dbg_rst_l;
                struct {
                    logic value;
                } i3c_rst_n;
                struct {
                    logic value;
                } mci_rst_b;
                struct {
                    logic value;
                } mci_pwrgood;
                struct {
                    logic value;
                } lc_rst_ni;
                struct {
                    logic value;
                } otp_rst_ni;
                struct {
                    logic value;
                } otp_rst_edn_ni;
                struct {
                    logic value;
                } scan_mode;
            } control;
            struct {
                struct {
                    logic value;
                } cptra_error_fatal;
                struct {
                    logic value;
                } cptra_error_non_fatal;
                struct {
                    logic value;
                } ready_for_fuses;
                struct {
                    logic value;
                } ready_for_fw_push;
                struct {
                    logic value;
                } ready_for_runtime;
                struct {
                    logic value;
                } mailbox_data_avail;
                struct {
                    logic value;
                } mailbox_flow_done;
            } status;
            struct {
                struct {
                    logic [31:0] value;
                } mcu_reset_vector;
            } mcu_reset_vector;
            struct {
                struct {
                    logic [31:0] value;
                } generic;
            } generic;
            struct {
                struct {
                    logic [31:0] value;
                } generic_in;
            } generic_in;
            struct {
                struct {
                    logic [31:0] value;
                } lsu_user;
            } lsu_user;
            struct {
                struct {
                    logic [31:0] value;
                } ifu_user;
            } ifu_user;
            struct {
                struct {
                    logic [31:0] value;
                } clp_user;
            } clp_user;
            struct {
                struct {
                    logic value;
                } mci_error_fatal;
                struct {
                    logic value;
                } mci_error_non_fatal;
            } mci_error;
            struct {
                struct {
                    logic value;
                } mcu_no_rom_config;
                struct {
                    logic value;
                } cptra_ss_mci_boot_seq_brkpoint_i;
                struct {
                    logic value;
                } cptra_ss_lc_Allow_RMA_on_PPD_i;
                struct {
                    logic value;
                } cptra_ss_lc_ctrl_scan_rst_ni_i;
                struct {
                    logic value;
                } cptra_ss_lc_esclate_scrap_state0_i;
                struct {
                    logic value;
                } cptra_ss_lc_esclate_scrap_state1_i;
            } mci_config;
            struct {
                struct {
                    logic [31:0] value;
                } value;
            } mci_generic_input_wires[2];
            struct {
                struct {
                    logic [31:0] value;
                } value;
            } mci_generic_output_wires[2];
        } interface_regs;
        struct {
            struct {
                struct {
                    logic [7:0] value;
                } next_char;
                struct {
                    logic value;
                } char_valid;
            } log_fifo_data;
            struct {
                struct {
                    logic value;
                } log_fifo_empty;
                struct {
                    logic value;
                } log_fifo_full;
            } log_fifo_status;
            struct {
                struct {
                    logic [7:0] value;
                } char;
            } log_fifo_input;
        } fifo_regs;
    } field_storage_t;
    field_storage_t field_storage;

    for(genvar i0=0; i0<8; i0++) begin
        // Field: mcu_fpga_realtime_regs.interface_regs.cptra_obf_key[].value
        always_comb begin
            automatic logic [31:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.interface_regs.cptra_obf_key[i0].value.value;
            load_next_c = '0;
            if(decoded_reg_strb.interface_regs.cptra_obf_key[i0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage.interface_regs.cptra_obf_key[i0].value.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo.interface_regs.cptra_obf_key[i0].value.next = next_c;
            field_combo.interface_regs.cptra_obf_key[i0].value.load_next = load_next_c;
        end
        always_ff @(posedge clk) begin
            if(rst) begin
                field_storage.interface_regs.cptra_obf_key[i0].value.value <= 32'h0;
            end else if(field_combo.interface_regs.cptra_obf_key[i0].value.load_next) begin
                field_storage.interface_regs.cptra_obf_key[i0].value.value <= field_combo.interface_regs.cptra_obf_key[i0].value.next;
            end
        end
        assign hwif_out.interface_regs.cptra_obf_key[i0].value.value = field_storage.interface_regs.cptra_obf_key[i0].value.value;
    end
    // Field: mcu_fpga_realtime_regs.interface_regs.control.rst_l
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.interface_regs.control.rst_l.value;
        load_next_c = '0;
        if(decoded_reg_strb.interface_regs.control && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.interface_regs.control.rst_l.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.interface_regs.control.rst_l.next = next_c;
        field_combo.interface_regs.control.rst_l.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.interface_regs.control.rst_l.value <= 1'h0;
        end else if(field_combo.interface_regs.control.rst_l.load_next) begin
            field_storage.interface_regs.control.rst_l.value <= field_combo.interface_regs.control.rst_l.next;
        end
    end
    assign hwif_out.interface_regs.control.rst_l.value = field_storage.interface_regs.control.rst_l.value;
    // Field: mcu_fpga_realtime_regs.interface_regs.control.dbg_rst_l
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.interface_regs.control.dbg_rst_l.value;
        load_next_c = '0;
        if(decoded_reg_strb.interface_regs.control && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.interface_regs.control.dbg_rst_l.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.interface_regs.control.dbg_rst_l.next = next_c;
        field_combo.interface_regs.control.dbg_rst_l.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.interface_regs.control.dbg_rst_l.value <= 1'h0;
        end else if(field_combo.interface_regs.control.dbg_rst_l.load_next) begin
            field_storage.interface_regs.control.dbg_rst_l.value <= field_combo.interface_regs.control.dbg_rst_l.next;
        end
    end
    assign hwif_out.interface_regs.control.dbg_rst_l.value = field_storage.interface_regs.control.dbg_rst_l.value;
    // Field: mcu_fpga_realtime_regs.interface_regs.control.i3c_rst_n
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.interface_regs.control.i3c_rst_n.value;
        load_next_c = '0;
        if(decoded_reg_strb.interface_regs.control && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.interface_regs.control.i3c_rst_n.value & ~decoded_wr_biten[2:2]) | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end
        field_combo.interface_regs.control.i3c_rst_n.next = next_c;
        field_combo.interface_regs.control.i3c_rst_n.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.interface_regs.control.i3c_rst_n.value <= 1'h0;
        end else if(field_combo.interface_regs.control.i3c_rst_n.load_next) begin
            field_storage.interface_regs.control.i3c_rst_n.value <= field_combo.interface_regs.control.i3c_rst_n.next;
        end
    end
    assign hwif_out.interface_regs.control.i3c_rst_n.value = field_storage.interface_regs.control.i3c_rst_n.value;
    // Field: mcu_fpga_realtime_regs.interface_regs.control.mci_rst_b
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.interface_regs.control.mci_rst_b.value;
        load_next_c = '0;
        if(decoded_reg_strb.interface_regs.control && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.interface_regs.control.mci_rst_b.value & ~decoded_wr_biten[3:3]) | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end
        field_combo.interface_regs.control.mci_rst_b.next = next_c;
        field_combo.interface_regs.control.mci_rst_b.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.interface_regs.control.mci_rst_b.value <= 1'h0;
        end else if(field_combo.interface_regs.control.mci_rst_b.load_next) begin
            field_storage.interface_regs.control.mci_rst_b.value <= field_combo.interface_regs.control.mci_rst_b.next;
        end
    end
    assign hwif_out.interface_regs.control.mci_rst_b.value = field_storage.interface_regs.control.mci_rst_b.value;
    // Field: mcu_fpga_realtime_regs.interface_regs.control.mci_pwrgood
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.interface_regs.control.mci_pwrgood.value;
        load_next_c = '0;
        if(decoded_reg_strb.interface_regs.control && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.interface_regs.control.mci_pwrgood.value & ~decoded_wr_biten[4:4]) | (decoded_wr_data[4:4] & decoded_wr_biten[4:4]);
            load_next_c = '1;
        end
        field_combo.interface_regs.control.mci_pwrgood.next = next_c;
        field_combo.interface_regs.control.mci_pwrgood.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.interface_regs.control.mci_pwrgood.value <= 1'h0;
        end else if(field_combo.interface_regs.control.mci_pwrgood.load_next) begin
            field_storage.interface_regs.control.mci_pwrgood.value <= field_combo.interface_regs.control.mci_pwrgood.next;
        end
    end
    assign hwif_out.interface_regs.control.mci_pwrgood.value = field_storage.interface_regs.control.mci_pwrgood.value;
    // Field: mcu_fpga_realtime_regs.interface_regs.control.lc_rst_ni
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.interface_regs.control.lc_rst_ni.value;
        load_next_c = '0;
        if(decoded_reg_strb.interface_regs.control && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.interface_regs.control.lc_rst_ni.value & ~decoded_wr_biten[5:5]) | (decoded_wr_data[5:5] & decoded_wr_biten[5:5]);
            load_next_c = '1;
        end
        field_combo.interface_regs.control.lc_rst_ni.next = next_c;
        field_combo.interface_regs.control.lc_rst_ni.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.interface_regs.control.lc_rst_ni.value <= 1'h0;
        end else if(field_combo.interface_regs.control.lc_rst_ni.load_next) begin
            field_storage.interface_regs.control.lc_rst_ni.value <= field_combo.interface_regs.control.lc_rst_ni.next;
        end
    end
    assign hwif_out.interface_regs.control.lc_rst_ni.value = field_storage.interface_regs.control.lc_rst_ni.value;
    // Field: mcu_fpga_realtime_regs.interface_regs.control.otp_rst_ni
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.interface_regs.control.otp_rst_ni.value;
        load_next_c = '0;
        if(decoded_reg_strb.interface_regs.control && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.interface_regs.control.otp_rst_ni.value & ~decoded_wr_biten[6:6]) | (decoded_wr_data[6:6] & decoded_wr_biten[6:6]);
            load_next_c = '1;
        end
        field_combo.interface_regs.control.otp_rst_ni.next = next_c;
        field_combo.interface_regs.control.otp_rst_ni.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.interface_regs.control.otp_rst_ni.value <= 1'h0;
        end else if(field_combo.interface_regs.control.otp_rst_ni.load_next) begin
            field_storage.interface_regs.control.otp_rst_ni.value <= field_combo.interface_regs.control.otp_rst_ni.next;
        end
    end
    assign hwif_out.interface_regs.control.otp_rst_ni.value = field_storage.interface_regs.control.otp_rst_ni.value;
    // Field: mcu_fpga_realtime_regs.interface_regs.control.otp_rst_edn_ni
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.interface_regs.control.otp_rst_edn_ni.value;
        load_next_c = '0;
        if(decoded_reg_strb.interface_regs.control && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.interface_regs.control.otp_rst_edn_ni.value & ~decoded_wr_biten[7:7]) | (decoded_wr_data[7:7] & decoded_wr_biten[7:7]);
            load_next_c = '1;
        end
        field_combo.interface_regs.control.otp_rst_edn_ni.next = next_c;
        field_combo.interface_regs.control.otp_rst_edn_ni.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.interface_regs.control.otp_rst_edn_ni.value <= 1'h0;
        end else if(field_combo.interface_regs.control.otp_rst_edn_ni.load_next) begin
            field_storage.interface_regs.control.otp_rst_edn_ni.value <= field_combo.interface_regs.control.otp_rst_edn_ni.next;
        end
    end
    assign hwif_out.interface_regs.control.otp_rst_edn_ni.value = field_storage.interface_regs.control.otp_rst_edn_ni.value;
    // Field: mcu_fpga_realtime_regs.interface_regs.control.scan_mode
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.interface_regs.control.scan_mode.value;
        load_next_c = '0;
        if(decoded_reg_strb.interface_regs.control && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.interface_regs.control.scan_mode.value & ~decoded_wr_biten[8:8]) | (decoded_wr_data[8:8] & decoded_wr_biten[8:8]);
            load_next_c = '1;
        end
        field_combo.interface_regs.control.scan_mode.next = next_c;
        field_combo.interface_regs.control.scan_mode.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.interface_regs.control.scan_mode.value <= 1'h0;
        end else if(field_combo.interface_regs.control.scan_mode.load_next) begin
            field_storage.interface_regs.control.scan_mode.value <= field_combo.interface_regs.control.scan_mode.next;
        end
    end
    assign hwif_out.interface_regs.control.scan_mode.value = field_storage.interface_regs.control.scan_mode.value;
    // Field: mcu_fpga_realtime_regs.interface_regs.status.cptra_error_fatal
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.interface_regs.status.cptra_error_fatal.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.interface_regs.status.cptra_error_fatal.next;
        load_next_c = '1;
        field_combo.interface_regs.status.cptra_error_fatal.next = next_c;
        field_combo.interface_regs.status.cptra_error_fatal.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.interface_regs.status.cptra_error_fatal.value <= 1'h0;
        end else if(field_combo.interface_regs.status.cptra_error_fatal.load_next) begin
            field_storage.interface_regs.status.cptra_error_fatal.value <= field_combo.interface_regs.status.cptra_error_fatal.next;
        end
    end
    assign hwif_out.interface_regs.status.cptra_error_fatal.value = field_storage.interface_regs.status.cptra_error_fatal.value;
    // Field: mcu_fpga_realtime_regs.interface_regs.status.cptra_error_non_fatal
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.interface_regs.status.cptra_error_non_fatal.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.interface_regs.status.cptra_error_non_fatal.next;
        load_next_c = '1;
        field_combo.interface_regs.status.cptra_error_non_fatal.next = next_c;
        field_combo.interface_regs.status.cptra_error_non_fatal.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.interface_regs.status.cptra_error_non_fatal.value <= 1'h0;
        end else if(field_combo.interface_regs.status.cptra_error_non_fatal.load_next) begin
            field_storage.interface_regs.status.cptra_error_non_fatal.value <= field_combo.interface_regs.status.cptra_error_non_fatal.next;
        end
    end
    assign hwif_out.interface_regs.status.cptra_error_non_fatal.value = field_storage.interface_regs.status.cptra_error_non_fatal.value;
    // Field: mcu_fpga_realtime_regs.interface_regs.status.ready_for_fuses
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.interface_regs.status.ready_for_fuses.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.interface_regs.status.ready_for_fuses.next;
        load_next_c = '1;
        field_combo.interface_regs.status.ready_for_fuses.next = next_c;
        field_combo.interface_regs.status.ready_for_fuses.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.interface_regs.status.ready_for_fuses.value <= 1'h0;
        end else if(field_combo.interface_regs.status.ready_for_fuses.load_next) begin
            field_storage.interface_regs.status.ready_for_fuses.value <= field_combo.interface_regs.status.ready_for_fuses.next;
        end
    end
    assign hwif_out.interface_regs.status.ready_for_fuses.value = field_storage.interface_regs.status.ready_for_fuses.value;
    // Field: mcu_fpga_realtime_regs.interface_regs.status.ready_for_fw_push
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.interface_regs.status.ready_for_fw_push.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.interface_regs.status.ready_for_fw_push.next;
        load_next_c = '1;
        field_combo.interface_regs.status.ready_for_fw_push.next = next_c;
        field_combo.interface_regs.status.ready_for_fw_push.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.interface_regs.status.ready_for_fw_push.value <= 1'h0;
        end else if(field_combo.interface_regs.status.ready_for_fw_push.load_next) begin
            field_storage.interface_regs.status.ready_for_fw_push.value <= field_combo.interface_regs.status.ready_for_fw_push.next;
        end
    end
    assign hwif_out.interface_regs.status.ready_for_fw_push.value = field_storage.interface_regs.status.ready_for_fw_push.value;
    // Field: mcu_fpga_realtime_regs.interface_regs.status.ready_for_runtime
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.interface_regs.status.ready_for_runtime.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.interface_regs.status.ready_for_runtime.next;
        load_next_c = '1;
        field_combo.interface_regs.status.ready_for_runtime.next = next_c;
        field_combo.interface_regs.status.ready_for_runtime.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.interface_regs.status.ready_for_runtime.value <= 1'h0;
        end else if(field_combo.interface_regs.status.ready_for_runtime.load_next) begin
            field_storage.interface_regs.status.ready_for_runtime.value <= field_combo.interface_regs.status.ready_for_runtime.next;
        end
    end
    assign hwif_out.interface_regs.status.ready_for_runtime.value = field_storage.interface_regs.status.ready_for_runtime.value;
    // Field: mcu_fpga_realtime_regs.interface_regs.status.mailbox_data_avail
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.interface_regs.status.mailbox_data_avail.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.interface_regs.status.mailbox_data_avail.next;
        load_next_c = '1;
        field_combo.interface_regs.status.mailbox_data_avail.next = next_c;
        field_combo.interface_regs.status.mailbox_data_avail.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.interface_regs.status.mailbox_data_avail.value <= 1'h0;
        end else if(field_combo.interface_regs.status.mailbox_data_avail.load_next) begin
            field_storage.interface_regs.status.mailbox_data_avail.value <= field_combo.interface_regs.status.mailbox_data_avail.next;
        end
    end
    assign hwif_out.interface_regs.status.mailbox_data_avail.value = field_storage.interface_regs.status.mailbox_data_avail.value;
    // Field: mcu_fpga_realtime_regs.interface_regs.status.mailbox_flow_done
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.interface_regs.status.mailbox_flow_done.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.interface_regs.status.mailbox_flow_done.next;
        load_next_c = '1;
        field_combo.interface_regs.status.mailbox_flow_done.next = next_c;
        field_combo.interface_regs.status.mailbox_flow_done.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.interface_regs.status.mailbox_flow_done.value <= 1'h0;
        end else if(field_combo.interface_regs.status.mailbox_flow_done.load_next) begin
            field_storage.interface_regs.status.mailbox_flow_done.value <= field_combo.interface_regs.status.mailbox_flow_done.next;
        end
    end
    assign hwif_out.interface_regs.status.mailbox_flow_done.value = field_storage.interface_regs.status.mailbox_flow_done.value;
    // Field: mcu_fpga_realtime_regs.interface_regs.mcu_reset_vector.mcu_reset_vector
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.interface_regs.mcu_reset_vector.mcu_reset_vector.value;
        load_next_c = '0;
        if(decoded_reg_strb.interface_regs.mcu_reset_vector && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.interface_regs.mcu_reset_vector.mcu_reset_vector.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.interface_regs.mcu_reset_vector.mcu_reset_vector.next = next_c;
        field_combo.interface_regs.mcu_reset_vector.mcu_reset_vector.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.interface_regs.mcu_reset_vector.mcu_reset_vector.value <= 32'h0;
        end else if(field_combo.interface_regs.mcu_reset_vector.mcu_reset_vector.load_next) begin
            field_storage.interface_regs.mcu_reset_vector.mcu_reset_vector.value <= field_combo.interface_regs.mcu_reset_vector.mcu_reset_vector.next;
        end
    end
    assign hwif_out.interface_regs.mcu_reset_vector.mcu_reset_vector.value = field_storage.interface_regs.mcu_reset_vector.mcu_reset_vector.value;
    // Field: mcu_fpga_realtime_regs.interface_regs.generic.generic
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.interface_regs.generic.generic.value;
        load_next_c = '0;
        if(decoded_reg_strb.interface_regs.generic && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.interface_regs.generic.generic.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.interface_regs.generic.generic.next = next_c;
        field_combo.interface_regs.generic.generic.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.interface_regs.generic.generic.value <= 32'h0;
        end else if(field_combo.interface_regs.generic.generic.load_next) begin
            field_storage.interface_regs.generic.generic.value <= field_combo.interface_regs.generic.generic.next;
        end
    end
    assign hwif_out.interface_regs.generic.generic.value = field_storage.interface_regs.generic.generic.value;
    // Field: mcu_fpga_realtime_regs.interface_regs.generic_in.generic_in
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.interface_regs.generic_in.generic_in.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.interface_regs.generic_in.generic_in.next;
        load_next_c = '1;
        field_combo.interface_regs.generic_in.generic_in.next = next_c;
        field_combo.interface_regs.generic_in.generic_in.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.interface_regs.generic_in.generic_in.value <= 32'h0;
        end else if(field_combo.interface_regs.generic_in.generic_in.load_next) begin
            field_storage.interface_regs.generic_in.generic_in.value <= field_combo.interface_regs.generic_in.generic_in.next;
        end
    end
    assign hwif_out.interface_regs.generic_in.generic_in.value = field_storage.interface_regs.generic_in.generic_in.value;
    // Field: mcu_fpga_realtime_regs.interface_regs.lsu_user.lsu_user
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.interface_regs.lsu_user.lsu_user.value;
        load_next_c = '0;
        if(decoded_reg_strb.interface_regs.lsu_user && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.interface_regs.lsu_user.lsu_user.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.interface_regs.lsu_user.lsu_user.next = next_c;
        field_combo.interface_regs.lsu_user.lsu_user.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.interface_regs.lsu_user.lsu_user.value <= 32'h0;
        end else if(field_combo.interface_regs.lsu_user.lsu_user.load_next) begin
            field_storage.interface_regs.lsu_user.lsu_user.value <= field_combo.interface_regs.lsu_user.lsu_user.next;
        end
    end
    assign hwif_out.interface_regs.lsu_user.lsu_user.value = field_storage.interface_regs.lsu_user.lsu_user.value;
    // Field: mcu_fpga_realtime_regs.interface_regs.ifu_user.ifu_user
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.interface_regs.ifu_user.ifu_user.value;
        load_next_c = '0;
        if(decoded_reg_strb.interface_regs.ifu_user && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.interface_regs.ifu_user.ifu_user.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.interface_regs.ifu_user.ifu_user.next = next_c;
        field_combo.interface_regs.ifu_user.ifu_user.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.interface_regs.ifu_user.ifu_user.value <= 32'h0;
        end else if(field_combo.interface_regs.ifu_user.ifu_user.load_next) begin
            field_storage.interface_regs.ifu_user.ifu_user.value <= field_combo.interface_regs.ifu_user.ifu_user.next;
        end
    end
    assign hwif_out.interface_regs.ifu_user.ifu_user.value = field_storage.interface_regs.ifu_user.ifu_user.value;
    // Field: mcu_fpga_realtime_regs.interface_regs.clp_user.clp_user
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.interface_regs.clp_user.clp_user.value;
        load_next_c = '0;
        if(decoded_reg_strb.interface_regs.clp_user && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.interface_regs.clp_user.clp_user.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.interface_regs.clp_user.clp_user.next = next_c;
        field_combo.interface_regs.clp_user.clp_user.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.interface_regs.clp_user.clp_user.value <= 32'h0;
        end else if(field_combo.interface_regs.clp_user.clp_user.load_next) begin
            field_storage.interface_regs.clp_user.clp_user.value <= field_combo.interface_regs.clp_user.clp_user.next;
        end
    end
    assign hwif_out.interface_regs.clp_user.clp_user.value = field_storage.interface_regs.clp_user.clp_user.value;
    // Field: mcu_fpga_realtime_regs.interface_regs.mci_error.mci_error_fatal
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.interface_regs.mci_error.mci_error_fatal.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.interface_regs.mci_error.mci_error_fatal.next;
        load_next_c = '1;
        field_combo.interface_regs.mci_error.mci_error_fatal.next = next_c;
        field_combo.interface_regs.mci_error.mci_error_fatal.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.interface_regs.mci_error.mci_error_fatal.value <= 1'h0;
        end else if(field_combo.interface_regs.mci_error.mci_error_fatal.load_next) begin
            field_storage.interface_regs.mci_error.mci_error_fatal.value <= field_combo.interface_regs.mci_error.mci_error_fatal.next;
        end
    end
    assign hwif_out.interface_regs.mci_error.mci_error_fatal.value = field_storage.interface_regs.mci_error.mci_error_fatal.value;
    // Field: mcu_fpga_realtime_regs.interface_regs.mci_error.mci_error_non_fatal
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.interface_regs.mci_error.mci_error_non_fatal.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.interface_regs.mci_error.mci_error_non_fatal.next;
        load_next_c = '1;
        field_combo.interface_regs.mci_error.mci_error_non_fatal.next = next_c;
        field_combo.interface_regs.mci_error.mci_error_non_fatal.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.interface_regs.mci_error.mci_error_non_fatal.value <= 1'h0;
        end else if(field_combo.interface_regs.mci_error.mci_error_non_fatal.load_next) begin
            field_storage.interface_regs.mci_error.mci_error_non_fatal.value <= field_combo.interface_regs.mci_error.mci_error_non_fatal.next;
        end
    end
    assign hwif_out.interface_regs.mci_error.mci_error_non_fatal.value = field_storage.interface_regs.mci_error.mci_error_non_fatal.value;
    // Field: mcu_fpga_realtime_regs.interface_regs.mci_config.mcu_no_rom_config
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.interface_regs.mci_config.mcu_no_rom_config.value;
        load_next_c = '0;
        if(decoded_reg_strb.interface_regs.mci_config && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.interface_regs.mci_config.mcu_no_rom_config.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.interface_regs.mci_config.mcu_no_rom_config.next = next_c;
        field_combo.interface_regs.mci_config.mcu_no_rom_config.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.interface_regs.mci_config.mcu_no_rom_config.value <= 1'h0;
        end else if(field_combo.interface_regs.mci_config.mcu_no_rom_config.load_next) begin
            field_storage.interface_regs.mci_config.mcu_no_rom_config.value <= field_combo.interface_regs.mci_config.mcu_no_rom_config.next;
        end
    end
    assign hwif_out.interface_regs.mci_config.mcu_no_rom_config.value = field_storage.interface_regs.mci_config.mcu_no_rom_config.value;
    // Field: mcu_fpga_realtime_regs.interface_regs.mci_config.cptra_ss_mci_boot_seq_brkpoint_i
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.interface_regs.mci_config.cptra_ss_mci_boot_seq_brkpoint_i.value;
        load_next_c = '0;
        if(decoded_reg_strb.interface_regs.mci_config && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.interface_regs.mci_config.cptra_ss_mci_boot_seq_brkpoint_i.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.interface_regs.mci_config.cptra_ss_mci_boot_seq_brkpoint_i.next = next_c;
        field_combo.interface_regs.mci_config.cptra_ss_mci_boot_seq_brkpoint_i.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.interface_regs.mci_config.cptra_ss_mci_boot_seq_brkpoint_i.value <= 1'h0;
        end else if(field_combo.interface_regs.mci_config.cptra_ss_mci_boot_seq_brkpoint_i.load_next) begin
            field_storage.interface_regs.mci_config.cptra_ss_mci_boot_seq_brkpoint_i.value <= field_combo.interface_regs.mci_config.cptra_ss_mci_boot_seq_brkpoint_i.next;
        end
    end
    assign hwif_out.interface_regs.mci_config.cptra_ss_mci_boot_seq_brkpoint_i.value = field_storage.interface_regs.mci_config.cptra_ss_mci_boot_seq_brkpoint_i.value;
    // Field: mcu_fpga_realtime_regs.interface_regs.mci_config.cptra_ss_lc_Allow_RMA_on_PPD_i
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.interface_regs.mci_config.cptra_ss_lc_Allow_RMA_on_PPD_i.value;
        load_next_c = '0;
        if(decoded_reg_strb.interface_regs.mci_config && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.interface_regs.mci_config.cptra_ss_lc_Allow_RMA_on_PPD_i.value & ~decoded_wr_biten[2:2]) | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end
        field_combo.interface_regs.mci_config.cptra_ss_lc_Allow_RMA_on_PPD_i.next = next_c;
        field_combo.interface_regs.mci_config.cptra_ss_lc_Allow_RMA_on_PPD_i.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.interface_regs.mci_config.cptra_ss_lc_Allow_RMA_on_PPD_i.value <= 1'h0;
        end else if(field_combo.interface_regs.mci_config.cptra_ss_lc_Allow_RMA_on_PPD_i.load_next) begin
            field_storage.interface_regs.mci_config.cptra_ss_lc_Allow_RMA_on_PPD_i.value <= field_combo.interface_regs.mci_config.cptra_ss_lc_Allow_RMA_on_PPD_i.next;
        end
    end
    assign hwif_out.interface_regs.mci_config.cptra_ss_lc_Allow_RMA_on_PPD_i.value = field_storage.interface_regs.mci_config.cptra_ss_lc_Allow_RMA_on_PPD_i.value;
    // Field: mcu_fpga_realtime_regs.interface_regs.mci_config.cptra_ss_lc_ctrl_scan_rst_ni_i
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.interface_regs.mci_config.cptra_ss_lc_ctrl_scan_rst_ni_i.value;
        load_next_c = '0;
        if(decoded_reg_strb.interface_regs.mci_config && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.interface_regs.mci_config.cptra_ss_lc_ctrl_scan_rst_ni_i.value & ~decoded_wr_biten[3:3]) | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end
        field_combo.interface_regs.mci_config.cptra_ss_lc_ctrl_scan_rst_ni_i.next = next_c;
        field_combo.interface_regs.mci_config.cptra_ss_lc_ctrl_scan_rst_ni_i.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.interface_regs.mci_config.cptra_ss_lc_ctrl_scan_rst_ni_i.value <= 1'h0;
        end else if(field_combo.interface_regs.mci_config.cptra_ss_lc_ctrl_scan_rst_ni_i.load_next) begin
            field_storage.interface_regs.mci_config.cptra_ss_lc_ctrl_scan_rst_ni_i.value <= field_combo.interface_regs.mci_config.cptra_ss_lc_ctrl_scan_rst_ni_i.next;
        end
    end
    assign hwif_out.interface_regs.mci_config.cptra_ss_lc_ctrl_scan_rst_ni_i.value = field_storage.interface_regs.mci_config.cptra_ss_lc_ctrl_scan_rst_ni_i.value;
    // Field: mcu_fpga_realtime_regs.interface_regs.mci_config.cptra_ss_lc_esclate_scrap_state0_i
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.interface_regs.mci_config.cptra_ss_lc_esclate_scrap_state0_i.value;
        load_next_c = '0;
        if(decoded_reg_strb.interface_regs.mci_config && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.interface_regs.mci_config.cptra_ss_lc_esclate_scrap_state0_i.value & ~decoded_wr_biten[4:4]) | (decoded_wr_data[4:4] & decoded_wr_biten[4:4]);
            load_next_c = '1;
        end
        field_combo.interface_regs.mci_config.cptra_ss_lc_esclate_scrap_state0_i.next = next_c;
        field_combo.interface_regs.mci_config.cptra_ss_lc_esclate_scrap_state0_i.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.interface_regs.mci_config.cptra_ss_lc_esclate_scrap_state0_i.value <= 1'h0;
        end else if(field_combo.interface_regs.mci_config.cptra_ss_lc_esclate_scrap_state0_i.load_next) begin
            field_storage.interface_regs.mci_config.cptra_ss_lc_esclate_scrap_state0_i.value <= field_combo.interface_regs.mci_config.cptra_ss_lc_esclate_scrap_state0_i.next;
        end
    end
    assign hwif_out.interface_regs.mci_config.cptra_ss_lc_esclate_scrap_state0_i.value = field_storage.interface_regs.mci_config.cptra_ss_lc_esclate_scrap_state0_i.value;
    // Field: mcu_fpga_realtime_regs.interface_regs.mci_config.cptra_ss_lc_esclate_scrap_state1_i
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.interface_regs.mci_config.cptra_ss_lc_esclate_scrap_state1_i.value;
        load_next_c = '0;
        if(decoded_reg_strb.interface_regs.mci_config && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.interface_regs.mci_config.cptra_ss_lc_esclate_scrap_state1_i.value & ~decoded_wr_biten[5:5]) | (decoded_wr_data[5:5] & decoded_wr_biten[5:5]);
            load_next_c = '1;
        end
        field_combo.interface_regs.mci_config.cptra_ss_lc_esclate_scrap_state1_i.next = next_c;
        field_combo.interface_regs.mci_config.cptra_ss_lc_esclate_scrap_state1_i.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.interface_regs.mci_config.cptra_ss_lc_esclate_scrap_state1_i.value <= 1'h0;
        end else if(field_combo.interface_regs.mci_config.cptra_ss_lc_esclate_scrap_state1_i.load_next) begin
            field_storage.interface_regs.mci_config.cptra_ss_lc_esclate_scrap_state1_i.value <= field_combo.interface_regs.mci_config.cptra_ss_lc_esclate_scrap_state1_i.next;
        end
    end
    assign hwif_out.interface_regs.mci_config.cptra_ss_lc_esclate_scrap_state1_i.value = field_storage.interface_regs.mci_config.cptra_ss_lc_esclate_scrap_state1_i.value;
    for(genvar i0=0; i0<2; i0++) begin
        // Field: mcu_fpga_realtime_regs.interface_regs.mci_generic_input_wires[].value
        always_comb begin
            automatic logic [31:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.interface_regs.mci_generic_input_wires[i0].value.value;
            load_next_c = '0;
            if(decoded_reg_strb.interface_regs.mci_generic_input_wires[i0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage.interface_regs.mci_generic_input_wires[i0].value.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo.interface_regs.mci_generic_input_wires[i0].value.next = next_c;
            field_combo.interface_regs.mci_generic_input_wires[i0].value.load_next = load_next_c;
        end
        always_ff @(posedge clk) begin
            if(rst) begin
                field_storage.interface_regs.mci_generic_input_wires[i0].value.value <= 32'h0;
            end else if(field_combo.interface_regs.mci_generic_input_wires[i0].value.load_next) begin
                field_storage.interface_regs.mci_generic_input_wires[i0].value.value <= field_combo.interface_regs.mci_generic_input_wires[i0].value.next;
            end
        end
        assign hwif_out.interface_regs.mci_generic_input_wires[i0].value.value = field_storage.interface_regs.mci_generic_input_wires[i0].value.value;
    end
    for(genvar i0=0; i0<2; i0++) begin
        // Field: mcu_fpga_realtime_regs.interface_regs.mci_generic_output_wires[].value
        always_comb begin
            automatic logic [31:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.interface_regs.mci_generic_output_wires[i0].value.value;
            load_next_c = '0;
        
            // HW Write
            next_c = hwif_in.interface_regs.mci_generic_output_wires[i0].value.next;
            load_next_c = '1;
            field_combo.interface_regs.mci_generic_output_wires[i0].value.next = next_c;
            field_combo.interface_regs.mci_generic_output_wires[i0].value.load_next = load_next_c;
        end
        always_ff @(posedge clk) begin
            if(rst) begin
                field_storage.interface_regs.mci_generic_output_wires[i0].value.value <= 32'h0;
            end else if(field_combo.interface_regs.mci_generic_output_wires[i0].value.load_next) begin
                field_storage.interface_regs.mci_generic_output_wires[i0].value.value <= field_combo.interface_regs.mci_generic_output_wires[i0].value.next;
            end
        end
        assign hwif_out.interface_regs.mci_generic_output_wires[i0].value.value = field_storage.interface_regs.mci_generic_output_wires[i0].value.value;
    end
    // Field: mcu_fpga_realtime_regs.fifo_regs.log_fifo_data.next_char
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.fifo_regs.log_fifo_data.next_char.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.fifo_regs.log_fifo_data.next_char.next;
        load_next_c = '1;
        field_combo.fifo_regs.log_fifo_data.next_char.next = next_c;
        field_combo.fifo_regs.log_fifo_data.next_char.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.fifo_regs.log_fifo_data.next_char.value <= 8'h0;
        end else if(field_combo.fifo_regs.log_fifo_data.next_char.load_next) begin
            field_storage.fifo_regs.log_fifo_data.next_char.value <= field_combo.fifo_regs.log_fifo_data.next_char.next;
        end
    end
    assign hwif_out.fifo_regs.log_fifo_data.next_char.value = field_storage.fifo_regs.log_fifo_data.next_char.value;
    assign hwif_out.fifo_regs.log_fifo_data.next_char.rd_swacc = decoded_reg_strb.fifo_regs.log_fifo_data && !decoded_req_is_wr;
    // Field: mcu_fpga_realtime_regs.fifo_regs.log_fifo_data.char_valid
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.fifo_regs.log_fifo_data.char_valid.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.fifo_regs.log_fifo_data.char_valid.next;
        load_next_c = '1;
        field_combo.fifo_regs.log_fifo_data.char_valid.next = next_c;
        field_combo.fifo_regs.log_fifo_data.char_valid.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.fifo_regs.log_fifo_data.char_valid.value <= 1'h0;
        end else if(field_combo.fifo_regs.log_fifo_data.char_valid.load_next) begin
            field_storage.fifo_regs.log_fifo_data.char_valid.value <= field_combo.fifo_regs.log_fifo_data.char_valid.next;
        end
    end
    assign hwif_out.fifo_regs.log_fifo_data.char_valid.value = field_storage.fifo_regs.log_fifo_data.char_valid.value;
    // Field: mcu_fpga_realtime_regs.fifo_regs.log_fifo_status.log_fifo_empty
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.fifo_regs.log_fifo_status.log_fifo_empty.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.fifo_regs.log_fifo_status.log_fifo_empty.next;
        load_next_c = '1;
        field_combo.fifo_regs.log_fifo_status.log_fifo_empty.next = next_c;
        field_combo.fifo_regs.log_fifo_status.log_fifo_empty.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.fifo_regs.log_fifo_status.log_fifo_empty.value <= 1'h0;
        end else if(field_combo.fifo_regs.log_fifo_status.log_fifo_empty.load_next) begin
            field_storage.fifo_regs.log_fifo_status.log_fifo_empty.value <= field_combo.fifo_regs.log_fifo_status.log_fifo_empty.next;
        end
    end
    assign hwif_out.fifo_regs.log_fifo_status.log_fifo_empty.value = field_storage.fifo_regs.log_fifo_status.log_fifo_empty.value;
    // Field: mcu_fpga_realtime_regs.fifo_regs.log_fifo_status.log_fifo_full
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.fifo_regs.log_fifo_status.log_fifo_full.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.fifo_regs.log_fifo_status.log_fifo_full.next;
        load_next_c = '1;
        field_combo.fifo_regs.log_fifo_status.log_fifo_full.next = next_c;
        field_combo.fifo_regs.log_fifo_status.log_fifo_full.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.fifo_regs.log_fifo_status.log_fifo_full.value <= 1'h0;
        end else if(field_combo.fifo_regs.log_fifo_status.log_fifo_full.load_next) begin
            field_storage.fifo_regs.log_fifo_status.log_fifo_full.value <= field_combo.fifo_regs.log_fifo_status.log_fifo_full.next;
        end
    end
    assign hwif_out.fifo_regs.log_fifo_status.log_fifo_full.value = field_storage.fifo_regs.log_fifo_status.log_fifo_full.value;
    // Field: mcu_fpga_realtime_regs.fifo_regs.log_fifo_input.char
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.fifo_regs.log_fifo_input.char.value;
        load_next_c = '0;
        if(decoded_reg_strb.fifo_regs.log_fifo_input && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.fifo_regs.log_fifo_input.char.value & ~decoded_wr_biten[7:0]) | (decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end
        field_combo.fifo_regs.log_fifo_input.char.next = next_c;
        field_combo.fifo_regs.log_fifo_input.char.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.fifo_regs.log_fifo_input.char.value <= 8'h0;
        end else if(field_combo.fifo_regs.log_fifo_input.char.load_next) begin
            field_storage.fifo_regs.log_fifo_input.char.value <= field_combo.fifo_regs.log_fifo_input.char.next;
        end
    end
    assign hwif_out.fifo_regs.log_fifo_input.char.value = field_storage.fifo_regs.log_fifo_input.char.value;
    assign hwif_out.fifo_regs.log_fifo_input.char.wr_swacc = decoded_reg_strb.fifo_regs.log_fifo_input && decoded_req_is_wr;

    //--------------------------------------------------------------------------
    // Write response
    //--------------------------------------------------------------------------
    assign cpuif_wr_ack = decoded_req & decoded_req_is_wr;
    // Writes are always granted with no error response
    assign cpuif_wr_err = '0;

    //--------------------------------------------------------------------------
    // Readback
    //--------------------------------------------------------------------------

    logic readback_err;
    logic readback_done;
    logic [31:0] readback_data;

    // Assign readback values to a flattened array
    logic [31:0] readback_array[25];
    for(genvar i0=0; i0<8; i0++) begin
        assign readback_array[i0*1 + 0][31:0] = (decoded_reg_strb.interface_regs.cptra_obf_key[i0] && !decoded_req_is_wr) ? field_storage.interface_regs.cptra_obf_key[i0].value.value : '0;
    end
    assign readback_array[8][0:0] = (decoded_reg_strb.interface_regs.control && !decoded_req_is_wr) ? field_storage.interface_regs.control.rst_l.value : '0;
    assign readback_array[8][1:1] = (decoded_reg_strb.interface_regs.control && !decoded_req_is_wr) ? field_storage.interface_regs.control.dbg_rst_l.value : '0;
    assign readback_array[8][2:2] = (decoded_reg_strb.interface_regs.control && !decoded_req_is_wr) ? field_storage.interface_regs.control.i3c_rst_n.value : '0;
    assign readback_array[8][3:3] = (decoded_reg_strb.interface_regs.control && !decoded_req_is_wr) ? field_storage.interface_regs.control.mci_rst_b.value : '0;
    assign readback_array[8][4:4] = (decoded_reg_strb.interface_regs.control && !decoded_req_is_wr) ? field_storage.interface_regs.control.mci_pwrgood.value : '0;
    assign readback_array[8][5:5] = (decoded_reg_strb.interface_regs.control && !decoded_req_is_wr) ? field_storage.interface_regs.control.lc_rst_ni.value : '0;
    assign readback_array[8][6:6] = (decoded_reg_strb.interface_regs.control && !decoded_req_is_wr) ? field_storage.interface_regs.control.otp_rst_ni.value : '0;
    assign readback_array[8][7:7] = (decoded_reg_strb.interface_regs.control && !decoded_req_is_wr) ? field_storage.interface_regs.control.otp_rst_edn_ni.value : '0;
    assign readback_array[8][8:8] = (decoded_reg_strb.interface_regs.control && !decoded_req_is_wr) ? field_storage.interface_regs.control.scan_mode.value : '0;
    assign readback_array[8][31:9] = '0;
    assign readback_array[9][0:0] = (decoded_reg_strb.interface_regs.status && !decoded_req_is_wr) ? field_storage.interface_regs.status.cptra_error_fatal.value : '0;
    assign readback_array[9][1:1] = (decoded_reg_strb.interface_regs.status && !decoded_req_is_wr) ? field_storage.interface_regs.status.cptra_error_non_fatal.value : '0;
    assign readback_array[9][2:2] = (decoded_reg_strb.interface_regs.status && !decoded_req_is_wr) ? field_storage.interface_regs.status.ready_for_fuses.value : '0;
    assign readback_array[9][3:3] = (decoded_reg_strb.interface_regs.status && !decoded_req_is_wr) ? field_storage.interface_regs.status.ready_for_fw_push.value : '0;
    assign readback_array[9][4:4] = (decoded_reg_strb.interface_regs.status && !decoded_req_is_wr) ? field_storage.interface_regs.status.ready_for_runtime.value : '0;
    assign readback_array[9][5:5] = (decoded_reg_strb.interface_regs.status && !decoded_req_is_wr) ? field_storage.interface_regs.status.mailbox_data_avail.value : '0;
    assign readback_array[9][6:6] = (decoded_reg_strb.interface_regs.status && !decoded_req_is_wr) ? field_storage.interface_regs.status.mailbox_flow_done.value : '0;
    assign readback_array[9][31:7] = '0;
    assign readback_array[10][31:0] = (decoded_reg_strb.interface_regs.mcu_reset_vector && !decoded_req_is_wr) ? field_storage.interface_regs.mcu_reset_vector.mcu_reset_vector.value : '0;
    assign readback_array[11][31:0] = (decoded_reg_strb.interface_regs.generic && !decoded_req_is_wr) ? field_storage.interface_regs.generic.generic.value : '0;
    assign readback_array[12][31:0] = (decoded_reg_strb.interface_regs.generic_in && !decoded_req_is_wr) ? field_storage.interface_regs.generic_in.generic_in.value : '0;
    assign readback_array[13][31:0] = (decoded_reg_strb.interface_regs.lsu_user && !decoded_req_is_wr) ? field_storage.interface_regs.lsu_user.lsu_user.value : '0;
    assign readback_array[14][31:0] = (decoded_reg_strb.interface_regs.ifu_user && !decoded_req_is_wr) ? field_storage.interface_regs.ifu_user.ifu_user.value : '0;
    assign readback_array[15][31:0] = (decoded_reg_strb.interface_regs.clp_user && !decoded_req_is_wr) ? field_storage.interface_regs.clp_user.clp_user.value : '0;
    assign readback_array[16][0:0] = (decoded_reg_strb.interface_regs.mci_error && !decoded_req_is_wr) ? field_storage.interface_regs.mci_error.mci_error_fatal.value : '0;
    assign readback_array[16][1:1] = (decoded_reg_strb.interface_regs.mci_error && !decoded_req_is_wr) ? field_storage.interface_regs.mci_error.mci_error_non_fatal.value : '0;
    assign readback_array[16][31:2] = '0;
    assign readback_array[17][0:0] = (decoded_reg_strb.interface_regs.mci_config && !decoded_req_is_wr) ? field_storage.interface_regs.mci_config.mcu_no_rom_config.value : '0;
    assign readback_array[17][1:1] = (decoded_reg_strb.interface_regs.mci_config && !decoded_req_is_wr) ? field_storage.interface_regs.mci_config.cptra_ss_mci_boot_seq_brkpoint_i.value : '0;
    assign readback_array[17][2:2] = (decoded_reg_strb.interface_regs.mci_config && !decoded_req_is_wr) ? field_storage.interface_regs.mci_config.cptra_ss_lc_Allow_RMA_on_PPD_i.value : '0;
    assign readback_array[17][3:3] = (decoded_reg_strb.interface_regs.mci_config && !decoded_req_is_wr) ? field_storage.interface_regs.mci_config.cptra_ss_lc_ctrl_scan_rst_ni_i.value : '0;
    assign readback_array[17][4:4] = (decoded_reg_strb.interface_regs.mci_config && !decoded_req_is_wr) ? field_storage.interface_regs.mci_config.cptra_ss_lc_esclate_scrap_state0_i.value : '0;
    assign readback_array[17][5:5] = (decoded_reg_strb.interface_regs.mci_config && !decoded_req_is_wr) ? field_storage.interface_regs.mci_config.cptra_ss_lc_esclate_scrap_state1_i.value : '0;
    assign readback_array[17][31:6] = '0;
    for(genvar i0=0; i0<2; i0++) begin
        assign readback_array[i0*1 + 18][31:0] = (decoded_reg_strb.interface_regs.mci_generic_input_wires[i0] && !decoded_req_is_wr) ? field_storage.interface_regs.mci_generic_input_wires[i0].value.value : '0;
    end
    for(genvar i0=0; i0<2; i0++) begin
        assign readback_array[i0*1 + 20][31:0] = (decoded_reg_strb.interface_regs.mci_generic_output_wires[i0] && !decoded_req_is_wr) ? field_storage.interface_regs.mci_generic_output_wires[i0].value.value : '0;
    end
    assign readback_array[22][7:0] = (decoded_reg_strb.fifo_regs.log_fifo_data && !decoded_req_is_wr) ? field_storage.fifo_regs.log_fifo_data.next_char.value : '0;
    assign readback_array[22][8:8] = (decoded_reg_strb.fifo_regs.log_fifo_data && !decoded_req_is_wr) ? field_storage.fifo_regs.log_fifo_data.char_valid.value : '0;
    assign readback_array[22][31:9] = '0;
    assign readback_array[23][0:0] = (decoded_reg_strb.fifo_regs.log_fifo_status && !decoded_req_is_wr) ? field_storage.fifo_regs.log_fifo_status.log_fifo_empty.value : '0;
    assign readback_array[23][1:1] = (decoded_reg_strb.fifo_regs.log_fifo_status && !decoded_req_is_wr) ? field_storage.fifo_regs.log_fifo_status.log_fifo_full.value : '0;
    assign readback_array[23][31:2] = '0;
    assign readback_array[24][7:0] = (decoded_reg_strb.fifo_regs.log_fifo_input && !decoded_req_is_wr) ? field_storage.fifo_regs.log_fifo_input.char.value : '0;
    assign readback_array[24][31:8] = '0;

    // Reduce the array
    always_comb begin
        automatic logic [31:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<25; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end

    assign cpuif_rd_ack = readback_done;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;
endmodule
